// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gameData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gameData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gameData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gameData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gameData_2eproto;
namespace gameDataPb {
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_PlayerAttrsEntry_DoNotUse;
struct Event_PlayerAttrsEntry_DoNotUseDefaultTypeInternal;
extern Event_PlayerAttrsEntry_DoNotUseDefaultTypeInternal _Event_PlayerAttrsEntry_DoNotUse_default_instance_;
class PlayerAttr;
struct PlayerAttrDefaultTypeInternal;
extern PlayerAttrDefaultTypeInternal _PlayerAttr_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class State_PlayerAttrsEntry_DoNotUse;
struct State_PlayerAttrsEntry_DoNotUseDefaultTypeInternal;
extern State_PlayerAttrsEntry_DoNotUseDefaultTypeInternal _State_PlayerAttrsEntry_DoNotUse_default_instance_;
class State_PlayerInfo;
struct State_PlayerInfoDefaultTypeInternal;
extern State_PlayerInfoDefaultTypeInternal _State_PlayerInfo_default_instance_;
class State_PlayerInfosEntry_DoNotUse;
struct State_PlayerInfosEntry_DoNotUseDefaultTypeInternal;
extern State_PlayerInfosEntry_DoNotUseDefaultTypeInternal _State_PlayerInfosEntry_DoNotUse_default_instance_;
class Vec2;
struct Vec2DefaultTypeInternal;
extern Vec2DefaultTypeInternal _Vec2_default_instance_;
class Vec3;
struct Vec3DefaultTypeInternal;
extern Vec3DefaultTypeInternal _Vec3_default_instance_;
}  // namespace gameDataPb
PROTOBUF_NAMESPACE_OPEN
template<> ::gameDataPb::Event* Arena::CreateMaybeMessage<::gameDataPb::Event>(Arena*);
template<> ::gameDataPb::Event_PlayerAttrsEntry_DoNotUse* Arena::CreateMaybeMessage<::gameDataPb::Event_PlayerAttrsEntry_DoNotUse>(Arena*);
template<> ::gameDataPb::PlayerAttr* Arena::CreateMaybeMessage<::gameDataPb::PlayerAttr>(Arena*);
template<> ::gameDataPb::State* Arena::CreateMaybeMessage<::gameDataPb::State>(Arena*);
template<> ::gameDataPb::State_PlayerAttrsEntry_DoNotUse* Arena::CreateMaybeMessage<::gameDataPb::State_PlayerAttrsEntry_DoNotUse>(Arena*);
template<> ::gameDataPb::State_PlayerInfo* Arena::CreateMaybeMessage<::gameDataPb::State_PlayerInfo>(Arena*);
template<> ::gameDataPb::State_PlayerInfosEntry_DoNotUse* Arena::CreateMaybeMessage<::gameDataPb::State_PlayerInfosEntry_DoNotUse>(Arena*);
template<> ::gameDataPb::Vec2* Arena::CreateMaybeMessage<::gameDataPb::Vec2>(Arena*);
template<> ::gameDataPb::Vec3* Arena::CreateMaybeMessage<::gameDataPb::Vec3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gameDataPb {

enum DirState : int {
  NONE = 0,
  FRONT = 4,
  BACK = 8,
  LEFT = 16,
  RIGHT = 32,
  FRONTLEFT = 64,
  FRONTRIGHT = 128,
  BACKLEFT = 256,
  BACKRIGHT = 512,
  DirState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DirState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DirState_IsValid(int value);
constexpr DirState DirState_MIN = NONE;
constexpr DirState DirState_MAX = BACKRIGHT;
constexpr int DirState_ARRAYSIZE = DirState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DirState_descriptor();
template<typename T>
inline const std::string& DirState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DirState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DirState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DirState_descriptor(), enum_t_value);
}
inline bool DirState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DirState>(
    DirState_descriptor(), name, value);
}
enum MagicPb : int {
  FIREBALL = 0,
  STORM = 1,
  THUNDER = 2,
  DRAGON = 3,
  LIGHTNINGSPEAR = 4,
  GROUNDSMASH = 5,
  FLAME = 6,
  THOUSANDBLADE = 7,
  STONEBLAST = 8,
  MagicPb_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MagicPb_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MagicPb_IsValid(int value);
constexpr MagicPb MagicPb_MIN = FIREBALL;
constexpr MagicPb MagicPb_MAX = STONEBLAST;
constexpr int MagicPb_ARRAYSIZE = MagicPb_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MagicPb_descriptor();
template<typename T>
inline const std::string& MagicPb_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MagicPb>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MagicPb_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MagicPb_descriptor(), enum_t_value);
}
inline bool MagicPb_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MagicPb* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MagicPb>(
    MagicPb_descriptor(), name, value);
}
enum CharStatePb : int {
  IDLE = 0,
  MOVING = 1,
  ROLLING = 2,
  COMBATING = 3,
  DAMAGED = 4,
  DEAD = 5,
  CharStatePb_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CharStatePb_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CharStatePb_IsValid(int value);
constexpr CharStatePb CharStatePb_MIN = IDLE;
constexpr CharStatePb CharStatePb_MAX = DEAD;
constexpr int CharStatePb_ARRAYSIZE = CharStatePb_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharStatePb_descriptor();
template<typename T>
inline const std::string& CharStatePb_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CharStatePb>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CharStatePb_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CharStatePb_descriptor(), enum_t_value);
}
inline bool CharStatePb_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CharStatePb* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CharStatePb>(
    CharStatePb_descriptor(), name, value);
}
// ===================================================================

class Vec3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameDataPb.Vec3) */ {
 public:
  inline Vec3() : Vec3(nullptr) {}
  ~Vec3() override;
  explicit constexpr Vec3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vec3(const Vec3& from);
  Vec3(Vec3&& from) noexcept
    : Vec3() {
    *this = ::std::move(from);
  }

  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec3& operator=(Vec3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vec3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vec3* internal_default_instance() {
    return reinterpret_cast<const Vec3*>(
               &_Vec3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vec3& a, Vec3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vec3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vec3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vec3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vec3& from);
  public:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  public:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3* other);

  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameDataPb.Vec3";
  }
  public:
  explicit Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  public:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  public:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  public:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:gameDataPb.Vec3)
 public:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameData_2eproto;
};
// -------------------------------------------------------------------

class Vec2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameDataPb.Vec2) */ {
 public:
  inline Vec2() : Vec2(nullptr) {}
  ~Vec2() override;
  explicit constexpr Vec2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vec2(const Vec2& from);
  Vec2(Vec2&& from) noexcept
    : Vec2() {
    *this = ::std::move(from);
  }

  inline Vec2& operator=(const Vec2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec2& operator=(Vec2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vec2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vec2* internal_default_instance() {
    return reinterpret_cast<const Vec2*>(
               &_Vec2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vec2& a, Vec2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vec2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vec2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vec2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vec2& from);
  public:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  public:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec2* other);

  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameDataPb.Vec2";
  }
  public:
  explicit Vec2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  public:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  public:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:gameDataPb.Vec2)
 public:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameData_2eproto;
};
// -------------------------------------------------------------------

class PlayerAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameDataPb.PlayerAttr) */ {
 public:
  inline PlayerAttr() : PlayerAttr(nullptr) {}
  ~PlayerAttr() override;
  explicit constexpr PlayerAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerAttr(const PlayerAttr& from);
  PlayerAttr(PlayerAttr&& from) noexcept
    : PlayerAttr() {
    *this = ::std::move(from);
  }

  inline PlayerAttr& operator=(const PlayerAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerAttr& operator=(PlayerAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerAttr* internal_default_instance() {
    return reinterpret_cast<const PlayerAttr*>(
               &_PlayerAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerAttr& a, PlayerAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerAttr& from);
  public:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  public:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerAttr* other);

  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameDataPb.PlayerAttr";
  }
  public:
  explicit PlayerAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerHPFieldNumber = 1,
    kPlayerMPFieldNumber = 2,
  };
  // uint32 playerHP = 1;
  void clear_playerhp();
  uint32_t playerhp() const;
  void set_playerhp(uint32_t value);
  public:
  uint32_t _internal_playerhp() const;
  void _internal_set_playerhp(uint32_t value);
  public:

  // uint32 playerMP = 2;
  void clear_playermp();
  uint32_t playermp() const;
  void set_playermp(uint32_t value);
  public:
  uint32_t _internal_playermp() const;
  void _internal_set_playermp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gameDataPb.PlayerAttr)
 public:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t playerhp_;
  uint32_t playermp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameData_2eproto;
};
// -------------------------------------------------------------------

class Event_PlayerAttrsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Event_PlayerAttrsEntry_DoNotUse, 
    uint64_t, ::gameDataPb::PlayerAttr,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Event_PlayerAttrsEntry_DoNotUse, 
    uint64_t, ::gameDataPb::PlayerAttr,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Event_PlayerAttrsEntry_DoNotUse();
  explicit constexpr Event_PlayerAttrsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Event_PlayerAttrsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Event_PlayerAttrsEntry_DoNotUse& other);
  static const Event_PlayerAttrsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Event_PlayerAttrsEntry_DoNotUse*>(&_Event_PlayerAttrsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameDataPb.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit constexpr Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Event& from);
  public:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  public:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameDataPb.Event";
  }
  public:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMagicEventsFieldNumber = 12,
    kPlayerAttrsFieldNumber = 13,
    kPlayerNameFieldNumber = 3,
    kControlNodeEulerAnglesFieldNumber = 6,
    kMoveDirectionFieldNumber = 7,
    kPlayerStyleFieldNumber = 4,
    kPlayerGroupFieldNumber = 5,
    kStartFieldNumber = 1,
    kRestartFieldNumber = 2,
    kRollFieldNumber = 10,
    kToggleLockFieldNumber = 11,
    kDirStateFieldNumber = 8,
    kCharStatePbFieldNumber = 9,
  };
  // repeated .gameDataPb.MagicPb magicEvents = 12;
  int magicevents_size() const;
  public:
  int _internal_magicevents_size() const;
  public:
  void clear_magicevents();
  public:
  ::gameDataPb::MagicPb _internal_magicevents(int index) const;
  void _internal_add_magicevents(::gameDataPb::MagicPb value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_magicevents();
  public:
  ::gameDataPb::MagicPb magicevents(int index) const;
  void set_magicevents(int index, ::gameDataPb::MagicPb value);
  void add_magicevents(::gameDataPb::MagicPb value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& magicevents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_magicevents();

  // map<uint64, .gameDataPb.PlayerAttr> PlayerAttrs = 13;
  int playerattrs_size() const;
  public:
  int _internal_playerattrs_size() const;
  public:
  void clear_playerattrs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >&
      _internal_playerattrs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >*
      _internal_mutable_playerattrs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >&
      playerattrs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >*
      mutable_playerattrs();

  // string playerName = 3;
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  public:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // .gameDataPb.Vec3 controlNodeEulerAngles = 6;
  bool has_controlnodeeulerangles() const;
  public:
  bool _internal_has_controlnodeeulerangles() const;
  public:
  void clear_controlnodeeulerangles();
  const ::gameDataPb::Vec3& controlnodeeulerangles() const;
  PROTOBUF_NODISCARD ::gameDataPb::Vec3* release_controlnodeeulerangles();
  ::gameDataPb::Vec3* mutable_controlnodeeulerangles();
  void set_allocated_controlnodeeulerangles(::gameDataPb::Vec3* controlnodeeulerangles);
  public:
  const ::gameDataPb::Vec3& _internal_controlnodeeulerangles() const;
  ::gameDataPb::Vec3* _internal_mutable_controlnodeeulerangles();
  public:
  void unsafe_arena_set_allocated_controlnodeeulerangles(
      ::gameDataPb::Vec3* controlnodeeulerangles);
  ::gameDataPb::Vec3* unsafe_arena_release_controlnodeeulerangles();

  // .gameDataPb.Vec3 moveDirection = 7;
  bool has_movedirection() const;
  public:
  bool _internal_has_movedirection() const;
  public:
  void clear_movedirection();
  const ::gameDataPb::Vec3& movedirection() const;
  PROTOBUF_NODISCARD ::gameDataPb::Vec3* release_movedirection();
  ::gameDataPb::Vec3* mutable_movedirection();
  void set_allocated_movedirection(::gameDataPb::Vec3* movedirection);
  public:
  const ::gameDataPb::Vec3& _internal_movedirection() const;
  ::gameDataPb::Vec3* _internal_mutable_movedirection();
  public:
  void unsafe_arena_set_allocated_movedirection(
      ::gameDataPb::Vec3* movedirection);
  ::gameDataPb::Vec3* unsafe_arena_release_movedirection();

  // uint32 playerStyle = 4;
  void clear_playerstyle();
  uint32_t playerstyle() const;
  void set_playerstyle(uint32_t value);
  public:
  uint32_t _internal_playerstyle() const;
  void _internal_set_playerstyle(uint32_t value);
  public:

  // uint32 playerGroup = 5;
  void clear_playergroup();
  uint32_t playergroup() const;
  void set_playergroup(uint32_t value);
  public:
  uint32_t _internal_playergroup() const;
  void _internal_set_playergroup(uint32_t value);
  public:

  // bool start = 1;
  void clear_start();
  bool start() const;
  void set_start(bool value);
  public:
  bool _internal_start() const;
  void _internal_set_start(bool value);
  public:

  // bool restart = 2;
  void clear_restart();
  bool restart() const;
  void set_restart(bool value);
  public:
  bool _internal_restart() const;
  void _internal_set_restart(bool value);
  public:

  // bool roll = 10;
  void clear_roll();
  bool roll() const;
  void set_roll(bool value);
  public:
  bool _internal_roll() const;
  void _internal_set_roll(bool value);
  public:

  // bool toggleLock = 11;
  void clear_togglelock();
  bool togglelock() const;
  void set_togglelock(bool value);
  public:
  bool _internal_togglelock() const;
  void _internal_set_togglelock(bool value);
  public:

  // .gameDataPb.DirState dirState = 8;
  void clear_dirstate();
  ::gameDataPb::DirState dirstate() const;
  void set_dirstate(::gameDataPb::DirState value);
  public:
  ::gameDataPb::DirState _internal_dirstate() const;
  void _internal_set_dirstate(::gameDataPb::DirState value);
  public:

  // .gameDataPb.CharStatePb charStatePb = 9;
  void clear_charstatepb();
  ::gameDataPb::CharStatePb charstatepb() const;
  void set_charstatepb(::gameDataPb::CharStatePb value);
  public:
  ::gameDataPb::CharStatePb _internal_charstatepb() const;
  void _internal_set_charstatepb(::gameDataPb::CharStatePb value);
  public:

  // @@protoc_insertion_point(class_scope:gameDataPb.Event)
 public:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> magicevents_;
  mutable std::atomic<int> _magicevents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Event_PlayerAttrsEntry_DoNotUse,
      uint64_t, ::gameDataPb::PlayerAttr,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> playerattrs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  ::gameDataPb::Vec3* controlnodeeulerangles_;
  ::gameDataPb::Vec3* movedirection_;
  uint32_t playerstyle_;
  uint32_t playergroup_;
  bool start_;
  bool restart_;
  bool roll_;
  bool togglelock_;
  int dirstate_;
  int charstatepb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameData_2eproto;
};
// -------------------------------------------------------------------

class State_PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameDataPb.State.PlayerInfo) */ {
 public:
  inline State_PlayerInfo() : State_PlayerInfo(nullptr) {}
  ~State_PlayerInfo() override;
  explicit constexpr State_PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  State_PlayerInfo(const State_PlayerInfo& from);
  State_PlayerInfo(State_PlayerInfo&& from) noexcept
    : State_PlayerInfo() {
    *this = ::std::move(from);
  }

  inline State_PlayerInfo& operator=(const State_PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline State_PlayerInfo& operator=(State_PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State_PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const State_PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const State_PlayerInfo*>(
               &_State_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(State_PlayerInfo& a, State_PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(State_PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State_PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State_PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<State_PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const State_PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const State_PlayerInfo& from);
  public:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  public:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State_PlayerInfo* other);

  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameDataPb.State.PlayerInfo";
  }
  public:
  explicit State_PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicEventsFieldNumber = 10,
    kPlayerNameFieldNumber = 1,
    kControlNodeEulerAnglesFieldNumber = 4,
    kMoveDirectionFieldNumber = 5,
    kPlayerStyleFieldNumber = 2,
    kPlayerGroupFieldNumber = 3,
    kDirStateFieldNumber = 6,
    kCharStatePbFieldNumber = 7,
    kRollFieldNumber = 8,
    kToggleLockFieldNumber = 9,
  };
  // repeated .gameDataPb.MagicPb magicEvents = 10;
  int magicevents_size() const;
  public:
  int _internal_magicevents_size() const;
  public:
  void clear_magicevents();
  public:
  ::gameDataPb::MagicPb _internal_magicevents(int index) const;
  void _internal_add_magicevents(::gameDataPb::MagicPb value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_magicevents();
  public:
  ::gameDataPb::MagicPb magicevents(int index) const;
  void set_magicevents(int index, ::gameDataPb::MagicPb value);
  void add_magicevents(::gameDataPb::MagicPb value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& magicevents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_magicevents();

  // string playerName = 1;
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  public:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // .gameDataPb.Vec3 controlNodeEulerAngles = 4;
  bool has_controlnodeeulerangles() const;
  public:
  bool _internal_has_controlnodeeulerangles() const;
  public:
  void clear_controlnodeeulerangles();
  const ::gameDataPb::Vec3& controlnodeeulerangles() const;
  PROTOBUF_NODISCARD ::gameDataPb::Vec3* release_controlnodeeulerangles();
  ::gameDataPb::Vec3* mutable_controlnodeeulerangles();
  void set_allocated_controlnodeeulerangles(::gameDataPb::Vec3* controlnodeeulerangles);
  public:
  const ::gameDataPb::Vec3& _internal_controlnodeeulerangles() const;
  ::gameDataPb::Vec3* _internal_mutable_controlnodeeulerangles();
  public:
  void unsafe_arena_set_allocated_controlnodeeulerangles(
      ::gameDataPb::Vec3* controlnodeeulerangles);
  ::gameDataPb::Vec3* unsafe_arena_release_controlnodeeulerangles();

  // .gameDataPb.Vec3 moveDirection = 5;
  bool has_movedirection() const;
  public:
  bool _internal_has_movedirection() const;
  public:
  void clear_movedirection();
  const ::gameDataPb::Vec3& movedirection() const;
  PROTOBUF_NODISCARD ::gameDataPb::Vec3* release_movedirection();
  ::gameDataPb::Vec3* mutable_movedirection();
  void set_allocated_movedirection(::gameDataPb::Vec3* movedirection);
  public:
  const ::gameDataPb::Vec3& _internal_movedirection() const;
  ::gameDataPb::Vec3* _internal_mutable_movedirection();
  public:
  void unsafe_arena_set_allocated_movedirection(
      ::gameDataPb::Vec3* movedirection);
  ::gameDataPb::Vec3* unsafe_arena_release_movedirection();

  // uint32 playerStyle = 2;
  void clear_playerstyle();
  uint32_t playerstyle() const;
  void set_playerstyle(uint32_t value);
  public:
  uint32_t _internal_playerstyle() const;
  void _internal_set_playerstyle(uint32_t value);
  public:

  // uint32 playerGroup = 3;
  void clear_playergroup();
  uint32_t playergroup() const;
  void set_playergroup(uint32_t value);
  public:
  uint32_t _internal_playergroup() const;
  void _internal_set_playergroup(uint32_t value);
  public:

  // .gameDataPb.DirState dirState = 6;
  void clear_dirstate();
  ::gameDataPb::DirState dirstate() const;
  void set_dirstate(::gameDataPb::DirState value);
  public:
  ::gameDataPb::DirState _internal_dirstate() const;
  void _internal_set_dirstate(::gameDataPb::DirState value);
  public:

  // .gameDataPb.CharStatePb charStatePb = 7;
  void clear_charstatepb();
  ::gameDataPb::CharStatePb charstatepb() const;
  void set_charstatepb(::gameDataPb::CharStatePb value);
  public:
  ::gameDataPb::CharStatePb _internal_charstatepb() const;
  void _internal_set_charstatepb(::gameDataPb::CharStatePb value);
  public:

  // bool roll = 8;
  void clear_roll();
  bool roll() const;
  void set_roll(bool value);
  public:
  bool _internal_roll() const;
  void _internal_set_roll(bool value);
  public:

  // bool toggleLock = 9;
  void clear_togglelock();
  bool togglelock() const;
  void set_togglelock(bool value);
  public:
  bool _internal_togglelock() const;
  void _internal_set_togglelock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gameDataPb.State.PlayerInfo)
 public:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> magicevents_;
  mutable std::atomic<int> _magicevents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  ::gameDataPb::Vec3* controlnodeeulerangles_;
  ::gameDataPb::Vec3* movedirection_;
  uint32_t playerstyle_;
  uint32_t playergroup_;
  int dirstate_;
  int charstatepb_;
  bool roll_;
  bool togglelock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameData_2eproto;
};
// -------------------------------------------------------------------

class State_PlayerInfosEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<State_PlayerInfosEntry_DoNotUse, 
    uint64_t, ::gameDataPb::State_PlayerInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<State_PlayerInfosEntry_DoNotUse, 
    uint64_t, ::gameDataPb::State_PlayerInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  State_PlayerInfosEntry_DoNotUse();
  explicit constexpr State_PlayerInfosEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit State_PlayerInfosEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const State_PlayerInfosEntry_DoNotUse& other);
  static const State_PlayerInfosEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const State_PlayerInfosEntry_DoNotUse*>(&_State_PlayerInfosEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class State_PlayerAttrsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<State_PlayerAttrsEntry_DoNotUse, 
    uint64_t, ::gameDataPb::PlayerAttr,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<State_PlayerAttrsEntry_DoNotUse, 
    uint64_t, ::gameDataPb::PlayerAttr,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  State_PlayerAttrsEntry_DoNotUse();
  explicit constexpr State_PlayerAttrsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit State_PlayerAttrsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const State_PlayerAttrsEntry_DoNotUse& other);
  static const State_PlayerAttrsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const State_PlayerAttrsEntry_DoNotUse*>(&_State_PlayerAttrsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameDataPb.State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  explicit constexpr State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const State& from);
  public:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  public:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);

  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameDataPb.State";
  }
  public:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef State_PlayerInfo PlayerInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfosFieldNumber = 2,
    kPlayerAttrsFieldNumber = 3,
    kPlayerIPFieldNumber = 1,
  };
  // map<uint64, .gameDataPb.State.PlayerInfo> playerInfos = 2;
  int playerinfos_size() const;
  public:
  int _internal_playerinfos_size() const;
  public:
  void clear_playerinfos();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::State_PlayerInfo >&
      _internal_playerinfos() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::State_PlayerInfo >*
      _internal_mutable_playerinfos();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::State_PlayerInfo >&
      playerinfos() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::State_PlayerInfo >*
      mutable_playerinfos();

  // map<uint64, .gameDataPb.PlayerAttr> PlayerAttrs = 3;
  int playerattrs_size() const;
  public:
  int _internal_playerattrs_size() const;
  public:
  void clear_playerattrs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >&
      _internal_playerattrs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >*
      _internal_mutable_playerattrs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >&
      playerattrs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >*
      mutable_playerattrs();

  // uint64 playerIP = 1;
  void clear_playerip();
  uint64_t playerip() const;
  void set_playerip(uint64_t value);
  public:
  uint64_t _internal_playerip() const;
  void _internal_set_playerip(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gameDataPb.State)
 public:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      State_PlayerInfosEntry_DoNotUse,
      uint64_t, ::gameDataPb::State_PlayerInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> playerinfos_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      State_PlayerAttrsEntry_DoNotUse,
      uint64_t, ::gameDataPb::PlayerAttr,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> playerattrs_;
  uint64_t playerip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec3

// float x = 1;
inline void Vec3::clear_x() {
  x_ = 0;
}
inline float Vec3::_internal_x() const {
  return x_;
}
inline float Vec3::x() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Vec3.x)
  return _internal_x();
}
inline void Vec3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vec3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:gameDataPb.Vec3.x)
}

// float y = 2;
inline void Vec3::clear_y() {
  y_ = 0;
}
inline float Vec3::_internal_y() const {
  return y_;
}
inline float Vec3::y() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Vec3.y)
  return _internal_y();
}
inline void Vec3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vec3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:gameDataPb.Vec3.y)
}

// float z = 3;
inline void Vec3::clear_z() {
  z_ = 0;
}
inline float Vec3::_internal_z() const {
  return z_;
}
inline float Vec3::z() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Vec3.z)
  return _internal_z();
}
inline void Vec3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vec3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:gameDataPb.Vec3.z)
}

// -------------------------------------------------------------------

// Vec2

// float x = 1;
inline void Vec2::clear_x() {
  x_ = 0;
}
inline float Vec2::_internal_x() const {
  return x_;
}
inline float Vec2::x() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Vec2.x)
  return _internal_x();
}
inline void Vec2::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vec2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:gameDataPb.Vec2.x)
}

// float y = 2;
inline void Vec2::clear_y() {
  y_ = 0;
}
inline float Vec2::_internal_y() const {
  return y_;
}
inline float Vec2::y() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Vec2.y)
  return _internal_y();
}
inline void Vec2::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vec2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:gameDataPb.Vec2.y)
}

// -------------------------------------------------------------------

// PlayerAttr

// uint32 playerHP = 1;
inline void PlayerAttr::clear_playerhp() {
  playerhp_ = 0u;
}
inline uint32_t PlayerAttr::_internal_playerhp() const {
  return playerhp_;
}
inline uint32_t PlayerAttr::playerhp() const {
  // @@protoc_insertion_point(field_get:gameDataPb.PlayerAttr.playerHP)
  return _internal_playerhp();
}
inline void PlayerAttr::_internal_set_playerhp(uint32_t value) {
  
  playerhp_ = value;
}
inline void PlayerAttr::set_playerhp(uint32_t value) {
  _internal_set_playerhp(value);
  // @@protoc_insertion_point(field_set:gameDataPb.PlayerAttr.playerHP)
}

// uint32 playerMP = 2;
inline void PlayerAttr::clear_playermp() {
  playermp_ = 0u;
}
inline uint32_t PlayerAttr::_internal_playermp() const {
  return playermp_;
}
inline uint32_t PlayerAttr::playermp() const {
  // @@protoc_insertion_point(field_get:gameDataPb.PlayerAttr.playerMP)
  return _internal_playermp();
}
inline void PlayerAttr::_internal_set_playermp(uint32_t value) {
  
  playermp_ = value;
}
inline void PlayerAttr::set_playermp(uint32_t value) {
  _internal_set_playermp(value);
  // @@protoc_insertion_point(field_set:gameDataPb.PlayerAttr.playerMP)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Event

// bool start = 1;
inline void Event::clear_start() {
  start_ = false;
}
inline bool Event::_internal_start() const {
  return start_;
}
inline bool Event::start() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Event.start)
  return _internal_start();
}
inline void Event::_internal_set_start(bool value) {
  
  start_ = value;
}
inline void Event::set_start(bool value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:gameDataPb.Event.start)
}

// bool restart = 2;
inline void Event::clear_restart() {
  restart_ = false;
}
inline bool Event::_internal_restart() const {
  return restart_;
}
inline bool Event::restart() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Event.restart)
  return _internal_restart();
}
inline void Event::_internal_set_restart(bool value) {
  
  restart_ = value;
}
inline void Event::set_restart(bool value) {
  _internal_set_restart(value);
  // @@protoc_insertion_point(field_set:gameDataPb.Event.restart)
}

// string playerName = 3;
inline void Event::clear_playername() {
  playername_.ClearToEmpty();
}
inline const std::string& Event::playername() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Event.playerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_playername(ArgT0&& arg0, ArgT... args) {
 
 playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gameDataPb.Event.playerName)
}
inline std::string* Event::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:gameDataPb.Event.playerName)
  return _s;
}
inline const std::string& Event::_internal_playername() const {
  return playername_.Get();
}
inline void Event::_internal_set_playername(const std::string& value) {
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_playername() {
  
  return playername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Event::release_playername() {
  // @@protoc_insertion_point(field_release:gameDataPb.Event.playerName)
  return playername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Event::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  playername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (playername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gameDataPb.Event.playerName)
}

// uint32 playerStyle = 4;
inline void Event::clear_playerstyle() {
  playerstyle_ = 0u;
}
inline uint32_t Event::_internal_playerstyle() const {
  return playerstyle_;
}
inline uint32_t Event::playerstyle() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Event.playerStyle)
  return _internal_playerstyle();
}
inline void Event::_internal_set_playerstyle(uint32_t value) {
  
  playerstyle_ = value;
}
inline void Event::set_playerstyle(uint32_t value) {
  _internal_set_playerstyle(value);
  // @@protoc_insertion_point(field_set:gameDataPb.Event.playerStyle)
}

// uint32 playerGroup = 5;
inline void Event::clear_playergroup() {
  playergroup_ = 0u;
}
inline uint32_t Event::_internal_playergroup() const {
  return playergroup_;
}
inline uint32_t Event::playergroup() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Event.playerGroup)
  return _internal_playergroup();
}
inline void Event::_internal_set_playergroup(uint32_t value) {
  
  playergroup_ = value;
}
inline void Event::set_playergroup(uint32_t value) {
  _internal_set_playergroup(value);
  // @@protoc_insertion_point(field_set:gameDataPb.Event.playerGroup)
}

// .gameDataPb.Vec3 controlNodeEulerAngles = 6;
inline bool Event::_internal_has_controlnodeeulerangles() const {
  return this != internal_default_instance() && controlnodeeulerangles_ != nullptr;
}
inline bool Event::has_controlnodeeulerangles() const {
  return _internal_has_controlnodeeulerangles();
}
inline void Event::clear_controlnodeeulerangles() {
  if (GetArenaForAllocation() == nullptr && controlnodeeulerangles_ != nullptr) {
    delete controlnodeeulerangles_;
  }
  controlnodeeulerangles_ = nullptr;
}
inline const ::gameDataPb::Vec3& Event::_internal_controlnodeeulerangles() const {
  const ::gameDataPb::Vec3* p = controlnodeeulerangles_;
  return p != nullptr ? *p : reinterpret_cast<const ::gameDataPb::Vec3&>(
      ::gameDataPb::_Vec3_default_instance_);
}
inline const ::gameDataPb::Vec3& Event::controlnodeeulerangles() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Event.controlNodeEulerAngles)
  return _internal_controlnodeeulerangles();
}
inline void Event::unsafe_arena_set_allocated_controlnodeeulerangles(
    ::gameDataPb::Vec3* controlnodeeulerangles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlnodeeulerangles_);
  }
  controlnodeeulerangles_ = controlnodeeulerangles;
  if (controlnodeeulerangles) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gameDataPb.Event.controlNodeEulerAngles)
}
inline ::gameDataPb::Vec3* Event::release_controlnodeeulerangles() {
  
  ::gameDataPb::Vec3* temp = controlnodeeulerangles_;
  controlnodeeulerangles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gameDataPb::Vec3* Event::unsafe_arena_release_controlnodeeulerangles() {
  // @@protoc_insertion_point(field_release:gameDataPb.Event.controlNodeEulerAngles)
  
  ::gameDataPb::Vec3* temp = controlnodeeulerangles_;
  controlnodeeulerangles_ = nullptr;
  return temp;
}
inline ::gameDataPb::Vec3* Event::_internal_mutable_controlnodeeulerangles() {
  
  if (controlnodeeulerangles_ == nullptr) {
    auto* p = CreateMaybeMessage<::gameDataPb::Vec3>(GetArenaForAllocation());
    controlnodeeulerangles_ = p;
  }
  return controlnodeeulerangles_;
}
inline ::gameDataPb::Vec3* Event::mutable_controlnodeeulerangles() {
  ::gameDataPb::Vec3* _msg = _internal_mutable_controlnodeeulerangles();
  // @@protoc_insertion_point(field_mutable:gameDataPb.Event.controlNodeEulerAngles)
  return _msg;
}
inline void Event::set_allocated_controlnodeeulerangles(::gameDataPb::Vec3* controlnodeeulerangles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlnodeeulerangles_;
  }
  if (controlnodeeulerangles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gameDataPb::Vec3>::GetOwningArena(controlnodeeulerangles);
    if (message_arena != submessage_arena) {
      controlnodeeulerangles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlnodeeulerangles, submessage_arena);
    }
    
  } else {
    
  }
  controlnodeeulerangles_ = controlnodeeulerangles;
  // @@protoc_insertion_point(field_set_allocated:gameDataPb.Event.controlNodeEulerAngles)
}

// .gameDataPb.Vec3 moveDirection = 7;
inline bool Event::_internal_has_movedirection() const {
  return this != internal_default_instance() && movedirection_ != nullptr;
}
inline bool Event::has_movedirection() const {
  return _internal_has_movedirection();
}
inline void Event::clear_movedirection() {
  if (GetArenaForAllocation() == nullptr && movedirection_ != nullptr) {
    delete movedirection_;
  }
  movedirection_ = nullptr;
}
inline const ::gameDataPb::Vec3& Event::_internal_movedirection() const {
  const ::gameDataPb::Vec3* p = movedirection_;
  return p != nullptr ? *p : reinterpret_cast<const ::gameDataPb::Vec3&>(
      ::gameDataPb::_Vec3_default_instance_);
}
inline const ::gameDataPb::Vec3& Event::movedirection() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Event.moveDirection)
  return _internal_movedirection();
}
inline void Event::unsafe_arena_set_allocated_movedirection(
    ::gameDataPb::Vec3* movedirection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movedirection_);
  }
  movedirection_ = movedirection;
  if (movedirection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gameDataPb.Event.moveDirection)
}
inline ::gameDataPb::Vec3* Event::release_movedirection() {
  
  ::gameDataPb::Vec3* temp = movedirection_;
  movedirection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gameDataPb::Vec3* Event::unsafe_arena_release_movedirection() {
  // @@protoc_insertion_point(field_release:gameDataPb.Event.moveDirection)
  
  ::gameDataPb::Vec3* temp = movedirection_;
  movedirection_ = nullptr;
  return temp;
}
inline ::gameDataPb::Vec3* Event::_internal_mutable_movedirection() {
  
  if (movedirection_ == nullptr) {
    auto* p = CreateMaybeMessage<::gameDataPb::Vec3>(GetArenaForAllocation());
    movedirection_ = p;
  }
  return movedirection_;
}
inline ::gameDataPb::Vec3* Event::mutable_movedirection() {
  ::gameDataPb::Vec3* _msg = _internal_mutable_movedirection();
  // @@protoc_insertion_point(field_mutable:gameDataPb.Event.moveDirection)
  return _msg;
}
inline void Event::set_allocated_movedirection(::gameDataPb::Vec3* movedirection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete movedirection_;
  }
  if (movedirection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gameDataPb::Vec3>::GetOwningArena(movedirection);
    if (message_arena != submessage_arena) {
      movedirection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movedirection, submessage_arena);
    }
    
  } else {
    
  }
  movedirection_ = movedirection;
  // @@protoc_insertion_point(field_set_allocated:gameDataPb.Event.moveDirection)
}

// .gameDataPb.DirState dirState = 8;
inline void Event::clear_dirstate() {
  dirstate_ = 0;
}
inline ::gameDataPb::DirState Event::_internal_dirstate() const {
  return static_cast< ::gameDataPb::DirState >(dirstate_);
}
inline ::gameDataPb::DirState Event::dirstate() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Event.dirState)
  return _internal_dirstate();
}
inline void Event::_internal_set_dirstate(::gameDataPb::DirState value) {
  
  dirstate_ = value;
}
inline void Event::set_dirstate(::gameDataPb::DirState value) {
  _internal_set_dirstate(value);
  // @@protoc_insertion_point(field_set:gameDataPb.Event.dirState)
}

// .gameDataPb.CharStatePb charStatePb = 9;
inline void Event::clear_charstatepb() {
  charstatepb_ = 0;
}
inline ::gameDataPb::CharStatePb Event::_internal_charstatepb() const {
  return static_cast< ::gameDataPb::CharStatePb >(charstatepb_);
}
inline ::gameDataPb::CharStatePb Event::charstatepb() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Event.charStatePb)
  return _internal_charstatepb();
}
inline void Event::_internal_set_charstatepb(::gameDataPb::CharStatePb value) {
  
  charstatepb_ = value;
}
inline void Event::set_charstatepb(::gameDataPb::CharStatePb value) {
  _internal_set_charstatepb(value);
  // @@protoc_insertion_point(field_set:gameDataPb.Event.charStatePb)
}

// bool roll = 10;
inline void Event::clear_roll() {
  roll_ = false;
}
inline bool Event::_internal_roll() const {
  return roll_;
}
inline bool Event::roll() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Event.roll)
  return _internal_roll();
}
inline void Event::_internal_set_roll(bool value) {
  
  roll_ = value;
}
inline void Event::set_roll(bool value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:gameDataPb.Event.roll)
}

// bool toggleLock = 11;
inline void Event::clear_togglelock() {
  togglelock_ = false;
}
inline bool Event::_internal_togglelock() const {
  return togglelock_;
}
inline bool Event::togglelock() const {
  // @@protoc_insertion_point(field_get:gameDataPb.Event.toggleLock)
  return _internal_togglelock();
}
inline void Event::_internal_set_togglelock(bool value) {
  
  togglelock_ = value;
}
inline void Event::set_togglelock(bool value) {
  _internal_set_togglelock(value);
  // @@protoc_insertion_point(field_set:gameDataPb.Event.toggleLock)
}

// repeated .gameDataPb.MagicPb magicEvents = 12;
inline int Event::_internal_magicevents_size() const {
  return magicevents_.size();
}
inline int Event::magicevents_size() const {
  return _internal_magicevents_size();
}
inline void Event::clear_magicevents() {
  magicevents_.Clear();
}
inline ::gameDataPb::MagicPb Event::_internal_magicevents(int index) const {
  return static_cast< ::gameDataPb::MagicPb >(magicevents_.Get(index));
}
inline ::gameDataPb::MagicPb Event::magicevents(int index) const {
  // @@protoc_insertion_point(field_get:gameDataPb.Event.magicEvents)
  return _internal_magicevents(index);
}
inline void Event::set_magicevents(int index, ::gameDataPb::MagicPb value) {
  magicevents_.Set(index, value);
  // @@protoc_insertion_point(field_set:gameDataPb.Event.magicEvents)
}
inline void Event::_internal_add_magicevents(::gameDataPb::MagicPb value) {
  magicevents_.Add(value);
}
inline void Event::add_magicevents(::gameDataPb::MagicPb value) {
  _internal_add_magicevents(value);
  // @@protoc_insertion_point(field_add:gameDataPb.Event.magicEvents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Event::magicevents() const {
  // @@protoc_insertion_point(field_list:gameDataPb.Event.magicEvents)
  return magicevents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Event::_internal_mutable_magicevents() {
  return &magicevents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Event::mutable_magicevents() {
  // @@protoc_insertion_point(field_mutable_list:gameDataPb.Event.magicEvents)
  return _internal_mutable_magicevents();
}

// map<uint64, .gameDataPb.PlayerAttr> PlayerAttrs = 13;
inline int Event::_internal_playerattrs_size() const {
  return playerattrs_.size();
}
inline int Event::playerattrs_size() const {
  return _internal_playerattrs_size();
}
inline void Event::clear_playerattrs() {
  playerattrs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >&
Event::_internal_playerattrs() const {
  return playerattrs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >&
Event::playerattrs() const {
  // @@protoc_insertion_point(field_map:gameDataPb.Event.PlayerAttrs)
  return _internal_playerattrs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >*
Event::_internal_mutable_playerattrs() {
  return playerattrs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >*
Event::mutable_playerattrs() {
  // @@protoc_insertion_point(field_mutable_map:gameDataPb.Event.PlayerAttrs)
  return _internal_mutable_playerattrs();
}

// -------------------------------------------------------------------

// State_PlayerInfo

// string playerName = 1;
inline void State_PlayerInfo::clear_playername() {
  playername_.ClearToEmpty();
}
inline const std::string& State_PlayerInfo::playername() const {
  // @@protoc_insertion_point(field_get:gameDataPb.State.PlayerInfo.playerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void State_PlayerInfo::set_playername(ArgT0&& arg0, ArgT... args) {
 
 playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gameDataPb.State.PlayerInfo.playerName)
}
inline std::string* State_PlayerInfo::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:gameDataPb.State.PlayerInfo.playerName)
  return _s;
}
inline const std::string& State_PlayerInfo::_internal_playername() const {
  return playername_.Get();
}
inline void State_PlayerInfo::_internal_set_playername(const std::string& value) {
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* State_PlayerInfo::_internal_mutable_playername() {
  
  return playername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* State_PlayerInfo::release_playername() {
  // @@protoc_insertion_point(field_release:gameDataPb.State.PlayerInfo.playerName)
  return playername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void State_PlayerInfo::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  playername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (playername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gameDataPb.State.PlayerInfo.playerName)
}

// uint32 playerStyle = 2;
inline void State_PlayerInfo::clear_playerstyle() {
  playerstyle_ = 0u;
}
inline uint32_t State_PlayerInfo::_internal_playerstyle() const {
  return playerstyle_;
}
inline uint32_t State_PlayerInfo::playerstyle() const {
  // @@protoc_insertion_point(field_get:gameDataPb.State.PlayerInfo.playerStyle)
  return _internal_playerstyle();
}
inline void State_PlayerInfo::_internal_set_playerstyle(uint32_t value) {
  
  playerstyle_ = value;
}
inline void State_PlayerInfo::set_playerstyle(uint32_t value) {
  _internal_set_playerstyle(value);
  // @@protoc_insertion_point(field_set:gameDataPb.State.PlayerInfo.playerStyle)
}

// uint32 playerGroup = 3;
inline void State_PlayerInfo::clear_playergroup() {
  playergroup_ = 0u;
}
inline uint32_t State_PlayerInfo::_internal_playergroup() const {
  return playergroup_;
}
inline uint32_t State_PlayerInfo::playergroup() const {
  // @@protoc_insertion_point(field_get:gameDataPb.State.PlayerInfo.playerGroup)
  return _internal_playergroup();
}
inline void State_PlayerInfo::_internal_set_playergroup(uint32_t value) {
  
  playergroup_ = value;
}
inline void State_PlayerInfo::set_playergroup(uint32_t value) {
  _internal_set_playergroup(value);
  // @@protoc_insertion_point(field_set:gameDataPb.State.PlayerInfo.playerGroup)
}

// .gameDataPb.Vec3 controlNodeEulerAngles = 4;
inline bool State_PlayerInfo::_internal_has_controlnodeeulerangles() const {
  return this != internal_default_instance() && controlnodeeulerangles_ != nullptr;
}
inline bool State_PlayerInfo::has_controlnodeeulerangles() const {
  return _internal_has_controlnodeeulerangles();
}
inline void State_PlayerInfo::clear_controlnodeeulerangles() {
  if (GetArenaForAllocation() == nullptr && controlnodeeulerangles_ != nullptr) {
    delete controlnodeeulerangles_;
  }
  controlnodeeulerangles_ = nullptr;
}
inline const ::gameDataPb::Vec3& State_PlayerInfo::_internal_controlnodeeulerangles() const {
  const ::gameDataPb::Vec3* p = controlnodeeulerangles_;
  return p != nullptr ? *p : reinterpret_cast<const ::gameDataPb::Vec3&>(
      ::gameDataPb::_Vec3_default_instance_);
}
inline const ::gameDataPb::Vec3& State_PlayerInfo::controlnodeeulerangles() const {
  // @@protoc_insertion_point(field_get:gameDataPb.State.PlayerInfo.controlNodeEulerAngles)
  return _internal_controlnodeeulerangles();
}
inline void State_PlayerInfo::unsafe_arena_set_allocated_controlnodeeulerangles(
    ::gameDataPb::Vec3* controlnodeeulerangles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlnodeeulerangles_);
  }
  controlnodeeulerangles_ = controlnodeeulerangles;
  if (controlnodeeulerangles) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gameDataPb.State.PlayerInfo.controlNodeEulerAngles)
}
inline ::gameDataPb::Vec3* State_PlayerInfo::release_controlnodeeulerangles() {
  
  ::gameDataPb::Vec3* temp = controlnodeeulerangles_;
  controlnodeeulerangles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gameDataPb::Vec3* State_PlayerInfo::unsafe_arena_release_controlnodeeulerangles() {
  // @@protoc_insertion_point(field_release:gameDataPb.State.PlayerInfo.controlNodeEulerAngles)
  
  ::gameDataPb::Vec3* temp = controlnodeeulerangles_;
  controlnodeeulerangles_ = nullptr;
  return temp;
}
inline ::gameDataPb::Vec3* State_PlayerInfo::_internal_mutable_controlnodeeulerangles() {
  
  if (controlnodeeulerangles_ == nullptr) {
    auto* p = CreateMaybeMessage<::gameDataPb::Vec3>(GetArenaForAllocation());
    controlnodeeulerangles_ = p;
  }
  return controlnodeeulerangles_;
}
inline ::gameDataPb::Vec3* State_PlayerInfo::mutable_controlnodeeulerangles() {
  ::gameDataPb::Vec3* _msg = _internal_mutable_controlnodeeulerangles();
  // @@protoc_insertion_point(field_mutable:gameDataPb.State.PlayerInfo.controlNodeEulerAngles)
  return _msg;
}
inline void State_PlayerInfo::set_allocated_controlnodeeulerangles(::gameDataPb::Vec3* controlnodeeulerangles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlnodeeulerangles_;
  }
  if (controlnodeeulerangles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gameDataPb::Vec3>::GetOwningArena(controlnodeeulerangles);
    if (message_arena != submessage_arena) {
      controlnodeeulerangles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlnodeeulerangles, submessage_arena);
    }
    
  } else {
    
  }
  controlnodeeulerangles_ = controlnodeeulerangles;
  // @@protoc_insertion_point(field_set_allocated:gameDataPb.State.PlayerInfo.controlNodeEulerAngles)
}

// .gameDataPb.Vec3 moveDirection = 5;
inline bool State_PlayerInfo::_internal_has_movedirection() const {
  return this != internal_default_instance() && movedirection_ != nullptr;
}
inline bool State_PlayerInfo::has_movedirection() const {
  return _internal_has_movedirection();
}
inline void State_PlayerInfo::clear_movedirection() {
  if (GetArenaForAllocation() == nullptr && movedirection_ != nullptr) {
    delete movedirection_;
  }
  movedirection_ = nullptr;
}
inline const ::gameDataPb::Vec3& State_PlayerInfo::_internal_movedirection() const {
  const ::gameDataPb::Vec3* p = movedirection_;
  return p != nullptr ? *p : reinterpret_cast<const ::gameDataPb::Vec3&>(
      ::gameDataPb::_Vec3_default_instance_);
}
inline const ::gameDataPb::Vec3& State_PlayerInfo::movedirection() const {
  // @@protoc_insertion_point(field_get:gameDataPb.State.PlayerInfo.moveDirection)
  return _internal_movedirection();
}
inline void State_PlayerInfo::unsafe_arena_set_allocated_movedirection(
    ::gameDataPb::Vec3* movedirection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movedirection_);
  }
  movedirection_ = movedirection;
  if (movedirection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gameDataPb.State.PlayerInfo.moveDirection)
}
inline ::gameDataPb::Vec3* State_PlayerInfo::release_movedirection() {
  
  ::gameDataPb::Vec3* temp = movedirection_;
  movedirection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gameDataPb::Vec3* State_PlayerInfo::unsafe_arena_release_movedirection() {
  // @@protoc_insertion_point(field_release:gameDataPb.State.PlayerInfo.moveDirection)
  
  ::gameDataPb::Vec3* temp = movedirection_;
  movedirection_ = nullptr;
  return temp;
}
inline ::gameDataPb::Vec3* State_PlayerInfo::_internal_mutable_movedirection() {
  
  if (movedirection_ == nullptr) {
    auto* p = CreateMaybeMessage<::gameDataPb::Vec3>(GetArenaForAllocation());
    movedirection_ = p;
  }
  return movedirection_;
}
inline ::gameDataPb::Vec3* State_PlayerInfo::mutable_movedirection() {
  ::gameDataPb::Vec3* _msg = _internal_mutable_movedirection();
  // @@protoc_insertion_point(field_mutable:gameDataPb.State.PlayerInfo.moveDirection)
  return _msg;
}
inline void State_PlayerInfo::set_allocated_movedirection(::gameDataPb::Vec3* movedirection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete movedirection_;
  }
  if (movedirection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gameDataPb::Vec3>::GetOwningArena(movedirection);
    if (message_arena != submessage_arena) {
      movedirection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movedirection, submessage_arena);
    }
    
  } else {
    
  }
  movedirection_ = movedirection;
  // @@protoc_insertion_point(field_set_allocated:gameDataPb.State.PlayerInfo.moveDirection)
}

// .gameDataPb.DirState dirState = 6;
inline void State_PlayerInfo::clear_dirstate() {
  dirstate_ = 0;
}
inline ::gameDataPb::DirState State_PlayerInfo::_internal_dirstate() const {
  return static_cast< ::gameDataPb::DirState >(dirstate_);
}
inline ::gameDataPb::DirState State_PlayerInfo::dirstate() const {
  // @@protoc_insertion_point(field_get:gameDataPb.State.PlayerInfo.dirState)
  return _internal_dirstate();
}
inline void State_PlayerInfo::_internal_set_dirstate(::gameDataPb::DirState value) {
  
  dirstate_ = value;
}
inline void State_PlayerInfo::set_dirstate(::gameDataPb::DirState value) {
  _internal_set_dirstate(value);
  // @@protoc_insertion_point(field_set:gameDataPb.State.PlayerInfo.dirState)
}

// .gameDataPb.CharStatePb charStatePb = 7;
inline void State_PlayerInfo::clear_charstatepb() {
  charstatepb_ = 0;
}
inline ::gameDataPb::CharStatePb State_PlayerInfo::_internal_charstatepb() const {
  return static_cast< ::gameDataPb::CharStatePb >(charstatepb_);
}
inline ::gameDataPb::CharStatePb State_PlayerInfo::charstatepb() const {
  // @@protoc_insertion_point(field_get:gameDataPb.State.PlayerInfo.charStatePb)
  return _internal_charstatepb();
}
inline void State_PlayerInfo::_internal_set_charstatepb(::gameDataPb::CharStatePb value) {
  
  charstatepb_ = value;
}
inline void State_PlayerInfo::set_charstatepb(::gameDataPb::CharStatePb value) {
  _internal_set_charstatepb(value);
  // @@protoc_insertion_point(field_set:gameDataPb.State.PlayerInfo.charStatePb)
}

// bool roll = 8;
inline void State_PlayerInfo::clear_roll() {
  roll_ = false;
}
inline bool State_PlayerInfo::_internal_roll() const {
  return roll_;
}
inline bool State_PlayerInfo::roll() const {
  // @@protoc_insertion_point(field_get:gameDataPb.State.PlayerInfo.roll)
  return _internal_roll();
}
inline void State_PlayerInfo::_internal_set_roll(bool value) {
  
  roll_ = value;
}
inline void State_PlayerInfo::set_roll(bool value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:gameDataPb.State.PlayerInfo.roll)
}

// bool toggleLock = 9;
inline void State_PlayerInfo::clear_togglelock() {
  togglelock_ = false;
}
inline bool State_PlayerInfo::_internal_togglelock() const {
  return togglelock_;
}
inline bool State_PlayerInfo::togglelock() const {
  // @@protoc_insertion_point(field_get:gameDataPb.State.PlayerInfo.toggleLock)
  return _internal_togglelock();
}
inline void State_PlayerInfo::_internal_set_togglelock(bool value) {
  
  togglelock_ = value;
}
inline void State_PlayerInfo::set_togglelock(bool value) {
  _internal_set_togglelock(value);
  // @@protoc_insertion_point(field_set:gameDataPb.State.PlayerInfo.toggleLock)
}

// repeated .gameDataPb.MagicPb magicEvents = 10;
inline int State_PlayerInfo::_internal_magicevents_size() const {
  return magicevents_.size();
}
inline int State_PlayerInfo::magicevents_size() const {
  return _internal_magicevents_size();
}
inline void State_PlayerInfo::clear_magicevents() {
  magicevents_.Clear();
}
inline ::gameDataPb::MagicPb State_PlayerInfo::_internal_magicevents(int index) const {
  return static_cast< ::gameDataPb::MagicPb >(magicevents_.Get(index));
}
inline ::gameDataPb::MagicPb State_PlayerInfo::magicevents(int index) const {
  // @@protoc_insertion_point(field_get:gameDataPb.State.PlayerInfo.magicEvents)
  return _internal_magicevents(index);
}
inline void State_PlayerInfo::set_magicevents(int index, ::gameDataPb::MagicPb value) {
  magicevents_.Set(index, value);
  // @@protoc_insertion_point(field_set:gameDataPb.State.PlayerInfo.magicEvents)
}
inline void State_PlayerInfo::_internal_add_magicevents(::gameDataPb::MagicPb value) {
  magicevents_.Add(value);
}
inline void State_PlayerInfo::add_magicevents(::gameDataPb::MagicPb value) {
  _internal_add_magicevents(value);
  // @@protoc_insertion_point(field_add:gameDataPb.State.PlayerInfo.magicEvents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
State_PlayerInfo::magicevents() const {
  // @@protoc_insertion_point(field_list:gameDataPb.State.PlayerInfo.magicEvents)
  return magicevents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
State_PlayerInfo::_internal_mutable_magicevents() {
  return &magicevents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
State_PlayerInfo::mutable_magicevents() {
  // @@protoc_insertion_point(field_mutable_list:gameDataPb.State.PlayerInfo.magicEvents)
  return _internal_mutable_magicevents();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// State

// uint64 playerIP = 1;
inline void State::clear_playerip() {
  playerip_ = uint64_t{0u};
}
inline uint64_t State::_internal_playerip() const {
  return playerip_;
}
inline uint64_t State::playerip() const {
  // @@protoc_insertion_point(field_get:gameDataPb.State.playerIP)
  return _internal_playerip();
}
inline void State::_internal_set_playerip(uint64_t value) {
  
  playerip_ = value;
}
inline void State::set_playerip(uint64_t value) {
  _internal_set_playerip(value);
  // @@protoc_insertion_point(field_set:gameDataPb.State.playerIP)
}

// map<uint64, .gameDataPb.State.PlayerInfo> playerInfos = 2;
inline int State::_internal_playerinfos_size() const {
  return playerinfos_.size();
}
inline int State::playerinfos_size() const {
  return _internal_playerinfos_size();
}
inline void State::clear_playerinfos() {
  playerinfos_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::State_PlayerInfo >&
State::_internal_playerinfos() const {
  return playerinfos_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::State_PlayerInfo >&
State::playerinfos() const {
  // @@protoc_insertion_point(field_map:gameDataPb.State.playerInfos)
  return _internal_playerinfos();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::State_PlayerInfo >*
State::_internal_mutable_playerinfos() {
  return playerinfos_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::State_PlayerInfo >*
State::mutable_playerinfos() {
  // @@protoc_insertion_point(field_mutable_map:gameDataPb.State.playerInfos)
  return _internal_mutable_playerinfos();
}

// map<uint64, .gameDataPb.PlayerAttr> PlayerAttrs = 3;
inline int State::_internal_playerattrs_size() const {
  return playerattrs_.size();
}
inline int State::playerattrs_size() const {
  return _internal_playerattrs_size();
}
inline void State::clear_playerattrs() {
  playerattrs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >&
State::_internal_playerattrs() const {
  return playerattrs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >&
State::playerattrs() const {
  // @@protoc_insertion_point(field_map:gameDataPb.State.PlayerAttrs)
  return _internal_playerattrs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >*
State::_internal_mutable_playerattrs() {
  return playerattrs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >*
State::mutable_playerattrs() {
  // @@protoc_insertion_point(field_mutable_map:gameDataPb.State.PlayerAttrs)
  return _internal_mutable_playerattrs();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gameDataPb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gameDataPb::DirState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gameDataPb::DirState>() {
  return ::gameDataPb::DirState_descriptor();
}
template <> struct is_proto_enum< ::gameDataPb::MagicPb> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gameDataPb::MagicPb>() {
  return ::gameDataPb::MagicPb_descriptor();
}
template <> struct is_proto_enum< ::gameDataPb::CharStatePb> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gameDataPb::CharStatePb>() {
  return ::gameDataPb::CharStatePb_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gameData_2eproto
