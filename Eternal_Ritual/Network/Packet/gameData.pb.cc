// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameData.proto

#include "gameData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace gameDataPb {
constexpr Vec3::Vec3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vec3DefaultTypeInternal {
  constexpr Vec3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vec3DefaultTypeInternal() {}
  union {
    Vec3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vec3DefaultTypeInternal _Vec3_default_instance_;
constexpr Vec2::Vec2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Vec2DefaultTypeInternal {
  constexpr Vec2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vec2DefaultTypeInternal() {}
  union {
    Vec2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vec2DefaultTypeInternal _Vec2_default_instance_;
constexpr PlayerAttr::PlayerAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerhp_(0u)
  , playermp_(0u){}
struct PlayerAttrDefaultTypeInternal {
  constexpr PlayerAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerAttrDefaultTypeInternal() {}
  union {
    PlayerAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerAttrDefaultTypeInternal _PlayerAttr_default_instance_;
constexpr Event_PlayerAttrsEntry_DoNotUse::Event_PlayerAttrsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Event_PlayerAttrsEntry_DoNotUseDefaultTypeInternal {
  constexpr Event_PlayerAttrsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Event_PlayerAttrsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Event_PlayerAttrsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Event_PlayerAttrsEntry_DoNotUseDefaultTypeInternal _Event_PlayerAttrsEntry_DoNotUse_default_instance_;
constexpr Event::Event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : magicevents_()
  , _magicevents_cached_byte_size_(0)
  , playerattrs_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , playername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , controlnodeeulerangles_(nullptr)
  , movedirection_(nullptr)
  , playerstyle_(0u)
  , playergroup_(0u)
  , start_(false)
  , restart_(false)
  , roll_(false)
  , togglelock_(false)
  , dirstate_(0)

  , charstatepb_(0)
{}
struct EventDefaultTypeInternal {
  constexpr EventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventDefaultTypeInternal _Event_default_instance_;
constexpr State_PlayerInfo::State_PlayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : magicevents_()
  , _magicevents_cached_byte_size_(0)
  , playername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , controlnodeeulerangles_(nullptr)
  , movedirection_(nullptr)
  , playerstyle_(0u)
  , playergroup_(0u)
  , dirstate_(0)

  , charstatepb_(0)

  , roll_(false)
  , togglelock_(false){}
struct State_PlayerInfoDefaultTypeInternal {
  constexpr State_PlayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~State_PlayerInfoDefaultTypeInternal() {}
  union {
    State_PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT State_PlayerInfoDefaultTypeInternal _State_PlayerInfo_default_instance_;
constexpr State_PlayerInfosEntry_DoNotUse::State_PlayerInfosEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct State_PlayerInfosEntry_DoNotUseDefaultTypeInternal {
  constexpr State_PlayerInfosEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~State_PlayerInfosEntry_DoNotUseDefaultTypeInternal() {}
  union {
    State_PlayerInfosEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT State_PlayerInfosEntry_DoNotUseDefaultTypeInternal _State_PlayerInfosEntry_DoNotUse_default_instance_;
constexpr State_PlayerAttrsEntry_DoNotUse::State_PlayerAttrsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct State_PlayerAttrsEntry_DoNotUseDefaultTypeInternal {
  constexpr State_PlayerAttrsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~State_PlayerAttrsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    State_PlayerAttrsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT State_PlayerAttrsEntry_DoNotUseDefaultTypeInternal _State_PlayerAttrsEntry_DoNotUse_default_instance_;
constexpr State::State(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerinfos_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , playerattrs_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , playerip_(uint64_t{0u}){}
struct StateDefaultTypeInternal {
  constexpr StateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StateDefaultTypeInternal() {}
  union {
    State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StateDefaultTypeInternal _State_default_instance_;
}  // namespace gameDataPb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gameData_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gameData_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gameData_2eproto = nullptr;

const uint32_t TableStruct_gameData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Vec3, x_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Vec3, y_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Vec3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Vec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Vec2, x_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Vec2, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::PlayerAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::PlayerAttr, playerhp_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::PlayerAttr, playermp_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event_PlayerAttrsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event_PlayerAttrsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event_PlayerAttrsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event_PlayerAttrsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event, start_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event, restart_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event, playername_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event, playerstyle_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event, playergroup_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event, controlnodeeulerangles_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event, movedirection_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event, dirstate_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event, charstatepb_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event, roll_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event, togglelock_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event, magicevents_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::Event, playerattrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfo, playername_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfo, playerstyle_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfo, playergroup_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfo, controlnodeeulerangles_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfo, movedirection_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfo, dirstate_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfo, charstatepb_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfo, roll_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfo, togglelock_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfo, magicevents_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfosEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfosEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfosEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerInfosEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerAttrsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerAttrsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerAttrsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State_PlayerAttrsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State, playerip_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State, playerinfos_),
  PROTOBUF_FIELD_OFFSET(::gameDataPb::State, playerattrs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::gameDataPb::Vec3)},
  { 9, -1, -1, sizeof(::gameDataPb::Vec2)},
  { 17, -1, -1, sizeof(::gameDataPb::PlayerAttr)},
  { 25, 33, -1, sizeof(::gameDataPb::Event_PlayerAttrsEntry_DoNotUse)},
  { 35, -1, -1, sizeof(::gameDataPb::Event)},
  { 54, -1, -1, sizeof(::gameDataPb::State_PlayerInfo)},
  { 70, 78, -1, sizeof(::gameDataPb::State_PlayerInfosEntry_DoNotUse)},
  { 80, 88, -1, sizeof(::gameDataPb::State_PlayerAttrsEntry_DoNotUse)},
  { 90, -1, -1, sizeof(::gameDataPb::State)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameDataPb::_Vec3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameDataPb::_Vec2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameDataPb::_PlayerAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameDataPb::_Event_PlayerAttrsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameDataPb::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameDataPb::_State_PlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameDataPb::_State_PlayerInfosEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameDataPb::_State_PlayerAttrsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameDataPb::_State_default_instance_),
};

const char descriptor_table_protodef_gameData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016gameData.proto\022\ngameDataPb\"\'\n\004Vec3\022\t\n\001"
  "x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\034\n\004Vec2\022\t\n"
  "\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"0\n\nPlayerAttr\022\020\n\010pla"
  "yerHP\030\001 \001(\r\022\020\n\010playerMP\030\002 \001(\r\"\347\003\n\005Event\022"
  "\r\n\005start\030\001 \001(\010\022\017\n\007restart\030\002 \001(\010\022\022\n\nplaye"
  "rName\030\003 \001(\t\022\023\n\013playerStyle\030\004 \001(\r\022\023\n\013play"
  "erGroup\030\005 \001(\r\0220\n\026controlNodeEulerAngles\030"
  "\006 \001(\0132\020.gameDataPb.Vec3\022\'\n\rmoveDirection"
  "\030\007 \001(\0132\020.gameDataPb.Vec3\022&\n\010dirState\030\010 \001"
  "(\0162\024.gameDataPb.DirState\022,\n\013charStatePb\030"
  "\t \001(\0162\027.gameDataPb.CharStatePb\022\014\n\004roll\030\n"
  " \001(\010\022\022\n\ntoggleLock\030\013 \001(\010\022(\n\013magicEvents\030"
  "\014 \003(\0162\023.gameDataPb.MagicPb\0227\n\013PlayerAttr"
  "s\030\r \003(\0132\".gameDataPb.Event.PlayerAttrsEn"
  "try\032J\n\020PlayerAttrsEntry\022\013\n\003key\030\001 \001(\004\022%\n\005"
  "value\030\002 \001(\0132\026.gameDataPb.PlayerAttr:\0028\001\""
  "\363\004\n\005State\022\020\n\010playerIP\030\001 \001(\004\0227\n\013playerInf"
  "os\030\002 \003(\0132\".gameDataPb.State.PlayerInfosE"
  "ntry\0227\n\013PlayerAttrs\030\003 \003(\0132\".gameDataPb.S"
  "tate.PlayerAttrsEntry\032\307\002\n\nPlayerInfo\022\022\n\n"
  "playerName\030\001 \001(\t\022\023\n\013playerStyle\030\002 \001(\r\022\023\n"
  "\013playerGroup\030\003 \001(\r\0220\n\026controlNodeEulerAn"
  "gles\030\004 \001(\0132\020.gameDataPb.Vec3\022\'\n\rmoveDire"
  "ction\030\005 \001(\0132\020.gameDataPb.Vec3\022&\n\010dirStat"
  "e\030\006 \001(\0162\024.gameDataPb.DirState\022,\n\013charSta"
  "tePb\030\007 \001(\0162\027.gameDataPb.CharStatePb\022\014\n\004r"
  "oll\030\010 \001(\010\022\022\n\ntoggleLock\030\t \001(\010\022(\n\013magicEv"
  "ents\030\n \003(\0162\023.gameDataPb.MagicPb\032P\n\020Playe"
  "rInfosEntry\022\013\n\003key\030\001 \001(\004\022+\n\005value\030\002 \001(\0132"
  "\034.gameDataPb.State.PlayerInfo:\0028\001\032J\n\020Pla"
  "yerAttrsEntry\022\013\n\003key\030\001 \001(\004\022%\n\005value\030\002 \001("
  "\0132\026.gameDataPb.PlayerAttr:\0028\001*}\n\010DirStat"
  "e\022\010\n\004NONE\020\000\022\t\n\005FRONT\020\004\022\010\n\004BACK\020\010\022\010\n\004LEFT"
  "\020\020\022\t\n\005RIGHT\020 \022\r\n\tFRONTLEFT\020@\022\017\n\nFRONTRIG"
  "HT\020\200\001\022\r\n\010BACKLEFT\020\200\002\022\016\n\tBACKRIGHT\020\200\004*\203\001\n"
  "\007MagicPb\022\014\n\010FIREBALL\020\000\022\016\n\nSTONEBLAST\020\001\022\013"
  "\n\007THUNDER\020\002\022\n\n\006DRAGON\020\003\022\022\n\016LIGHTNINGSPEA"
  "R\020\004\022\017\n\013GROUNDSMASH\020\005\022\t\n\005FLAME\020\006\022\021\n\rTHOUS"
  "ANDBLADE\020\007*V\n\013CharStatePb\022\010\n\004IDLE\020\000\022\n\n\006M"
  "OVING\020\001\022\013\n\007ROLLING\020\002\022\r\n\tCOMBATING\020\003\022\013\n\007D"
  "AMAGED\020\004\022\010\n\004DEAD\020\005B\002H\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gameData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gameData_2eproto = {
  false, false, 1630, descriptor_table_protodef_gameData_2eproto, "gameData.proto", 
  &descriptor_table_gameData_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_gameData_2eproto::offsets,
  file_level_metadata_gameData_2eproto, file_level_enum_descriptors_gameData_2eproto, file_level_service_descriptors_gameData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_gameData_2eproto_getter() {
  return &descriptor_table_gameData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gameData_2eproto(&descriptor_table_gameData_2eproto);
namespace gameDataPb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DirState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gameData_2eproto);
  return file_level_enum_descriptors_gameData_2eproto[0];
}
bool DirState_IsValid(int value) {
  switch (value) {
    case 0:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MagicPb_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gameData_2eproto);
  return file_level_enum_descriptors_gameData_2eproto[1];
}
bool MagicPb_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharStatePb_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gameData_2eproto);
  return file_level_enum_descriptors_gameData_2eproto[2];
}
bool CharStatePb_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Vec3::_Internal {
 public:
};

Vec3::Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gameDataPb.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:gameDataPb.Vec3)
}

inline void Vec3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:gameDataPb.Vec3)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vec3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec3::ArenaDtor(void* object) {
  Vec3* _this = reinterpret_cast< Vec3* >(object);
  (void)_this;
}
void Vec3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:gameDataPb.Vec3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vec3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameDataPb.Vec3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameDataPb.Vec3)
  return target;
}

size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameDataPb.Vec3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vec3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec3::GetClassData() const { return &_class_data_; }

void Vec3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vec3 *>(to)->MergeFrom(
      static_cast<const Vec3 &>(from));
}


void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameDataPb.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameDataPb.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  return true;
}

void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3, z_)
      + sizeof(Vec3::z_)
      - PROTOBUF_FIELD_OFFSET(Vec3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gameData_2eproto_getter, &descriptor_table_gameData_2eproto_once,
      file_level_metadata_gameData_2eproto[0]);
}

// ===================================================================

class Vec2::_Internal {
 public:
};

Vec2::Vec2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gameDataPb.Vec2)
}
Vec2::Vec2(const Vec2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:gameDataPb.Vec2)
}

inline void Vec2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2::~Vec2() {
  // @@protoc_insertion_point(destructor:gameDataPb.Vec2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vec2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec2::ArenaDtor(void* object) {
  Vec2* _this = reinterpret_cast< Vec2* >(object);
  (void)_this;
}
void Vec2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec2::Clear() {
// @@protoc_insertion_point(message_clear_start:gameDataPb.Vec2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vec2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameDataPb.Vec2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameDataPb.Vec2)
  return target;
}

size_t Vec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameDataPb.Vec2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vec2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec2::GetClassData() const { return &_class_data_; }

void Vec2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vec2 *>(to)->MergeFrom(
      static_cast<const Vec2 &>(from));
}


void Vec2::MergeFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameDataPb.Vec2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec2::CopyFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameDataPb.Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2::IsInitialized() const {
  return true;
}

void Vec2::InternalSwap(Vec2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec2, y_)
      + sizeof(Vec2::y_)
      - PROTOBUF_FIELD_OFFSET(Vec2, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gameData_2eproto_getter, &descriptor_table_gameData_2eproto_once,
      file_level_metadata_gameData_2eproto[1]);
}

// ===================================================================

class PlayerAttr::_Internal {
 public:
};

PlayerAttr::PlayerAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gameDataPb.PlayerAttr)
}
PlayerAttr::PlayerAttr(const PlayerAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerhp_, &from.playerhp_,
    static_cast<size_t>(reinterpret_cast<char*>(&playermp_) -
    reinterpret_cast<char*>(&playerhp_)) + sizeof(playermp_));
  // @@protoc_insertion_point(copy_constructor:gameDataPb.PlayerAttr)
}

inline void PlayerAttr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerhp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playermp_) -
    reinterpret_cast<char*>(&playerhp_)) + sizeof(playermp_));
}

PlayerAttr::~PlayerAttr() {
  // @@protoc_insertion_point(destructor:gameDataPb.PlayerAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerAttr::ArenaDtor(void* object) {
  PlayerAttr* _this = reinterpret_cast< PlayerAttr* >(object);
  (void)_this;
}
void PlayerAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:gameDataPb.PlayerAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerhp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playermp_) -
      reinterpret_cast<char*>(&playerhp_)) + sizeof(playermp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerHP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          playerhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerMP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          playermp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameDataPb.PlayerAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerHP = 1;
  if (this->_internal_playerhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerhp(), target);
  }

  // uint32 playerMP = 2;
  if (this->_internal_playermp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playermp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameDataPb.PlayerAttr)
  return target;
}

size_t PlayerAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameDataPb.PlayerAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerHP = 1;
  if (this->_internal_playerhp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playerhp());
  }

  // uint32 playerMP = 2;
  if (this->_internal_playermp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playermp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerAttr::GetClassData() const { return &_class_data_; }

void PlayerAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerAttr *>(to)->MergeFrom(
      static_cast<const PlayerAttr &>(from));
}


void PlayerAttr::MergeFrom(const PlayerAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameDataPb.PlayerAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerhp() != 0) {
    _internal_set_playerhp(from._internal_playerhp());
  }
  if (from._internal_playermp() != 0) {
    _internal_set_playermp(from._internal_playermp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerAttr::CopyFrom(const PlayerAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameDataPb.PlayerAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAttr::IsInitialized() const {
  return true;
}

void PlayerAttr::InternalSwap(PlayerAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerAttr, playermp_)
      + sizeof(PlayerAttr::playermp_)
      - PROTOBUF_FIELD_OFFSET(PlayerAttr, playerhp_)>(
          reinterpret_cast<char*>(&playerhp_),
          reinterpret_cast<char*>(&other->playerhp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gameData_2eproto_getter, &descriptor_table_gameData_2eproto_once,
      file_level_metadata_gameData_2eproto[2]);
}

// ===================================================================

Event_PlayerAttrsEntry_DoNotUse::Event_PlayerAttrsEntry_DoNotUse() {}
Event_PlayerAttrsEntry_DoNotUse::Event_PlayerAttrsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Event_PlayerAttrsEntry_DoNotUse::MergeFrom(const Event_PlayerAttrsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Event_PlayerAttrsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gameData_2eproto_getter, &descriptor_table_gameData_2eproto_once,
      file_level_metadata_gameData_2eproto[3]);
}

// ===================================================================

class Event::_Internal {
 public:
  static const ::gameDataPb::Vec3& controlnodeeulerangles(const Event* msg);
  static const ::gameDataPb::Vec3& movedirection(const Event* msg);
};

const ::gameDataPb::Vec3&
Event::_Internal::controlnodeeulerangles(const Event* msg) {
  return *msg->controlnodeeulerangles_;
}
const ::gameDataPb::Vec3&
Event::_Internal::movedirection(const Event* msg) {
  return *msg->movedirection_;
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  magicevents_(arena),
  playerattrs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gameDataPb.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      magicevents_(from.magicevents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerattrs_.MergeFrom(from.playerattrs_);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playername().empty()) {
    playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playername(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_controlnodeeulerangles()) {
    controlnodeeulerangles_ = new ::gameDataPb::Vec3(*from.controlnodeeulerangles_);
  } else {
    controlnodeeulerangles_ = nullptr;
  }
  if (from._internal_has_movedirection()) {
    movedirection_ = new ::gameDataPb::Vec3(*from.movedirection_);
  } else {
    movedirection_ = nullptr;
  }
  ::memcpy(&playerstyle_, &from.playerstyle_,
    static_cast<size_t>(reinterpret_cast<char*>(&charstatepb_) -
    reinterpret_cast<char*>(&playerstyle_)) + sizeof(charstatepb_));
  // @@protoc_insertion_point(copy_constructor:gameDataPb.Event)
}

inline void Event::SharedCtor() {
playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlnodeeulerangles_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&charstatepb_) -
    reinterpret_cast<char*>(&controlnodeeulerangles_)) + sizeof(charstatepb_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:gameDataPb.Event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  playername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete controlnodeeulerangles_;
  if (this != internal_default_instance()) delete movedirection_;
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
  _this->playerattrs_. ~MapField();
}
inline void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Event::ArenaDtor);
  }
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:gameDataPb.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  magicevents_.Clear();
  playerattrs_.Clear();
  playername_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && controlnodeeulerangles_ != nullptr) {
    delete controlnodeeulerangles_;
  }
  controlnodeeulerangles_ = nullptr;
  if (GetArenaForAllocation() == nullptr && movedirection_ != nullptr) {
    delete movedirection_;
  }
  movedirection_ = nullptr;
  ::memset(&playerstyle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&charstatepb_) -
      reinterpret_cast<char*>(&playerstyle_)) + sizeof(charstatepb_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool restart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          restart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string playerName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_playername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameDataPb.Event.playerName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerStyle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          playerstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerGroup = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          playergroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gameDataPb.Vec3 controlNodeEulerAngles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlnodeeulerangles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gameDataPb.Vec3 moveDirection = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_movedirection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gameDataPb.DirState dirState = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dirstate(static_cast<::gameDataPb::DirState>(val));
        } else
          goto handle_unusual;
        continue;
      // .gameDataPb.CharStatePb charStatePb = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_charstatepb(static_cast<::gameDataPb::CharStatePb>(val));
        } else
          goto handle_unusual;
        continue;
      // bool roll = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool toggleLock = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          togglelock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gameDataPb.MagicPb magicEvents = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_magicevents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_magicevents(static_cast<::gameDataPb::MagicPb>(val));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, .gameDataPb.PlayerAttr> PlayerAttrs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&playerattrs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameDataPb.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool start = 1;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_start(), target);
  }

  // bool restart = 2;
  if (this->_internal_restart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_restart(), target);
  }

  // string playerName = 3;
  if (!this->_internal_playername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gameDataPb.Event.playerName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_playername(), target);
  }

  // uint32 playerStyle = 4;
  if (this->_internal_playerstyle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_playerstyle(), target);
  }

  // uint32 playerGroup = 5;
  if (this->_internal_playergroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_playergroup(), target);
  }

  // .gameDataPb.Vec3 controlNodeEulerAngles = 6;
  if (this->_internal_has_controlnodeeulerangles()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::controlnodeeulerangles(this), target, stream);
  }

  // .gameDataPb.Vec3 moveDirection = 7;
  if (this->_internal_has_movedirection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::movedirection(this), target, stream);
  }

  // .gameDataPb.DirState dirState = 8;
  if (this->_internal_dirstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_dirstate(), target);
  }

  // .gameDataPb.CharStatePb charStatePb = 9;
  if (this->_internal_charstatepb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_charstatepb(), target);
  }

  // bool roll = 10;
  if (this->_internal_roll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_roll(), target);
  }

  // bool toggleLock = 11;
  if (this->_internal_togglelock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_togglelock(), target);
  }

  // repeated .gameDataPb.MagicPb magicEvents = 12;
  {
    int byte_size = _magicevents_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          12, magicevents_, byte_size, target);
    }
  }

  // map<uint64, .gameDataPb.PlayerAttr> PlayerAttrs = 13;
  if (!this->_internal_playerattrs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_playerattrs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_playerattrs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >::const_iterator
          it = this->_internal_playerattrs().begin();
          it != this->_internal_playerattrs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Event_PlayerAttrsEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >::const_iterator
          it = this->_internal_playerattrs().begin();
          it != this->_internal_playerattrs().end(); ++it) {
        target = Event_PlayerAttrsEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameDataPb.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameDataPb.Event)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gameDataPb.MagicPb magicEvents = 12;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_magicevents_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_magicevents(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _magicevents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint64, .gameDataPb.PlayerAttr> PlayerAttrs = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_playerattrs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >::const_iterator
      it = this->_internal_playerattrs().begin();
      it != this->_internal_playerattrs().end(); ++it) {
    total_size += Event_PlayerAttrsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string playerName = 3;
  if (!this->_internal_playername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  // .gameDataPb.Vec3 controlNodeEulerAngles = 6;
  if (this->_internal_has_controlnodeeulerangles()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlnodeeulerangles_);
  }

  // .gameDataPb.Vec3 moveDirection = 7;
  if (this->_internal_has_movedirection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *movedirection_);
  }

  // uint32 playerStyle = 4;
  if (this->_internal_playerstyle() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playerstyle());
  }

  // uint32 playerGroup = 5;
  if (this->_internal_playergroup() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playergroup());
  }

  // bool start = 1;
  if (this->_internal_start() != 0) {
    total_size += 1 + 1;
  }

  // bool restart = 2;
  if (this->_internal_restart() != 0) {
    total_size += 1 + 1;
  }

  // bool roll = 10;
  if (this->_internal_roll() != 0) {
    total_size += 1 + 1;
  }

  // bool toggleLock = 11;
  if (this->_internal_togglelock() != 0) {
    total_size += 1 + 1;
  }

  // .gameDataPb.DirState dirState = 8;
  if (this->_internal_dirstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dirstate());
  }

  // .gameDataPb.CharStatePb charStatePb = 9;
  if (this->_internal_charstatepb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_charstatepb());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }

void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Event *>(to)->MergeFrom(
      static_cast<const Event &>(from));
}


void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameDataPb.Event)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  magicevents_.MergeFrom(from.magicevents_);
  playerattrs_.MergeFrom(from.playerattrs_);
  if (!from._internal_playername().empty()) {
    _internal_set_playername(from._internal_playername());
  }
  if (from._internal_has_controlnodeeulerangles()) {
    _internal_mutable_controlnodeeulerangles()->::gameDataPb::Vec3::MergeFrom(from._internal_controlnodeeulerangles());
  }
  if (from._internal_has_movedirection()) {
    _internal_mutable_movedirection()->::gameDataPb::Vec3::MergeFrom(from._internal_movedirection());
  }
  if (from._internal_playerstyle() != 0) {
    _internal_set_playerstyle(from._internal_playerstyle());
  }
  if (from._internal_playergroup() != 0) {
    _internal_set_playergroup(from._internal_playergroup());
  }
  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_restart() != 0) {
    _internal_set_restart(from._internal_restart());
  }
  if (from._internal_roll() != 0) {
    _internal_set_roll(from._internal_roll());
  }
  if (from._internal_togglelock() != 0) {
    _internal_set_togglelock(from._internal_togglelock());
  }
  if (from._internal_dirstate() != 0) {
    _internal_set_dirstate(from._internal_dirstate());
  }
  if (from._internal_charstatepb() != 0) {
    _internal_set_charstatepb(from._internal_charstatepb());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameDataPb.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  magicevents_.InternalSwap(&other->magicevents_);
  playerattrs_.InternalSwap(&other->playerattrs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &playername_, lhs_arena,
      &other->playername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, charstatepb_)
      + sizeof(Event::charstatepb_)
      - PROTOBUF_FIELD_OFFSET(Event, controlnodeeulerangles_)>(
          reinterpret_cast<char*>(&controlnodeeulerangles_),
          reinterpret_cast<char*>(&other->controlnodeeulerangles_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gameData_2eproto_getter, &descriptor_table_gameData_2eproto_once,
      file_level_metadata_gameData_2eproto[4]);
}

// ===================================================================

class State_PlayerInfo::_Internal {
 public:
  static const ::gameDataPb::Vec3& controlnodeeulerangles(const State_PlayerInfo* msg);
  static const ::gameDataPb::Vec3& movedirection(const State_PlayerInfo* msg);
};

const ::gameDataPb::Vec3&
State_PlayerInfo::_Internal::controlnodeeulerangles(const State_PlayerInfo* msg) {
  return *msg->controlnodeeulerangles_;
}
const ::gameDataPb::Vec3&
State_PlayerInfo::_Internal::movedirection(const State_PlayerInfo* msg) {
  return *msg->movedirection_;
}
State_PlayerInfo::State_PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  magicevents_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gameDataPb.State.PlayerInfo)
}
State_PlayerInfo::State_PlayerInfo(const State_PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      magicevents_(from.magicevents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playername().empty()) {
    playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playername(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_controlnodeeulerangles()) {
    controlnodeeulerangles_ = new ::gameDataPb::Vec3(*from.controlnodeeulerangles_);
  } else {
    controlnodeeulerangles_ = nullptr;
  }
  if (from._internal_has_movedirection()) {
    movedirection_ = new ::gameDataPb::Vec3(*from.movedirection_);
  } else {
    movedirection_ = nullptr;
  }
  ::memcpy(&playerstyle_, &from.playerstyle_,
    static_cast<size_t>(reinterpret_cast<char*>(&togglelock_) -
    reinterpret_cast<char*>(&playerstyle_)) + sizeof(togglelock_));
  // @@protoc_insertion_point(copy_constructor:gameDataPb.State.PlayerInfo)
}

inline void State_PlayerInfo::SharedCtor() {
playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlnodeeulerangles_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&togglelock_) -
    reinterpret_cast<char*>(&controlnodeeulerangles_)) + sizeof(togglelock_));
}

State_PlayerInfo::~State_PlayerInfo() {
  // @@protoc_insertion_point(destructor:gameDataPb.State.PlayerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void State_PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  playername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete controlnodeeulerangles_;
  if (this != internal_default_instance()) delete movedirection_;
}

void State_PlayerInfo::ArenaDtor(void* object) {
  State_PlayerInfo* _this = reinterpret_cast< State_PlayerInfo* >(object);
  (void)_this;
}
void State_PlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State_PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void State_PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gameDataPb.State.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  magicevents_.Clear();
  playername_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && controlnodeeulerangles_ != nullptr) {
    delete controlnodeeulerangles_;
  }
  controlnodeeulerangles_ = nullptr;
  if (GetArenaForAllocation() == nullptr && movedirection_ != nullptr) {
    delete movedirection_;
  }
  movedirection_ = nullptr;
  ::memset(&playerstyle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&togglelock_) -
      reinterpret_cast<char*>(&playerstyle_)) + sizeof(togglelock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State_PlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string playerName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameDataPb.State.PlayerInfo.playerName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerStyle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          playerstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerGroup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          playergroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gameDataPb.Vec3 controlNodeEulerAngles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlnodeeulerangles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gameDataPb.Vec3 moveDirection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_movedirection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gameDataPb.DirState dirState = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dirstate(static_cast<::gameDataPb::DirState>(val));
        } else
          goto handle_unusual;
        continue;
      // .gameDataPb.CharStatePb charStatePb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_charstatepb(static_cast<::gameDataPb::CharStatePb>(val));
        } else
          goto handle_unusual;
        continue;
      // bool roll = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool toggleLock = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          togglelock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gameDataPb.MagicPb magicEvents = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_magicevents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_magicevents(static_cast<::gameDataPb::MagicPb>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* State_PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameDataPb.State.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerName = 1;
  if (!this->_internal_playername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gameDataPb.State.PlayerInfo.playerName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playername(), target);
  }

  // uint32 playerStyle = 2;
  if (this->_internal_playerstyle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerstyle(), target);
  }

  // uint32 playerGroup = 3;
  if (this->_internal_playergroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_playergroup(), target);
  }

  // .gameDataPb.Vec3 controlNodeEulerAngles = 4;
  if (this->_internal_has_controlnodeeulerangles()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::controlnodeeulerangles(this), target, stream);
  }

  // .gameDataPb.Vec3 moveDirection = 5;
  if (this->_internal_has_movedirection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::movedirection(this), target, stream);
  }

  // .gameDataPb.DirState dirState = 6;
  if (this->_internal_dirstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_dirstate(), target);
  }

  // .gameDataPb.CharStatePb charStatePb = 7;
  if (this->_internal_charstatepb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_charstatepb(), target);
  }

  // bool roll = 8;
  if (this->_internal_roll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_roll(), target);
  }

  // bool toggleLock = 9;
  if (this->_internal_togglelock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_togglelock(), target);
  }

  // repeated .gameDataPb.MagicPb magicEvents = 10;
  {
    int byte_size = _magicevents_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          10, magicevents_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameDataPb.State.PlayerInfo)
  return target;
}

size_t State_PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameDataPb.State.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gameDataPb.MagicPb magicEvents = 10;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_magicevents_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_magicevents(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _magicevents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string playerName = 1;
  if (!this->_internal_playername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  // .gameDataPb.Vec3 controlNodeEulerAngles = 4;
  if (this->_internal_has_controlnodeeulerangles()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlnodeeulerangles_);
  }

  // .gameDataPb.Vec3 moveDirection = 5;
  if (this->_internal_has_movedirection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *movedirection_);
  }

  // uint32 playerStyle = 2;
  if (this->_internal_playerstyle() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playerstyle());
  }

  // uint32 playerGroup = 3;
  if (this->_internal_playergroup() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playergroup());
  }

  // .gameDataPb.DirState dirState = 6;
  if (this->_internal_dirstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dirstate());
  }

  // .gameDataPb.CharStatePb charStatePb = 7;
  if (this->_internal_charstatepb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_charstatepb());
  }

  // bool roll = 8;
  if (this->_internal_roll() != 0) {
    total_size += 1 + 1;
  }

  // bool toggleLock = 9;
  if (this->_internal_togglelock() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData State_PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    State_PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*State_PlayerInfo::GetClassData() const { return &_class_data_; }

void State_PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<State_PlayerInfo *>(to)->MergeFrom(
      static_cast<const State_PlayerInfo &>(from));
}


void State_PlayerInfo::MergeFrom(const State_PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameDataPb.State.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  magicevents_.MergeFrom(from.magicevents_);
  if (!from._internal_playername().empty()) {
    _internal_set_playername(from._internal_playername());
  }
  if (from._internal_has_controlnodeeulerangles()) {
    _internal_mutable_controlnodeeulerangles()->::gameDataPb::Vec3::MergeFrom(from._internal_controlnodeeulerangles());
  }
  if (from._internal_has_movedirection()) {
    _internal_mutable_movedirection()->::gameDataPb::Vec3::MergeFrom(from._internal_movedirection());
  }
  if (from._internal_playerstyle() != 0) {
    _internal_set_playerstyle(from._internal_playerstyle());
  }
  if (from._internal_playergroup() != 0) {
    _internal_set_playergroup(from._internal_playergroup());
  }
  if (from._internal_dirstate() != 0) {
    _internal_set_dirstate(from._internal_dirstate());
  }
  if (from._internal_charstatepb() != 0) {
    _internal_set_charstatepb(from._internal_charstatepb());
  }
  if (from._internal_roll() != 0) {
    _internal_set_roll(from._internal_roll());
  }
  if (from._internal_togglelock() != 0) {
    _internal_set_togglelock(from._internal_togglelock());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void State_PlayerInfo::CopyFrom(const State_PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameDataPb.State.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State_PlayerInfo::IsInitialized() const {
  return true;
}

void State_PlayerInfo::InternalSwap(State_PlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  magicevents_.InternalSwap(&other->magicevents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &playername_, lhs_arena,
      &other->playername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State_PlayerInfo, togglelock_)
      + sizeof(State_PlayerInfo::togglelock_)
      - PROTOBUF_FIELD_OFFSET(State_PlayerInfo, controlnodeeulerangles_)>(
          reinterpret_cast<char*>(&controlnodeeulerangles_),
          reinterpret_cast<char*>(&other->controlnodeeulerangles_));
}

::PROTOBUF_NAMESPACE_ID::Metadata State_PlayerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gameData_2eproto_getter, &descriptor_table_gameData_2eproto_once,
      file_level_metadata_gameData_2eproto[5]);
}

// ===================================================================

State_PlayerInfosEntry_DoNotUse::State_PlayerInfosEntry_DoNotUse() {}
State_PlayerInfosEntry_DoNotUse::State_PlayerInfosEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void State_PlayerInfosEntry_DoNotUse::MergeFrom(const State_PlayerInfosEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata State_PlayerInfosEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gameData_2eproto_getter, &descriptor_table_gameData_2eproto_once,
      file_level_metadata_gameData_2eproto[6]);
}

// ===================================================================

State_PlayerAttrsEntry_DoNotUse::State_PlayerAttrsEntry_DoNotUse() {}
State_PlayerAttrsEntry_DoNotUse::State_PlayerAttrsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void State_PlayerAttrsEntry_DoNotUse::MergeFrom(const State_PlayerAttrsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata State_PlayerAttrsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gameData_2eproto_getter, &descriptor_table_gameData_2eproto_once,
      file_level_metadata_gameData_2eproto[7]);
}

// ===================================================================

class State::_Internal {
 public:
};

State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  playerinfos_(arena),
  playerattrs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gameDataPb.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerinfos_.MergeFrom(from.playerinfos_);
  playerattrs_.MergeFrom(from.playerattrs_);
  playerip_ = from.playerip_;
  // @@protoc_insertion_point(copy_constructor:gameDataPb.State)
}

inline void State::SharedCtor() {
playerip_ = uint64_t{0u};
}

State::~State() {
  // @@protoc_insertion_point(destructor:gameDataPb.State)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
  _this->playerinfos_. ~MapField();
  _this->playerattrs_. ~MapField();
}
inline void State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &State::ArenaDtor);
  }
}
void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:gameDataPb.State)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerinfos_.Clear();
  playerattrs_.Clear();
  playerip_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 playerIP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          playerip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint64, .gameDataPb.State.PlayerInfo> playerInfos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&playerinfos_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, .gameDataPb.PlayerAttr> PlayerAttrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&playerattrs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* State::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameDataPb.State)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerIP = 1;
  if (this->_internal_playerip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerip(), target);
  }

  // map<uint64, .gameDataPb.State.PlayerInfo> playerInfos = 2;
  if (!this->_internal_playerinfos().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::State_PlayerInfo >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_playerinfos().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_playerinfos().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::State_PlayerInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::State_PlayerInfo >::const_iterator
          it = this->_internal_playerinfos().begin();
          it != this->_internal_playerinfos().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = State_PlayerInfosEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::State_PlayerInfo >::const_iterator
          it = this->_internal_playerinfos().begin();
          it != this->_internal_playerinfos().end(); ++it) {
        target = State_PlayerInfosEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint64, .gameDataPb.PlayerAttr> PlayerAttrs = 3;
  if (!this->_internal_playerattrs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_playerattrs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_playerattrs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >::const_iterator
          it = this->_internal_playerattrs().begin();
          it != this->_internal_playerattrs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = State_PlayerAttrsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >::const_iterator
          it = this->_internal_playerattrs().begin();
          it != this->_internal_playerattrs().end(); ++it) {
        target = State_PlayerAttrsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameDataPb.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameDataPb.State)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .gameDataPb.State.PlayerInfo> playerInfos = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_playerinfos_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::State_PlayerInfo >::const_iterator
      it = this->_internal_playerinfos().begin();
      it != this->_internal_playerinfos().end(); ++it) {
    total_size += State_PlayerInfosEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, .gameDataPb.PlayerAttr> PlayerAttrs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_playerattrs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::gameDataPb::PlayerAttr >::const_iterator
      it = this->_internal_playerattrs().begin();
      it != this->_internal_playerattrs().end(); ++it) {
    total_size += State_PlayerAttrsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 playerIP = 1;
  if (this->_internal_playerip() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_playerip());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*State::GetClassData() const { return &_class_data_; }

void State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<State *>(to)->MergeFrom(
      static_cast<const State &>(from));
}


void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameDataPb.State)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  playerinfos_.MergeFrom(from.playerinfos_);
  playerattrs_.MergeFrom(from.playerattrs_);
  if (from._internal_playerip() != 0) {
    _internal_set_playerip(from._internal_playerip());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameDataPb.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  playerinfos_.InternalSwap(&other->playerinfos_);
  playerattrs_.InternalSwap(&other->playerattrs_);
  swap(playerip_, other->playerip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gameData_2eproto_getter, &descriptor_table_gameData_2eproto_once,
      file_level_metadata_gameData_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gameDataPb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gameDataPb::Vec3* Arena::CreateMaybeMessage< ::gameDataPb::Vec3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameDataPb::Vec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::gameDataPb::Vec2* Arena::CreateMaybeMessage< ::gameDataPb::Vec2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameDataPb::Vec2 >(arena);
}
template<> PROTOBUF_NOINLINE ::gameDataPb::PlayerAttr* Arena::CreateMaybeMessage< ::gameDataPb::PlayerAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameDataPb::PlayerAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::gameDataPb::Event_PlayerAttrsEntry_DoNotUse* Arena::CreateMaybeMessage< ::gameDataPb::Event_PlayerAttrsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameDataPb::Event_PlayerAttrsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::gameDataPb::Event* Arena::CreateMaybeMessage< ::gameDataPb::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameDataPb::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::gameDataPb::State_PlayerInfo* Arena::CreateMaybeMessage< ::gameDataPb::State_PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameDataPb::State_PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::gameDataPb::State_PlayerInfosEntry_DoNotUse* Arena::CreateMaybeMessage< ::gameDataPb::State_PlayerInfosEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameDataPb::State_PlayerInfosEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::gameDataPb::State_PlayerAttrsEntry_DoNotUse* Arena::CreateMaybeMessage< ::gameDataPb::State_PlayerAttrsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameDataPb::State_PlayerAttrsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::gameDataPb::State* Arena::CreateMaybeMessage< ::gameDataPb::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameDataPb::State >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
