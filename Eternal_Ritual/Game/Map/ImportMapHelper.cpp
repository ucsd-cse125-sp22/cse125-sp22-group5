//
//  ImportMapHelper.cpp
//
//  Created by Kangming Yu on 5/15/22.
//

#include "Game/Map/ImportMapHelper.hpp"

#include <glm/glm.hpp>

#include "Game/Map/MapSystemManager.hpp"
#include "KGLEngine/Engine.hpp"

#define MAPX 40
#define MAPY -101
#define MAPZ -50

using namespace glm;


namespace ImportMapHelper {

void importMapBox() {
    unsigned int boxType;
    vec3 boxSize, boxPosition, boxEulerAngles;
    
    boxType = 1;
    boxSize = vec3(20.0f, 20.0f, 20.0f);
    boxPosition = vec3(0.0f, 9.0f, 60.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = 0;
    boxSize = vec3(20.0f, 1.0f, 40.0f);
    boxPosition = vec3(0.0f, -1.5f, 30.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = 0;
    boxSize = vec3(100.0f, 1.0f, 20.0f);
    boxPosition = vec3(0.0f, -1.5f, 0.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = 0;
    boxSize = vec3(20.0f, 1.0f, 40.0f);
    boxPosition = vec3(0.0f, -1.5f, -30.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = 0;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(36.339744567871094f, -1.5f, 13.65999984741211f);
    boxEulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = 0;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(26.200000762939453f, -1.5f, 27.0f);
    boxEulerAngles = vec3(0.0f, 45.00000466733367f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = 0;
    boxSize = vec3(19.999998092651367f, 1.0f, 20.0f);
    boxPosition = vec3(13.65999984741211f, -1.5f, 36.34000015258789f);
    boxEulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = 0;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(20.0f, -1.5f, 20.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = 0;
    boxSize = vec3(19.999998092651367f, 1.0f, 20.0f);
    boxPosition = vec3(-13.600000381469727f, -1.5f, -36.33000183105469f);
    boxEulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = 0;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(-36.34000015258789f, -1.5f, -13.600000381469727f);
    boxEulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = 0;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(-26.95877456665039f, -1.5f, -26.158771514892578f);
    boxEulerAngles = vec3(0.0f, 45.00000466733367f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = 0;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(-20.0f, -1.5f, -20.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = 0;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(20.0f, -1.5f, -20.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = 0;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(-20.0f, -1.5f, 20.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = 0;
    boxSize = vec3(19.999998092651367f, 1.0f, 20.0f);
    boxPosition = vec3(-13.731363296508789f, -1.5f, 36.58491516113281f);
    boxEulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 0;
//    boxSize = vec3(19.999998092651367f, 1.0f, 20.0f);
//    boxPosition = vec3(-36.34000015258789f, -1.5f, 13.601505279541016f);
//    boxEulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 0;
//    boxSize = vec3(20.0f, 1.0f, 20.0f);
//    boxPosition = vec3(-26.481189727783203f, -1.5f, 26.653076171875f);
//    boxEulerAngles = vec3(0.0f, 45.00000466733367f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 0;
//    boxSize = vec3(19.999998092651367f, 1.0f, 20.0f);
//    boxPosition = vec3(13.596307754516602f, -1.5f, -36.33232116699219f);
//    boxEulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 0;
//    boxSize = vec3(20.0f, 1.0f, 20.0f);
//    boxPosition = vec3(26.81570053100586f, -1.5f, -26.241455078125f);
//    boxEulerAngles = vec3(0.0f, 45.00000466733367f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 0;
//    boxSize = vec3(19.999998092651367f, 1.0f, 20.0f);
//    boxPosition = vec3(36.2993278503418f, -1.5f, -13.646175384521484f);
//    boxEulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(20.0f, 20.0f, 20.0f);
//    boxPosition = vec3(0.0f, 9.0f, -60.0f);
//    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(5.0f, 30.0f, 20.0f);
//    boxPosition = vec3(-19.679931640625f, 13.0f, 47.426387786865234f);
//    boxEulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(5.0f, 30.0f, 20.0f);
//    boxPosition = vec3(-35.30475616455078f, 13.0f, 35.362510681152344f);
//    boxEulerAngles = vec3(0.0f, 44.999994422049916f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(20.0f, 30.0f, 5.0f);
//    boxPosition = vec3(-47.292022705078125f, 13.0f, 19.538402557373047f);
//    boxEulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(19.9999942779541f, 30.0f, 4.999998569488525f);
//    boxPosition = vec3(-52.50025177001953f, 13.0f, -0.058162689208984375f);
//    boxEulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(20.0f, 30.0f, 5.0f);
//    boxPosition = vec3(-47.196224212646484f, 13.0f, -19.518991470336914f);
//    boxEulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(5.0f, 30.0f, 20.0f);
//    boxPosition = vec3(-35.77626037597656f, 13.0f, -34.86589431762695f);
//    boxEulerAngles = vec3(0.0f, -44.999994422049916f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(5.0f, 30.0f, 20.0f);
//    boxPosition = vec3(-19.81863021850586f, 13.0f, -47.04525375366211f);
//    boxEulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(5.0f, 30.0f, 5.0f);
//    boxPosition = vec3(14.256914138793945f, 14.0f, 40.71234130859375f);
//    boxEulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(29.999935150146484f, 2.999999523162842f, 16.999998092651367f);
//    boxPosition = vec3(-36.28617477416992f, -1.132124423980713f, -18.673717498779297f);
//    boxEulerAngles = vec3(9.99999970909292f, 60.00000849984128f, -1.707547699614187e-06f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(5.0f, 30.0f, 5.0f);
//    boxPosition = vec3(27.738876342773438f, 14.0f, 30.06119155883789f);
//    boxEulerAngles = vec3(0.0f, -44.999994422049916f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(5.0f, 7.0f, 5.0f);
//    boxPosition = vec3(27.201324462890625f, 2.5f, -26.600440979003906f);
//    boxEulerAngles = vec3(0.0f, 44.999994422049916f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(9.999994277954102f, 2.5f, 14.99999713897705f);
//    boxPosition = vec3(-19.002153396606445f, 0.24999995529651642f, 24.259979248046875f);
//    boxEulerAngles = vec3(0.0f, 59.99999483946294f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(4.999887943267822f, 4.999917030334473f, 22.999780654907227f);
//    boxPosition = vec3(34.57914733886719f, 2.5202579498291016f, -17.966392517089844f);
//    boxEulerAngles = vec3(13.46300038716412f, 38.7630003512636f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(9.999835968017578f, 2.499964952468872f, 14.999848365783691f);
//    boxPosition = vec3(12.881000518798828f, 0.24999994039535522f, -10.011907577514648f);
//    boxEulerAngles = vec3(0.0f, -69.99999967119774f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(4.999978542327881f, 3.000000238418579f, 17.00000762939453f);
//    boxPosition = vec3(-5.298661231994629f, -1.336275339126587f, 31.8536376953125f);
//    boxEulerAngles = vec3(8.999993420258647f, 60.00000849984128f, -5.122643913064559e-06f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(0.5f, 2.0f, 5.0f);
//    boxPosition = vec3(10.21187973022461f, 0.0f, 21.193662643432617f);
//    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(0.4999998211860657f, 1.0f, 9.99999713897705f);
//    boxPosition = vec3(25.113908767700195f, -0.5f, 11.59774398803711f);
//    boxEulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(0.5f, 1.0f, 10.0f);
//    boxPosition = vec3(4.626926422119141f, -0.5f, 7.29351806640625f);
//    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(5.000000953674316f, 3.0f, 17.0f);
//    boxPosition = vec3(5.108200550079346f, -1.3108752965927124f, -21.101150512695312f);
//    boxEulerAngles = vec3(-9.000000250447817f, 19.99999771063855f, 5.6785429905125e-07f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(0.5f, 2.0f, 10.0f);
//    boxPosition = vec3(-6.175685882568359f, 0.0f, -4.580935478210449f);
//    boxEulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(0.5f, 2.0f, 7.0f);
//    boxPosition = vec3(-10.48333740234375f, 0.0f, 9.90719985961914f);
//    boxEulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(0.4999997913837433f, 1.0f, 3.999999761581421f);
//    boxPosition = vec3(2.3769264221191406f, -0.5f, 6.538968086242676f);
//    boxEulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(0.5f, 2.0f, 5.0f);
//    boxPosition = vec3(-9.59457778930664f, 0.0f, -1.830935001373291f);
//    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(4.9999680519104f, 0.9999958872795105f, 6.999967098236084f);
//    boxPosition = vec3(-12.002592086791992f, -0.4999999701976776f, -18.14734649658203f);
//    boxEulerAngles = vec3(0.0f, 33.53639957949186f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(2.9999992847442627f, 2.0f, 3.9999990463256836f);
//    boxPosition = vec3(-7.776100158691406f, 0.0f, -15.409856796264648f);
//    boxEulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(4.999841690063477f, 4.0f, 5.0f);
//    boxPosition = vec3(40.72988510131836f, 0.9999867081642151f, 2.3642375469207764f);
//    boxEulerAngles = vec3(179.999991348578f, 20.135100559968695f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(4.999831199645996f, 3.0f, 4.9999918937683105f);
//    boxPosition = vec3(39.35308837890625f, 0.5000176429748535f, 7.0984416007995605f);
//    boxEulerAngles = vec3(179.999991348578f, -14.096251130778096f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(4.999912738800049f, 4.0f, 5.00007438659668f);
//    boxPosition = vec3(39.572853088378906f, 0.9999866485595703f, 11.962966918945312f);
//    boxEulerAngles = vec3(179.999991348578f, -71.10730310925103f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(3.0f, 2.999999761581421f, 3.0f);
//    boxPosition = vec3(-13.633177757263184f, 2.999999761581421f, 23.612285614013672f);
//    boxEulerAngles = vec3(179.999991348578f, -71.10728261868353f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(1.0000003576278687f, 1.0f, 1.0000003576278687f);
//    boxPosition = vec3(-21.799108505249023f, 2.0f, 18.328943252563477f);
//    boxEulerAngles = vec3(179.999991348578f, -23.733391063798567f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(1.0000003576278687f, 1.0f, 1.0000003576278687f);
//    boxPosition = vec3(-21.782814025878906f, 2.0f, 18.312650680541992f);
//    boxEulerAngles = vec3(179.999991348578f, -23.73339277134586f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(1.0000003576278687f, 1.0f, 1.0000003576278687f);
//    boxPosition = vec3(-21.2570743560791f, 2.0f, 19.338041305541992f);
//    boxEulerAngles = vec3(179.999991348578f, -23.733394478893153f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(1.0000003576278687f, 0.9999999403953552f, 1.0000003576278687f);
//    boxPosition = vec3(-19.967870712280273f, 1.9999998807907104f, 19.419044494628906f);
//    boxEulerAngles = vec3(179.999991348578f, -23.73339277134586f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(1.0000003576278687f, 1.0f, 1.0000003576278687f);
//    boxPosition = vec3(-18.6903018951416f, 2.0f, 20.22953224182129f);
//    boxEulerAngles = vec3(179.999991348578f, -23.73339277134586f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(1.0000005960464478f, 0.9999999403953552f, 1.0000005960464478f);
//    boxPosition = vec3(-22.858861923217773f, 1.9999998807907104f, 18.720481872558594f);
//    boxEulerAngles = vec3(179.999991348578f, -23.733394478893153f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(9.0f, 4.0f, 5.0f);
//    boxPosition = vec3(-22.26280975341797f, 0.9999867081642151f, -0.05115675926208496f);
//    boxEulerAngles = vec3(179.999991348578f, 0.0f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(20.0f, 20.0f, 20.0f);
//    boxPosition = vec3(0.0f, 9.0f, 60.0f);
//    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(2.999969720840454f, 1.9999911785125732f, 3.999952793121338f);
//    boxPosition = vec3(-17.134122848510742f, 0.0f, 2.518460988998413f);
//    boxEulerAngles = vec3(0.0f, 60.457330645908655f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(4.999832630157471f, 3.0f, 4.999993324279785f);
//    boxPosition = vec3(18.351093292236328f, 0.5000176429748535f, 8.719722747802734f);
//    boxEulerAngles = vec3(179.999991348578f, -14.096249423230805f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(0.5f, 2.0f, 7.0f);
//    boxPosition = vec3(-10.890523910522461f, 0.0f, -35.301090240478516f);
//    boxEulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(4.0f, 3.0f, 2.0f);
//    boxPosition = vec3(-49.953739166259766f, 0.5f, 5.168451309204102f);
//    boxEulerAngles = vec3(0.0f, -69.99999967119774f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(4.0f, 7.0f, 1.999990463256836f);
//    boxPosition = vec3(-44.0306396484375f, 2.5f, 20.40106964111328f);
//    boxEulerAngles = vec3(0.0f, -45.95227305651143f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(4.999993324279785f, 6.999980926513672f, 4.999993324279785f);
//    boxPosition = vec3(14.83809757232666f, 2.499999761581421f, -37.63517761230469f);
//    boxEulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(3.000000238418579f, 2.999999761581421f, 3.000000238418579f);
//    boxPosition = vec3(17.829620361328125f, 2.9999845027923584f, -9.80679702758789f);
//    boxEulerAngles = vec3(179.999991348578f, -71.10726895830518f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(1.0000003576278687f, 1.0f, 1.0000003576278687f);
//    boxPosition = vec3(13.097940444946289f, 1.9999847412109375f, -6.686174392700195f);
//    boxEulerAngles = vec3(179.999991348578f, -23.73339277134586f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(1.0000169277191162f, 0.9999843239784241f, 1.0000169277191162f);
//    boxPosition = vec3(7.924259662628174f, 1.9999691247940063f, -6.570480823516846f);
//    boxEulerAngles = vec3(0.0f, -84.12961200720312f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(1.0000169277191162f, 0.9999842643737793f, 1.0000169277191162f);
//    boxPosition = vec3(9.213461875915527f, 1.9999690055847168f, -6.489477634429932f);
//    boxEulerAngles = vec3(0.0f, -84.12961200720312f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(1.0000022649765015f, 0.9999843239784241f, 1.0000022649765015f);
//    boxPosition = vec3(10.4910306930542f, 1.9999691247940063f, -5.678989887237549f);
//    boxEulerAngles = vec3(0.0f, -84.12957785625727f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 2;
//    boxSize = vec3(1.0000008344650269f, 0.9999999403953552f, 1.0000008344650269f);
//    boxPosition = vec3(12.021892547607422f, 1.999984622001648f, -6.278343200683594f);
//    boxEulerAngles = vec3(179.999991348578f, -23.73339277134586f, 179.999991348578f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = 1;
//    boxSize = vec3(3.9999682903289795f, 2.9999806880950928f, 1.9999841451644897f);
//    boxPosition = vec3(-23.76885414123535f, 0.4999694526195526f, 41.0047492980957f);
//    boxEulerAngles = vec3(0.0f, 90.00000250447816f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    MapSystemManager::Instance()->updateGrids();

//    
//    PBRShader* cubeShader = new PBRShader(0.5f, 0.5f);
//    Node* testNode1 = new Node();
//    testNode1->loadUnitCube();
//    testNode1->geometries[0]->setShader(cubeShader);
//    testNode1->scale = vec3(20.0f, 20.0f, 20.0f);
//    testNode1->position = vec3(0.0f, 9.0f, 60.0f);
//    testNode1->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode1);
//    Node* testNode2 = new Node();
//    testNode2->loadUnitCube();
//    testNode2->geometries[0]->setShader(cubeShader);
//    testNode2->scale = vec3(20.0f, 1.0f, 40.0f);
//    testNode2->position = vec3(0.0f, -1.5f, 30.0f);
//    testNode2->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode2);
//    Node* testNode3 = new Node();
//    testNode3->loadUnitCube();
//    testNode3->geometries[0]->setShader(cubeShader);
//    testNode3->scale = vec3(100.0f, 1.0f, 20.0f);
//    testNode3->position = vec3(0.0f, -1.5f, 0.0f);
//    testNode3->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode3);
//    Node* testNode4 = new Node();
//    testNode4->loadUnitCube();
//    testNode4->geometries[0]->setShader(cubeShader);
//    testNode4->scale = vec3(20.0f, 1.0f, 40.0f);
//    testNode4->position = vec3(0.0f, -1.5f, -30.0f);
//    testNode4->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode4);
//    Node* testNode5 = new Node();
//    testNode5->loadUnitCube();
//    testNode5->geometries[0]->setShader(cubeShader);
//    testNode5->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode5->position = vec3(36.339744567871094f, -1.5f, 13.65999984741211f);
//    testNode5->eulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode5);
//    Node* testNode6 = new Node();
//    testNode6->loadUnitCube();
//    testNode6->geometries[0]->setShader(cubeShader);
//    testNode6->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode6->position = vec3(26.200000762939453f, -1.5f, 27.0f);
//    testNode6->eulerAngles = vec3(0.0f, 45.00000466733367f, 0.0f);
//    Engine::main->addNode(testNode6);
//    Node* testNode7 = new Node();
//    testNode7->loadUnitCube();
//    testNode7->geometries[0]->setShader(cubeShader);
//    testNode7->scale = vec3(19.999998092651367f, 1.0f, 20.0f);
//    testNode7->position = vec3(13.65999984741211f, -1.5f, 36.34000015258789f);
//    testNode7->eulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode7);
//    Node* testNode8 = new Node();
//    testNode8->loadUnitCube();
//    testNode8->geometries[0]->setShader(cubeShader);
//    testNode8->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode8->position = vec3(20.0f, -1.5f, 20.0f);
//    testNode8->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode8);
//    Node* testNode9 = new Node();
//    testNode9->loadUnitCube();
//    testNode9->geometries[0]->setShader(cubeShader);
//    testNode9->scale = vec3(19.999998092651367f, 1.0f, 20.0f);
//    testNode9->position = vec3(-13.600000381469727f, -1.5f, -36.33000183105469f);
//    testNode9->eulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode9);
//    Node* testNode10 = new Node();
//    testNode10->loadUnitCube();
//    testNode10->geometries[0]->setShader(cubeShader);
//    testNode10->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode10->position = vec3(-36.34000015258789f, -1.5f, -13.600000381469727f);
//    testNode10->eulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode10);
//    Node* testNode11 = new Node();
//    testNode11->loadUnitCube();
//    testNode11->geometries[0]->setShader(cubeShader);
//    testNode11->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode11->position = vec3(-26.95877456665039f, -1.5f, -26.158771514892578f);
//    testNode11->eulerAngles = vec3(0.0f, 45.00000466733367f, 0.0f);
//    Engine::main->addNode(testNode11);
//    Node* testNode12 = new Node();
//    testNode12->loadUnitCube();
//    testNode12->geometries[0]->setShader(cubeShader);
//    testNode12->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode12->position = vec3(-20.0f, -1.5f, -20.0f);
//    testNode12->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode12);
//    Node* testNode13 = new Node();
//    testNode13->loadUnitCube();
//    testNode13->geometries[0]->setShader(cubeShader);
//    testNode13->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode13->position = vec3(20.0f, -1.5f, -20.0f);
//    testNode13->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode13);
//    Node* testNode14 = new Node();
//    testNode14->loadUnitCube();
//    testNode14->geometries[0]->setShader(cubeShader);
//    testNode14->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode14->position = vec3(-20.0f, -1.5f, 20.0f);
//    testNode14->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode14);
//    Node* testNode15 = new Node();
//    testNode15->loadUnitCube();
//    testNode15->geometries[0]->setShader(cubeShader);
//    testNode15->scale = vec3(19.999998092651367f, 1.0f, 20.0f);
//    testNode15->position = vec3(-13.731363296508789f, -1.5f, 36.58491516113281f);
//    testNode15->eulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode15);
//    Node* testNode16 = new Node();
//    testNode16->loadUnitCube();
//    testNode16->geometries[0]->setShader(cubeShader);
//    testNode16->scale = vec3(19.999998092651367f, 1.0f, 20.0f);
//    testNode16->position = vec3(-36.34000015258789f, -1.5f, 13.601505279541016f);
//    testNode16->eulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode16);
//    Node* testNode17 = new Node();
//    testNode17->loadUnitCube();
//    testNode17->geometries[0]->setShader(cubeShader);
//    testNode17->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode17->position = vec3(-26.481189727783203f, -1.5f, 26.653076171875f);
//    testNode17->eulerAngles = vec3(0.0f, 45.00000466733367f, 0.0f);
//    Engine::main->addNode(testNode17);
//    Node* testNode18 = new Node();
//    testNode18->loadUnitCube();
//    testNode18->geometries[0]->setShader(cubeShader);
//    testNode18->scale = vec3(19.999998092651367f, 1.0f, 20.0f);
//    testNode18->position = vec3(13.596307754516602f, -1.5f, -36.33232116699219f);
//    testNode18->eulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode18);
//    Node* testNode19 = new Node();
//    testNode19->loadUnitCube();
//    testNode19->geometries[0]->setShader(cubeShader);
//    testNode19->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode19->position = vec3(26.81570053100586f, -1.5f, -26.241455078125f);
//    testNode19->eulerAngles = vec3(0.0f, 45.00000466733367f, 0.0f);
//    Engine::main->addNode(testNode19);
//    Node* testNode20 = new Node();
//    testNode20->loadUnitCube();
//    testNode20->geometries[0]->setShader(cubeShader);
//    testNode20->scale = vec3(19.999998092651367f, 1.0f, 20.0f);
//    testNode20->position = vec3(36.2993278503418f, -1.5f, -13.646175384521484f);
//    testNode20->eulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode20);
//    Node* testNode21 = new Node();
//    testNode21->loadUnitCube();
//    testNode21->geometries[0]->setShader(cubeShader);
//    testNode21->scale = vec3(20.0f, 20.0f, 20.0f);
//    testNode21->position = vec3(0.0f, 9.0f, -60.0f);
//    testNode21->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode21);
//    Node* testNode22 = new Node();
//    testNode22->loadUnitCube();
//    testNode22->geometries[0]->setShader(cubeShader);
//    testNode22->scale = vec3(5.0f, 30.0f, 20.0f);
//    testNode22->position = vec3(-19.679931640625f, 13.0f, 47.426387786865234f);
//    testNode22->eulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode22);
//    Node* testNode23 = new Node();
//    testNode23->loadUnitCube();
//    testNode23->geometries[0]->setShader(cubeShader);
//    testNode23->scale = vec3(5.0f, 30.0f, 20.0f);
//    testNode23->position = vec3(-35.30475616455078f, 13.0f, 35.362510681152344f);
//    testNode23->eulerAngles = vec3(0.0f, 44.999994422049916f, 0.0f);
//    Engine::main->addNode(testNode23);
//    Node* testNode24 = new Node();
//    testNode24->loadUnitCube();
//    testNode24->geometries[0]->setShader(cubeShader);
//    testNode24->scale = vec3(20.0f, 30.0f, 5.0f);
//    testNode24->position = vec3(-47.292022705078125f, 13.0f, 19.538402557373047f);
//    testNode24->eulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode24);
//    Node* testNode25 = new Node();
//    testNode25->loadUnitCube();
//    testNode25->geometries[0]->setShader(cubeShader);
//    testNode25->scale = vec3(19.9999942779541f, 30.0f, 4.999998569488525f);
//    testNode25->position = vec3(-52.50025177001953f, 13.0f, -0.058162689208984375f);
//    testNode25->eulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    Engine::main->addNode(testNode25);
//    Node* testNode26 = new Node();
//    testNode26->loadUnitCube();
//    testNode26->geometries[0]->setShader(cubeShader);
//    testNode26->scale = vec3(20.0f, 30.0f, 5.0f);
//    testNode26->position = vec3(-47.196224212646484f, 13.0f, -19.518991470336914f);
//    testNode26->eulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode26);
//    Node* testNode27 = new Node();
//    testNode27->loadUnitCube();
//    testNode27->geometries[0]->setShader(cubeShader);
//    testNode27->scale = vec3(5.0f, 30.0f, 20.0f);
//    testNode27->position = vec3(-35.77626037597656f, 13.0f, -34.86589431762695f);
//    testNode27->eulerAngles = vec3(0.0f, -44.999994422049916f, 0.0f);
//    Engine::main->addNode(testNode27);
//    Node* testNode28 = new Node();
//    testNode28->loadUnitCube();
//    testNode28->geometries[0]->setShader(cubeShader);
//    testNode28->scale = vec3(5.0f, 30.0f, 20.0f);
//    testNode28->position = vec3(-19.81863021850586f, 13.0f, -47.04525375366211f);
//    testNode28->eulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode28);
//    Node* testNode29 = new Node();
//    testNode29->loadUnitCube();
//    testNode29->geometries[0]->setShader(cubeShader);
//    testNode29->scale = vec3(5.0f, 30.0f, 5.0f);
//    testNode29->position = vec3(14.256914138793945f, 14.0f, 40.71234130859375f);
//    testNode29->eulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode29);
//    Node* testNode30 = new Node();
//    testNode30->loadUnitCube();
//    testNode30->geometries[0]->setShader(cubeShader);
//    testNode30->scale = vec3(29.999935150146484f, 2.999999523162842f, 16.999998092651367f);
//    testNode30->position = vec3(-36.28617477416992f, -1.132124423980713f, -18.673717498779297f);
//    testNode30->eulerAngles = vec3(9.99999970909292f, 60.00000849984128f, -1.707547699614187e-06f);
//    Engine::main->addNode(testNode30);
//    Node* testNode31 = new Node();
//    testNode31->loadUnitCube();
//    testNode31->geometries[0]->setShader(cubeShader);
//    testNode31->scale = vec3(5.0f, 30.0f, 5.0f);
//    testNode31->position = vec3(27.738876342773438f, 14.0f, 30.06119155883789f);
//    testNode31->eulerAngles = vec3(0.0f, -44.999994422049916f, 0.0f);
//    Engine::main->addNode(testNode31);
//    Node* testNode32 = new Node();
//    testNode32->loadUnitCube();
//    testNode32->geometries[0]->setShader(cubeShader);
//    testNode32->scale = vec3(5.0f, 7.0f, 5.0f);
//    testNode32->position = vec3(27.201324462890625f, 2.5f, -26.600440979003906f);
//    testNode32->eulerAngles = vec3(0.0f, 44.999994422049916f, 0.0f);
//    Engine::main->addNode(testNode32);
//    Node* testNode33 = new Node();
//    testNode33->loadUnitCube();
//    testNode33->geometries[0]->setShader(cubeShader);
//    testNode33->scale = vec3(9.999994277954102f, 2.5f, 14.99999713897705f);
//    testNode33->position = vec3(-19.002153396606445f, 0.24999995529651642f, 24.259979248046875f);
//    testNode33->eulerAngles = vec3(0.0f, 59.99999483946294f, 0.0f);
//    Engine::main->addNode(testNode33);
//    Node* testNode34 = new Node();
//    testNode34->loadUnitCube();
//    testNode34->geometries[0]->setShader(cubeShader);
//    testNode34->scale = vec3(4.999887943267822f, 4.999917030334473f, 22.999780654907227f);
//    testNode34->position = vec3(34.57914733886719f, 2.5202579498291016f, -17.966392517089844f);
//    testNode34->eulerAngles = vec3(13.46300038716412f, 38.7630003512636f, 0.0f);
//    Engine::main->addNode(testNode34);
//    Node* testNode35 = new Node();
//    testNode35->loadUnitCube();
//    testNode35->geometries[0]->setShader(cubeShader);
//    testNode35->scale = vec3(9.999835968017578f, 2.499964952468872f, 14.999848365783691f);
//    testNode35->position = vec3(12.881000518798828f, 0.24999994039535522f, -10.011907577514648f);
//    testNode35->eulerAngles = vec3(0.0f, -69.99999967119774f, 0.0f);
//    Engine::main->addNode(testNode35);
//    Node* testNode36 = new Node();
//    testNode36->loadUnitCube();
//    testNode36->geometries[0]->setShader(cubeShader);
//    testNode36->scale = vec3(4.999978542327881f, 3.000000238418579f, 17.00000762939453f);
//    testNode36->position = vec3(-5.298661231994629f, -1.336275339126587f, 31.8536376953125f);
//    testNode36->eulerAngles = vec3(8.999993420258647f, 60.00000849984128f, -5.122643913064559e-06f);
//    Engine::main->addNode(testNode36);
//    Node* testNode37 = new Node();
//    testNode37->loadUnitCube();
//    testNode37->geometries[0]->setShader(cubeShader);
//    testNode37->scale = vec3(0.5f, 2.0f, 5.0f);
//    testNode37->position = vec3(10.21187973022461f, 0.0f, 21.193662643432617f);
//    testNode37->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode37);
//    Node* testNode38 = new Node();
//    testNode38->loadUnitCube();
//    testNode38->geometries[0]->setShader(cubeShader);
//    testNode38->scale = vec3(0.4999998211860657f, 1.0f, 9.99999713897705f);
//    testNode38->position = vec3(25.113908767700195f, -0.5f, 11.59774398803711f);
//    testNode38->eulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    Engine::main->addNode(testNode38);
//    Node* testNode39 = new Node();
//    testNode39->loadUnitCube();
//    testNode39->geometries[0]->setShader(cubeShader);
//    testNode39->scale = vec3(0.5f, 1.0f, 10.0f);
//    testNode39->position = vec3(4.626926422119141f, -0.5f, 7.29351806640625f);
//    testNode39->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode39);
//    Node* testNode40 = new Node();
//    testNode40->loadUnitCube();
//    testNode40->geometries[0]->setShader(cubeShader);
//    testNode40->scale = vec3(5.000000953674316f, 3.0f, 17.0f);
//    testNode40->position = vec3(5.108200550079346f, -1.3108752965927124f, -21.101150512695312f);
//    testNode40->eulerAngles = vec3(-9.000000250447817f, 19.99999771063855f, 5.6785429905125e-07f);
//    Engine::main->addNode(testNode40);
//    Node* testNode41 = new Node();
//    testNode41->loadUnitCube();
//    testNode41->geometries[0]->setShader(cubeShader);
//    testNode41->scale = vec3(0.5f, 2.0f, 10.0f);
//    testNode41->position = vec3(-6.175685882568359f, 0.0f, -4.580935478210449f);
//    testNode41->eulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    Engine::main->addNode(testNode41);
//    Node* testNode42 = new Node();
//    testNode42->loadUnitCube();
//    testNode42->geometries[0]->setShader(cubeShader);
//    testNode42->scale = vec3(0.5f, 2.0f, 7.0f);
//    testNode42->position = vec3(-10.48333740234375f, 0.0f, 9.90719985961914f);
//    testNode42->eulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    Engine::main->addNode(testNode42);
//    Node* testNode43 = new Node();
//    testNode43->loadUnitCube();
//    testNode43->geometries[0]->setShader(cubeShader);
//    testNode43->scale = vec3(0.4999997913837433f, 1.0f, 3.999999761581421f);
//    testNode43->position = vec3(2.3769264221191406f, -0.5f, 6.538968086242676f);
//    testNode43->eulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    Engine::main->addNode(testNode43);
//    Node* testNode44 = new Node();
//    testNode44->loadUnitCube();
//    testNode44->geometries[0]->setShader(cubeShader);
//    testNode44->scale = vec3(0.5f, 2.0f, 5.0f);
//    testNode44->position = vec3(-9.59457778930664f, 0.0f, -1.830935001373291f);
//    testNode44->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode44);
//    Node* testNode45 = new Node();
//    testNode45->loadUnitCube();
//    testNode45->geometries[0]->setShader(cubeShader);
//    testNode45->scale = vec3(4.9999680519104f, 0.9999958872795105f, 6.999967098236084f);
//    testNode45->position = vec3(-12.002592086791992f, -0.4999999701976776f, -18.14734649658203f);
//    testNode45->eulerAngles = vec3(0.0f, 33.53639957949186f, 0.0f);
//    Engine::main->addNode(testNode45);
//    Node* testNode46 = new Node();
//    testNode46->loadUnitCube();
//    testNode46->geometries[0]->setShader(cubeShader);
//    testNode46->scale = vec3(2.9999992847442627f, 2.0f, 3.9999990463256836f);
//    testNode46->position = vec3(-7.776100158691406f, 0.0f, -15.409856796264648f);
//    testNode46->eulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    Engine::main->addNode(testNode46);
//    Node* testNode47 = new Node();
//    testNode47->loadUnitCube();
//    testNode47->geometries[0]->setShader(cubeShader);
//    testNode47->scale = vec3(4.999841690063477f, 4.0f, 5.0f);
//    testNode47->position = vec3(40.72988510131836f, 0.9999867081642151f, 2.3642375469207764f);
//    testNode47->eulerAngles = vec3(179.999991348578f, 20.135100559968695f, 179.999991348578f);
//    Engine::main->addNode(testNode47);
//    Node* testNode48 = new Node();
//    testNode48->loadUnitCube();
//    testNode48->geometries[0]->setShader(cubeShader);
//    testNode48->scale = vec3(4.999831199645996f, 3.0f, 4.9999918937683105f);
//    testNode48->position = vec3(39.35308837890625f, 0.5000176429748535f, 7.0984416007995605f);
//    testNode48->eulerAngles = vec3(179.999991348578f, -14.096251130778096f, 179.999991348578f);
//    Engine::main->addNode(testNode48);
//    Node* testNode49 = new Node();
//    testNode49->loadUnitCube();
//    testNode49->geometries[0]->setShader(cubeShader);
//    testNode49->scale = vec3(4.999912738800049f, 4.0f, 5.00007438659668f);
//    testNode49->position = vec3(39.572853088378906f, 0.9999866485595703f, 11.962966918945312f);
//    testNode49->eulerAngles = vec3(179.999991348578f, -71.10730310925103f, 179.999991348578f);
//    Engine::main->addNode(testNode49);
//    Node* testNode50 = new Node();
//    testNode50->loadUnitCube();
//    testNode50->geometries[0]->setShader(cubeShader);
//    testNode50->scale = vec3(3.0f, 2.999999761581421f, 3.0f);
//    testNode50->position = vec3(-13.633177757263184f, 2.999999761581421f, 23.612285614013672f);
//    testNode50->eulerAngles = vec3(179.999991348578f, -71.10728261868353f, 179.999991348578f);
//    Engine::main->addNode(testNode50);
//    Node* testNode51 = new Node();
//    testNode51->loadUnitCube();
//    testNode51->geometries[0]->setShader(cubeShader);
//    testNode51->scale = vec3(1.0000003576278687f, 1.0f, 1.0000003576278687f);
//    testNode51->position = vec3(-21.799108505249023f, 2.0f, 18.328943252563477f);
//    testNode51->eulerAngles = vec3(179.999991348578f, -23.733391063798567f, 179.999991348578f);
//    Engine::main->addNode(testNode51);
//    Node* testNode52 = new Node();
//    testNode52->loadUnitCube();
//    testNode52->geometries[0]->setShader(cubeShader);
//    testNode52->scale = vec3(1.0000003576278687f, 1.0f, 1.0000003576278687f);
//    testNode52->position = vec3(-21.782814025878906f, 2.0f, 18.312650680541992f);
//    testNode52->eulerAngles = vec3(179.999991348578f, -23.73339277134586f, 179.999991348578f);
//    Engine::main->addNode(testNode52);
//    Node* testNode53 = new Node();
//    testNode53->loadUnitCube();
//    testNode53->geometries[0]->setShader(cubeShader);
//    testNode53->scale = vec3(1.0000003576278687f, 1.0f, 1.0000003576278687f);
//    testNode53->position = vec3(-21.2570743560791f, 2.0f, 19.338041305541992f);
//    testNode53->eulerAngles = vec3(179.999991348578f, -23.733394478893153f, 179.999991348578f);
//    Engine::main->addNode(testNode53);
//    Node* testNode54 = new Node();
//    testNode54->loadUnitCube();
//    testNode54->geometries[0]->setShader(cubeShader);
//    testNode54->scale = vec3(1.0000003576278687f, 0.9999999403953552f, 1.0000003576278687f);
//    testNode54->position = vec3(-19.967870712280273f, 1.9999998807907104f, 19.419044494628906f);
//    testNode54->eulerAngles = vec3(179.999991348578f, -23.73339277134586f, 179.999991348578f);
//    Engine::main->addNode(testNode54);
//    Node* testNode55 = new Node();
//    testNode55->loadUnitCube();
//    testNode55->geometries[0]->setShader(cubeShader);
//    testNode55->scale = vec3(1.0000003576278687f, 1.0f, 1.0000003576278687f);
//    testNode55->position = vec3(-18.6903018951416f, 2.0f, 20.22953224182129f);
//    testNode55->eulerAngles = vec3(179.999991348578f, -23.73339277134586f, 179.999991348578f);
//    Engine::main->addNode(testNode55);
//    Node* testNode56 = new Node();
//    testNode56->loadUnitCube();
//    testNode56->geometries[0]->setShader(cubeShader);
//    testNode56->scale = vec3(1.0000005960464478f, 0.9999999403953552f, 1.0000005960464478f);
//    testNode56->position = vec3(-22.858861923217773f, 1.9999998807907104f, 18.720481872558594f);
//    testNode56->eulerAngles = vec3(179.999991348578f, -23.733394478893153f, 179.999991348578f);
//    Engine::main->addNode(testNode56);
//    Node* testNode57 = new Node();
//    testNode57->loadUnitCube();
//    testNode57->geometries[0]->setShader(cubeShader);
//    testNode57->scale = vec3(9.0f, 4.0f, 5.0f);
//    testNode57->position = vec3(-22.26280975341797f, 0.9999867081642151f, -0.05115675926208496f);
//    testNode57->eulerAngles = vec3(179.999991348578f, 0.0f, 179.999991348578f);
//    Engine::main->addNode(testNode57);
//    Node* testNode58 = new Node();
//    testNode58->loadUnitCube();
//    testNode58->geometries[0]->setShader(cubeShader);
//    testNode58->scale = vec3(20.0f, 20.0f, 20.0f);
//    testNode58->position = vec3(0.0f, 9.0f, 60.0f);
//    testNode58->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode58);
//    Node* testNode59 = new Node();
//    testNode59->loadUnitCube();
//    testNode59->geometries[0]->setShader(cubeShader);
//    testNode59->scale = vec3(2.999969720840454f, 1.9999911785125732f, 3.999952793121338f);
//    testNode59->position = vec3(-17.134122848510742f, 0.0f, 2.518460988998413f);
//    testNode59->eulerAngles = vec3(0.0f, 60.457330645908655f, 0.0f);
//    Engine::main->addNode(testNode59);
//    Node* testNode60 = new Node();
//    testNode60->loadUnitCube();
//    testNode60->geometries[0]->setShader(cubeShader);
//    testNode60->scale = vec3(4.999832630157471f, 3.0f, 4.999993324279785f);
//    testNode60->position = vec3(18.351093292236328f, 0.5000176429748535f, 8.719722747802734f);
//    testNode60->eulerAngles = vec3(179.999991348578f, -14.096249423230805f, 179.999991348578f);
//    Engine::main->addNode(testNode60);
//    Node* testNode61 = new Node();
//    testNode61->loadUnitCube();
//    testNode61->geometries[0]->setShader(cubeShader);
//    testNode61->scale = vec3(0.5f, 2.0f, 7.0f);
//    testNode61->position = vec3(-10.890523910522461f, 0.0f, -35.301090240478516f);
//    testNode61->eulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    Engine::main->addNode(testNode61);
//    Node* testNode62 = new Node();
//    testNode62->loadUnitCube();
//    testNode62->geometries[0]->setShader(cubeShader);
//    testNode62->scale = vec3(4.0f, 3.0f, 2.0f);
//    testNode62->position = vec3(-49.953739166259766f, 0.5f, 5.168451309204102f);
//    testNode62->eulerAngles = vec3(0.0f, -69.99999967119774f, 0.0f);
//    Engine::main->addNode(testNode62);
//    Node* testNode63 = new Node();
//    testNode63->loadUnitCube();
//    testNode63->geometries[0]->setShader(cubeShader);
//    testNode63->scale = vec3(4.0f, 7.0f, 1.999990463256836f);
//    testNode63->position = vec3(-44.0306396484375f, 2.5f, 20.40106964111328f);
//    testNode63->eulerAngles = vec3(0.0f, -45.95227305651143f, 0.0f);
//    Engine::main->addNode(testNode63);
//    Node* testNode64 = new Node();
//    testNode64->loadUnitCube();
//    testNode64->geometries[0]->setShader(cubeShader);
//    testNode64->scale = vec3(4.999993324279785f, 6.999980926513672f, 4.999993324279785f);
//    testNode64->position = vec3(14.83809757232666f, 2.499999761581421f, -37.63517761230469f);
//    testNode64->eulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode64);
//    Node* testNode65 = new Node();
//    testNode65->loadUnitCube();
//    testNode65->geometries[0]->setShader(cubeShader);
//    testNode65->scale = vec3(3.000000238418579f, 2.999999761581421f, 3.000000238418579f);
//    testNode65->position = vec3(17.829620361328125f, 2.9999845027923584f, -9.80679702758789f);
//    testNode65->eulerAngles = vec3(179.999991348578f, -71.10726895830518f, 179.999991348578f);
//    Engine::main->addNode(testNode65);
//    Node* testNode66 = new Node();
//    testNode66->loadUnitCube();
//    testNode66->geometries[0]->setShader(cubeShader);
//    testNode66->scale = vec3(1.0000003576278687f, 1.0f, 1.0000003576278687f);
//    testNode66->position = vec3(13.097940444946289f, 1.9999847412109375f, -6.686174392700195f);
//    testNode66->eulerAngles = vec3(179.999991348578f, -23.73339277134586f, 179.999991348578f);
//    Engine::main->addNode(testNode66);
//    Node* testNode67 = new Node();
//    testNode67->loadUnitCube();
//    testNode67->geometries[0]->setShader(cubeShader);
//    testNode67->scale = vec3(1.0000169277191162f, 0.9999843239784241f, 1.0000169277191162f);
//    testNode67->position = vec3(7.924259662628174f, 1.9999691247940063f, -6.570480823516846f);
//    testNode67->eulerAngles = vec3(0.0f, -84.12961200720312f, 0.0f);
//    Engine::main->addNode(testNode67);
//    Node* testNode68 = new Node();
//    testNode68->loadUnitCube();
//    testNode68->geometries[0]->setShader(cubeShader);
//    testNode68->scale = vec3(1.0000169277191162f, 0.9999842643737793f, 1.0000169277191162f);
//    testNode68->position = vec3(9.213461875915527f, 1.9999690055847168f, -6.489477634429932f);
//    testNode68->eulerAngles = vec3(0.0f, -84.12961200720312f, 0.0f);
//    Engine::main->addNode(testNode68);
//    Node* testNode69 = new Node();
//    testNode69->loadUnitCube();
//    testNode69->geometries[0]->setShader(cubeShader);
//    testNode69->scale = vec3(1.0000022649765015f, 0.9999843239784241f, 1.0000022649765015f);
//    testNode69->position = vec3(10.4910306930542f, 1.9999691247940063f, -5.678989887237549f);
//    testNode69->eulerAngles = vec3(0.0f, -84.12957785625727f, 0.0f);
//    Engine::main->addNode(testNode69);
//    Node* testNode70 = new Node();
//    testNode70->loadUnitCube();
//    testNode70->geometries[0]->setShader(cubeShader);
//    testNode70->scale = vec3(1.0000008344650269f, 0.9999999403953552f, 1.0000008344650269f);
//    testNode70->position = vec3(12.021892547607422f, 1.999984622001648f, -6.278343200683594f);
//    testNode70->eulerAngles = vec3(179.999991348578f, -23.73339277134586f, 179.999991348578f);
//    Engine::main->addNode(testNode70);
//    Node* testNode71 = new Node();
//    testNode71->loadUnitCube();
//    testNode71->geometries[0]->setShader(cubeShader);
//    testNode71->scale = vec3(3.9999682903289795f, 2.9999806880950928f, 1.9999841451644897f);
//    testNode71->position = vec3(-23.76885414123535f, 0.4999694526195526f, 41.0047492980957f);
//    testNode71->eulerAngles = vec3(0.0f, 90.00000250447816f, 0.0f);
//    Engine::main->addNode(testNode71);
}


void importMapModel() {
    Node* newMap = new Node();
    newMap->loadModelFile("/Resources/Game/Map/MergedMapBase.dae");
    newMap->position.x = MAPX;
    newMap->position.z = MAPZ;
//    newMap->scale = vec3(5);
    newMap->position.y = MAPY;
    
    
    PBRShader* wallShader = new PBRShader(0.3f, 0.7f);
    wallShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Wall_01_Albedo.png", 2, true));
    wallShader->setNormalMap(new Texture("/Resources/Game/Map/T_Wall_01_Normal.png", 1, true));
    wallShader->alphaCutThreshold = 0.0f;
    newMap->geometries[0]->setDoubleSided();
    newMap->geometries[0]->setShader(wallShader);
    PBRShader* wallShader2 = new PBRShader(0.3f, 0.7f);
    wallShader2->setDiffuseMap(new Texture("/Resources/Game/Map/T_Wall_03_Albedo.png", 2, true));
    wallShader2->setNormalMap(new Texture("/Resources/Game/Map/T_Wall_03_Normal.png", 1, true));
    wallShader2->alphaCutThreshold = 0.0f;
    newMap->geometries[1]->setDoubleSided();
    newMap->geometries[1]->setShader(wallShader2);
    PBRShader* wallShader3 = new PBRShader(0.3f, 0.7f);
    wallShader3->setDiffuseMap(new Texture("/Resources/Game/Map/T_Bricks_01_Albedo.png", 2, true));
    wallShader3->setNormalMap(new Texture("/Resources/Game/Map/T_Bricks_01_Normal.png", 1, true));
    wallShader3->alphaCutThreshold = 0.0f;
    newMap->geometries[2]->setDoubleSided();
    newMap->geometries[2]->setShader(wallShader3);
    PBRShader* wallShader4 = new PBRShader(0.3f, 0.7f);
    wallShader4->setDiffuseMap(new Texture("/Resources/Game/Map/T_Floor_01_Albedo.png", 2, true));
    wallShader4->setNormalMap(new Texture("/Resources/Game/Map/T_Floor_01_Normal.png", 1, true));
    wallShader4->alphaCutThreshold = 0.0f;
    newMap->geometries[3]->setDoubleSided();
    newMap->geometries[3]->setShader(wallShader4);
    PBRShader* wallShader5 = new PBRShader(0.3f, 0.7f);
    wallShader5->setDiffuseMap(new Texture("/Resources/Game/Map/T_Floor_Bricks_01_Albedo.png", 2, true));
    wallShader5->setNormalMap(new Texture("/Resources/Game/Map/T_Floor_Bricks_01_Normal.png", 1, true));
    wallShader5->alphaCutThreshold = 0.0f;
    newMap->geometries[4]->setDoubleSided();
    newMap->geometries[4]->setShader(wallShader5);
    PBRShader* wallShader6 = new PBRShader(0.3f, 0.7f);
    wallShader6->setDiffuseMap(new Texture("/Resources/Game/Map/T_Trim_01_Albedo.png", 2, true));
    wallShader6->setNormalMap(new Texture("/Resources/Game/Map/T_Trim_01_Normal.png", 1, true));
    wallShader6->alphaCutThreshold = 0.0f;
    newMap->geometries[5]->setDoubleSided();
    newMap->geometries[5]->setShader(wallShader6);
    PBRShader* wallShader7 = new PBRShader(0.3f, 0.7f);
    wallShader7->setDiffuseMap(new Texture("/Resources/Game/Map/T_Battlement_01_Albedo.png", 2, true));
    wallShader7->setNormalMap(new Texture("/Resources/Game/Map/T_Battlement_01_Normal.png", 1, true));
    wallShader7->alphaCutThreshold = 0.0f;
    newMap->geometries[6]->setDoubleSided();
    newMap->geometries[6]->setShader(wallShader7);
    PBRShader* wallShader8 = new PBRShader(0.85f, 0.2f);
    wallShader8->setDiffuseMap(new Texture("/Resources/Game/Map/T_Metal_Surface_01_Albedo.png", 2, true));
    wallShader8->setNormalMap(new Texture("/Resources/Game/Map/T_Metal_Surface_01_Normal.png", 1, true));
    wallShader8->alphaCutThreshold = 0.0f;
    newMap->geometries[7]->setDoubleSided();
    newMap->geometries[7]->setShader(wallShader8);
    PBRShader* wallShader9 = new PBRShader(0.3f, 0.5f);
    wallShader9->setDiffuseMap(new Texture("/Resources/Game/Map/New Terrain Basemap Diffuse.png", 2, true));
    wallShader9->setNormalMap(new Texture("/Resources/Game/Map/New Terrain Basemap Normal.png", 1, true));
    wallShader9->alphaCutThreshold = 0.0f;
    newMap->geometries[8]->setDoubleSided();
    newMap->geometries[8]->setShader(wallShader9);
    PBRShader* wallShadera = new PBRShader(0.3f, 0.7f);
    wallShadera->setDiffuseMap(new Texture("/Resources/Game/Map/T_Column_01_Albedo.png", 2, true));
    wallShadera->setNormalMap(new Texture("/Resources/Game/Map/T_Column_01_Normal.png", 1, true));
    wallShadera->alphaCutThreshold = 0.0f;
    newMap->geometries[9]->setDoubleSided();
    newMap->geometries[9]->setShader(wallShadera);
    
    for (int n = 11; n < newMap->geometries.size(); n++) {
        newMap->geometries[n]->setShader(new PBRShader(0.5, 0.3));
    }
    Engine::main->addNode(newMap);
    PBRShader* plant1Shader = new PBRShader(0.5, 0.4);
    plant1Shader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Plant_01_Albedo.png", 2.0, true));
    plant1Shader->setNormalMap(new Texture("/Resources/Game/Map/T_Plant_01_Normal.png", 2.0, true));
    Node* plant1 = new Node();
    plant1->loadModelFile("/Resources/Game/Map/plant01lod0.dae");
    plant1->geometries[0]->setShader(plant1Shader);
    plant1->geometries[0]->setDoubleSided();
    plant1->position.z = MAPZ;
    plant1->position.x = MAPX;
    plant1->position.y = MAPY;
    Node* plant3 = new Node();
    plant3->loadModelFile("/Resources/Game/Map/plant03lod0.dae");
    plant3->geometries[0]->setShader(plant1Shader);
    plant3->geometries[0]->setDoubleSided();
    plant3->position.z = MAPZ;
    plant3->position.x = MAPX;
    plant3->position.y = MAPY;
    Node* plant1_0 = plant1->copy();
    plant1_0->position += vec3(-57.17582321166992, 100.00218200683594, 23.40212631225586);
    plant1_0->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant1_0->scale = vec3(0.49999996185302736, 0.49999996185302736, 0.49999996185302736);
    Engine::main->addNode(plant1_0);
    Node* plant3_1 = plant3->copy();
    plant3_1->position += vec3(-78.26461791992188, 100.00308990478516, 53.28422546386719);
    plant3_1->eulerAngles = vec3(0.0, -81.39540532017698, 0.0);
    plant3_1->scale = vec3(0.9999913024902344, 0.9999925994873047, 0.9999913024902344);
    Engine::main->addNode(plant3_1);
    Node* plant3_2 = plant3->copy();
    plant3_2->position += vec3(-78.66901397705078, 100.00308227539062, 47.33259201049805);
    plant3_2->eulerAngles = vec3(0.0, -34.65575488633564, 0.0);
    plant3_2->scale = vec3(0.9999915313720703, 0.99998779296875, 0.9999915313720703);
    Engine::main->addNode(plant3_2);
    Node* plant3_3 = plant3->copy();
    plant3_3->position += vec3(-78.36922454833984, 100.00308227539062, 44.6095085144043);
    plant3_3->eulerAngles = vec3(0.0, -34.65575488633564, 0.0);
    plant3_3->scale = vec3(0.9999915313720703, 0.99998779296875, 0.9999915313720703);
    Engine::main->addNode(plant3_3);
    Node* plant3_4 = plant3->copy();
    plant3_4->position += vec3(-78.49551391601562, 100.0030746459961, 44.58934020996094);
    plant3_4->eulerAngles = vec3(0.0, 90.00000250447816, 0.0);
    plant3_4->scale = vec3(0.9999874877929688, 1.9999862670898438, 0.9999874877929688);
    Engine::main->addNode(plant3_4);
    Node* plant3_5 = plant3->copy();
    plant3_5->position += vec3(-81.05696105957031, 123.90168762207031, 47.07577133178711);
    plant3_5->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_5->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(plant3_5);
    Node* plant3_6 = plant3->copy();
    plant3_6->position += vec3(-89.27325439453125, 123.90168762207031, 53.58332061767578);
    plant3_6->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_6->scale = vec3(1.9351551818847657, 1.9351551818847657, 1.9351551818847657);
    Engine::main->addNode(plant3_6);
    Node* plant3_7 = plant3->copy();
    plant3_7->position += vec3(-85.80537414550781, 123.90169525146484, 44.222190856933594);
    plant3_7->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_7->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(plant3_7);
    Node* plant3_8 = plant3->copy();
    plant3_8->position += vec3(-90.85087585449219, 124.26917266845703, 44.35463333129883);
    plant3_8->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_8->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(plant3_8);
    Node* plant3_9 = plant3->copy();
    plant3_9->position += vec3(-7.395681858062744, 123.90169525146484, 46.899330139160156);
    plant3_9->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_9->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(plant3_9);
    Node* plant3_10 = plant3->copy();
    plant3_10->position += vec3(-17.342391967773438, 123.90169525146484, 54.02304458618164);
    plant3_10->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_10->scale = vec3(1.9351553344726562, 1.9351553344726562, 1.9351553344726562);
    Engine::main->addNode(plant3_10);
    Node* plant3_11 = plant3->copy();
    plant3_11->position += vec3(-13.474224090576172, 99.69430541992188, 56.153987884521484);
    plant3_11->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_11->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(plant3_11);
    Node* plant3_12 = plant3->copy();
    plant3_12->position += vec3(-12.140089988708496, 123.90170288085938, 44.04111862182617);
    plant3_12->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_12->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(plant3_12);
    Node* plant3_13 = plant3->copy();
    plant3_13->position += vec3(-17.379087448120117, 124.26918029785156, 43.80323791503906);
    plant3_13->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_13->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(plant3_13);
    Node* plant1_14 = plant1->copy();
    plant1_14->position += vec3(-19.5660343170166, 100.00312042236328, 47.27452850341797);
    plant1_14->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant1_14->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(plant1_14);
    Node* plant1_15 = plant1->copy();
    plant1_15->position += vec3(-41.533355712890625, 99.99726867675781, 60.480411529541016);
    plant1_15->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant1_15->scale = vec3(0.6999999237060547, 0.6999999237060547, 0.6999999237060547);
    Engine::main->addNode(plant1_15);
    Node* plant1_16 = plant1->copy();
    plant1_16->position += vec3(-37.544227600097656, 99.99726867675781, 43.63860321044922);
    plant1_16->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant1_16->scale = vec3(0.6999999237060547, 0.6999999237060547, 0.6999999237060547);
    Engine::main->addNode(plant1_16);
    Node* plant1_17 = plant1->copy();
    plant1_17->position += vec3(-44.62746047973633, 99.99726867675781, 43.14806365966797);
    plant1_17->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant1_17->scale = vec3(0.6999999237060547, 0.6999999237060547, 0.6999999237060547);
    Engine::main->addNode(plant1_17);
    Node* plant1_18 = plant1->copy();
    plant1_18->position += vec3(-63.5434684753418, 99.99726867675781, 42.74816131591797);
    plant1_18->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant1_18->scale = vec3(0.6999999237060547, 0.6999999237060547, 0.6999999237060547);
    Engine::main->addNode(plant1_18);
    PBRShader* rocksmShader = new PBRShader(0.3, 0.7);
    rocksmShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Rock_Surface_01_Albedo.png", 2.0, true));
    rocksmShader->setNormalMap(new Texture("/Resources/Game/Map/T_Rock_Surface_01_Normal.png", 2.0, true));
    Node* rocksm1 = new Node();
    rocksm1->loadModelFile("/Resources/Game/Map/rock01lod0.dae");
    rocksm1->geometries[0]->setShader(rocksmShader);
    rocksm1->geometries[0]->setDoubleSided();
    rocksm1->position.x = MAPX;
    rocksm1->position.z = MAPZ;
    rocksm1->position.y  = MAPY;
    Node* rocksm2 = new Node();
    rocksm2->loadModelFile("/Resources/Game/Map/rock02lod0.dae");
    rocksm2->geometries[0]->setShader(rocksmShader);
    rocksm2->geometries[0]->setDoubleSided();
    rocksm2->position.x = MAPX;
    rocksm2->position.z = MAPZ;
    rocksm2->position.y  = MAPY;
    Node* rocksm3 = new Node();
    rocksm3->loadModelFile("/Resources/Game/Map/rock03lod0.dae");
    rocksm3->geometries[0]->setShader(rocksmShader);
    rocksm3->geometries[0]->setDoubleSided();
    rocksm3->position.x = MAPX;
    rocksm3->position.z = MAPZ;
    rocksm3->position.y  = MAPY;
    Node* rocksm4 = new Node();
    rocksm4->loadModelFile("/Resources/Game/Map/rock04lod0.dae");
    rocksm4->geometries[0]->setShader(rocksmShader);
    rocksm4->geometries[0]->setDoubleSided();
    rocksm4->position.x = MAPX;
    rocksm4->position.z = MAPZ;
    rocksm4->position.y  = MAPY;
    Node* rocksm2_19 = rocksm2->copy();
    rocksm2_19->position += vec3(-77.56976318359375, 100.34490966796875, 42.678688049316406);
    rocksm2_19->eulerAngles = vec3(-6.249443798095954, -21.720054494606615, 0.3638770206915335);
    rocksm2_19->scale = vec3(7.266416625976563, 7.266331787109375, 7.266439819335938);
    Engine::main->addNode(rocksm2_19);
    Node* rocksm2_20 = rocksm2->copy();
    rocksm2_20->position += vec3(-76.54000091552734, 100.64935302734375, 40.29208755493164);
    rocksm2_20->eulerAngles = vec3(84.57418219009008, -21.72005620215391, 0.3638779278260327);
    rocksm2_20->scale = vec3(7.266262817382812, 7.266253051757812, 7.266295776367188);
    Engine::main->addNode(rocksm2_20);
    Node* rocksm1_21 = rocksm1->copy();
    rocksm1_21->position += vec3(-77.52787017822266, 100.96206665039062, 41.30534362792969);
    rocksm1_21->eulerAngles = vec3(38.024837901998225, -3.306514427440448, -104.27096560535695);
    rocksm1_21->scale = vec3(3.0086981201171876, 3.008722839355469, 3.0086932373046875);
    Engine::main->addNode(rocksm1_21);
    Node* rocksm1_22 = rocksm1->copy();
    rocksm1_22->position += vec3(-75.90833282470703, 100.45889282226562, 42.54043197631836);
    rocksm1_22->eulerAngles = vec3(97.92957892329616, -51.61705436920158, 158.23573016211577);
    rocksm1_22->scale = vec3(3.6586849975585936, 3.658741760253906, 3.6586984252929686);
    Engine::main->addNode(rocksm1_22);
    Node* rocksm1_24 = rocksm1->copy();
    rocksm1_24->position += vec3(-73.17428588867188, 99.90917205810547, 34.78422927856445);
    rocksm1_24->eulerAngles = vec3(38.02483107180906, -3.306516348431152, -104.27096560535695);
    rocksm1_24->scale = vec3(3.008697814941406, 3.00872314453125, 3.0086935424804686);
    Engine::main->addNode(rocksm1_24);
    Node* rocksm3_25 = rocksm3->copy();
    rocksm3_25->position += vec3(-37.70036315917969, 100.00311279296875, 25.085912704467773);
    rocksm3_25->eulerAngles = vec3(0.0, 20.217117471522208, 0.0);
    rocksm3_25->scale = vec3(1.9999900817871095, 1.9999879455566407, 1.9999900817871095);
    Engine::main->addNode(rocksm3_25);
    Node* rocksm3_26 = rocksm3->copy();
    rocksm3_26->position += vec3(-38.3915901184082, 100.06198120117188, 24.67803955078125);
    rocksm3_26->eulerAngles = vec3(26.482620751904157, 22.527417005447976, 66.09845901350306);
    rocksm3_26->scale = vec3(1.999954833984375, 1.9999502563476563, 1.9999502563476563);
    Engine::main->addNode(rocksm3_26);
    Node* rocksm1_27 = rocksm1->copy();
    rocksm1_27->position += vec3(-13.84401798248291, 99.79943084716797, 55.581417083740234);
    rocksm1_27->eulerAngles = vec3(0.0, -1.0928302427753803e-06, 0.0);
    rocksm1_27->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(rocksm1_27);
    Node* rocksm1_28 = rocksm1->copy();
    rocksm1_28->position += vec3(-51.898746490478516, 114.99073028564453, 22.919652938842773);
    rocksm1_28->eulerAngles = vec3(-5.485881272349408e-07, 1.0240614598968988e-06, -29.05695320102781);
    rocksm1_28->scale = vec3(0.9999961090087891, 0.9999961090087891, 0.9999958038330078);
    Engine::main->addNode(rocksm1_28);
    Node* rocksm1_29 = rocksm1->copy();
    rocksm1_29->position += vec3(-51.63772201538086, 114.54964447021484, 22.911069869995117);
    rocksm1_29->eulerAngles = vec3(0.0, 49.26401663409176, 13.413532742100303);
    rocksm1_29->scale = vec3(0.9999832153320313, 0.9999870300292969, 0.9999838256835938);
    Engine::main->addNode(rocksm1_29);
    Node* rocksm1_30 = rocksm1->copy();
    rocksm1_30->position += vec3(-45.831016540527344, 118.68267059326172, 22.89613151550293);
    rocksm1_30->eulerAngles = vec3(38.02483448690364, -3.306511012345863, -104.27096560535695);
    rocksm1_30->scale = vec3(0.9999417114257813, 0.9999497222900391, 0.9999401092529296);
    Engine::main->addNode(rocksm1_30);
    Node* rocksm4_31 = rocksm4->copy();
    rocksm4_31->position += vec3(-7.868885517120361, 100.17184448242188, 55.920005798339844);
    rocksm4_31->eulerAngles = vec3(0.0, -0.0, 0.0);
    rocksm4_31->scale = vec3(1.0, 1.0, 1.0);
    Engine::main->addNode(rocksm4_31);
    Node* rocksm4_32 = rocksm4->copy();
    rocksm4_32->position += vec3(-20.372102737426758, 100.4203109741211, 41.56875228881836);
    rocksm4_32->eulerAngles = vec3(0.0, -0.0, 0.0);
    rocksm4_32->scale = vec3(3.0, 3.0, 3.0);
    Engine::main->addNode(rocksm4_32);
    Node* rocksm4_33 = rocksm4->copy();
    rocksm4_33->position += vec3(-20.96310806274414, 100.09677124023438, 42.08872604370117);
    rocksm4_33->eulerAngles = vec3(179.999991348578, 37.168929821631004, 179.999991348578);
    rocksm4_33->scale = vec3(1.9999856567382812, 0.9999897766113282, 0.9999928283691406);
    Engine::main->addNode(rocksm4_33);
    Node* rocksm3_34 = rocksm3->copy();
    rocksm3_34->position += vec3(-9.482209205627441, 123.89946746826172, 44.459720611572266);
    rocksm3_34->eulerAngles = vec3(0.0, -0.0, 0.0);
    rocksm3_34->scale = vec3(1.0, 1.0, 1.0);
    Engine::main->addNode(rocksm3_34);
    Node* rocksm2_35 = rocksm2->copy();
    rocksm2_35->position += vec3(-18.898469924926758, 99.94419860839844, 54.16463088989258);
    rocksm2_35->eulerAngles = vec3(26.314507598315338, -0.0, 0.0);
    rocksm2_35->scale = vec3(2.999988708496094, 2.9999884033203124, 2.9999884033203124);
    Engine::main->addNode(rocksm2_35);
    Node* rocksm2_36 = rocksm2->copy();
    rocksm2_36->position += vec3(-7.0379557609558105, 100.297607421875, 55.82749557495117);
    rocksm2_36->eulerAngles = vec3(26.314507598315338, -0.0, 0.0);
    rocksm2_36->scale = vec3(2.9999880981445313, 2.9999868774414065, 2.9999868774414065);
    Engine::main->addNode(rocksm2_36);
    Node* rocksm3_41 = rocksm3->copy();
    rocksm3_41->position += vec3(-83.2619857788086, 123.89945983886719, 44.580101013183594);
    rocksm3_41->eulerAngles = vec3(0.0, -0.0, 0.0);
    rocksm3_41->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(rocksm3_41);
    Node* rocksm3_42 = rocksm3->copy();
    rocksm3_42->position += vec3(-79.69485473632812, 100.0201416015625, 55.974884033203125);
    rocksm3_42->eulerAngles = vec3(0.0, -0.0, 0.0);
    rocksm3_42->scale = vec3(3.2689199829101563, 3.2689199829101563, 3.2689199829101563);
    Engine::main->addNode(rocksm3_42);
    Node* rocksm3_43 = rocksm3->copy();
    rocksm3_43->position += vec3(-80.77550506591797, 100.58219146728516, 56.31489562988281);
    rocksm3_43->eulerAngles = vec3(0.0, -0.0, 95.78175763689397);
    rocksm3_43->scale = vec3(3.2688641357421875, 3.2688641357421875, 3.26888671875);
    Engine::main->addNode(rocksm3_43);
    Node* rocksm2_44 = rocksm2->copy();
    rocksm2_44->position += vec3(-80.081787109375, 100.0705337524414, 57.133636474609375);
    rocksm2_44->eulerAngles = vec3(26.314507598315338, -0.0, 0.0);
    rocksm2_44->scale = vec3(1.495221405029297, 1.4952207946777343, 1.4952207946777343);
    Engine::main->addNode(rocksm2_44);
    Node* rocksm2_45 = rocksm2->copy();
    rocksm2_45->position += vec3(-82.3855209350586, 100.61290740966797, 56.501556396484375);
    rocksm2_45->eulerAngles = vec3(57.87257532811156, -0.0, 0.0);
    rocksm2_45->scale = vec3(4.387901916503906, 4.388034973144531, 4.388034973144531);
    Engine::main->addNode(rocksm2_45);
    Node* rocksm3_46 = rocksm3->copy();
    rocksm3_46->position += vec3(-75.62017059326172, 100.81684112548828, 62.69874572753906);
    rocksm3_46->eulerAngles = vec3(0.0, 0.0, -20.97568852602758);
    rocksm3_46->scale = vec3(6.851716918945312, 6.851716918945312, 6.85171630859375);
    Engine::main->addNode(rocksm3_46);
    Node* rocksm1_47 = rocksm1->copy();
    rocksm1_47->position += vec3(-77.56390380859375, 100.36811065673828, 61.01026916503906);
    rocksm1_47->eulerAngles = vec3(38.0248208265253, -3.3065178425350332, -104.2709587751678);
    rocksm1_47->scale = vec3(6.166126708984375, 6.166181030273438, 6.166121826171875);
    Engine::main->addNode(rocksm1_47);
    Node* rocksm2_48 = rocksm2->copy();
    rocksm2_48->position += vec3(-78.27678680419922, 99.94185638427734, 59.37837600708008);
    rocksm2_48->eulerAngles = vec3(26.314507598315338, -0.0, 0.0);
    rocksm2_48->scale = vec3(0.985615005493164, 0.9856144714355469, 0.9856144714355469);
    Engine::main->addNode(rocksm2_48);
    Node* rocksm1_49 = rocksm1->copy();
    rocksm1_49->position += vec3(-78.75689697265625, 99.942626953125, 59.433597564697266);
    rocksm1_49->eulerAngles = vec3(38.0248208265253, -3.3065195500823257, -104.2709587751678);
    rocksm1_49->scale = vec3(1.1647046661376954, 1.1647149658203124, 1.1647038269042969);
    Engine::main->addNode(rocksm1_49);
    Node* rocksm1_50 = rocksm1->copy();
    rocksm1_50->position += vec3(-68.54923248291016, 100.15362548828125, 66.77737426757812);
    rocksm1_50->eulerAngles = vec3(1.6808466956554327, 38.11522179528501, 164.23252697036025);
    rocksm1_50->scale = vec3(1.1647093200683594, 1.1647138977050782, 1.1647029113769531);
    Engine::main->addNode(rocksm1_50);
    Node* rocksm1_51 = rocksm1->copy();
    rocksm1_51->position += vec3(-68.3082275390625, 100.07266998291016, 66.43902587890625);
    rocksm1_51->eulerAngles = vec3(1.3527289969613687, -12.161384043639483, 162.9098335168306);
    rocksm1_51->scale = vec3(0.8018861389160157, 0.8018857574462891, 0.801883544921875);
    Engine::main->addNode(rocksm1_51);
    Node* rocksm3_52 = rocksm3->copy();
    rocksm3_52->position += vec3(-66.67627716064453, 99.55561065673828, 75.5516586303711);
    rocksm3_52->eulerAngles = vec3(0.0, 25.24322999303927, 0.0);
    rocksm3_52->scale = vec3(1.8490330505371093, 1.8490330505371093, 1.8490330505371093);
    Engine::main->addNode(rocksm3_52);
    Node* rocksm3_53 = rocksm3->copy();
    rocksm3_53->position += vec3(-66.60636138916016, 99.62882995605469, 74.80904388427734);
    rocksm3_53->eulerAngles = vec3(18.927179897704647, -15.18738153465045, -23.66225635114018);
    rocksm3_53->scale = vec3(1.4108084106445313, 1.4108111572265625, 1.41080810546875);
    Engine::main->addNode(rocksm3_53);
    Node* rocksm1_54 = rocksm1->copy();
    rocksm1_54->position += vec3(-64.77035522460938, 99.50146484375, 76.19060516357422);
    rocksm1_54->eulerAngles = vec3(38.0248208265253, -3.306521257629618, -104.2709587751678);
    rocksm1_54->scale = vec3(6.166128540039063, 6.166182250976562, 6.1661224365234375);
    Engine::main->addNode(rocksm1_54);
    Node* rocksm1_55 = rocksm1->copy();
    rocksm1_55->position += vec3(-75.57953643798828, 99.9648666381836, 66.8282699584961);
    rocksm1_55->eulerAngles = vec3(38.0248208265253, -3.3065131467799787, -104.27096560535695);
    rocksm1_55->scale = vec3(3.4372183227539064, 3.4372491455078125, 3.437215576171875);
    Engine::main->addNode(rocksm1_55);
    Node* rocksm3_56 = rocksm3->copy();
    rocksm3_56->position += vec3(-45.826820373535156, 99.66645050048828, 76.59263610839844);
    rocksm3_56->eulerAngles = vec3(-7.22026810370135, 0.0, 0.0);
    rocksm3_56->scale = vec3(4.808630676269531, 4.808633422851562, 4.808633422851562);
    Engine::main->addNode(rocksm3_56);
    Node* rocksm2_57 = rocksm2->copy();
    rocksm2_57->position += vec3(-42.31096267700195, 99.58843231201172, 78.0598373413086);
    rocksm2_57->eulerAngles = vec3(57.872568497922394, -0.0, 0.0);
    rocksm2_57->scale = vec3(4.387901916503906, 4.388034973144531, 4.388034973144531);
    Engine::main->addNode(rocksm2_57);
    Node* rocksm2_58 = rocksm2->copy();
    rocksm2_58->position += vec3(-43.876312255859375, 100.44792175292969, 76.84300994873047);
    rocksm2_58->eulerAngles = vec3(9.926236227377721, -0.0, 0.0);
    rocksm2_58->scale = vec3(5.407929077148437, 5.408075561523438, 5.408075561523438);
    Engine::main->addNode(rocksm2_58);
    Node* rocksm2_59 = rocksm2->copy();
    rocksm2_59->position += vec3(-45.11967468261719, 100.11156463623047, 75.31657409667969);
    rocksm2_59->eulerAngles = vec3(9.926236227377721, -0.0, 0.0);
    rocksm2_59->scale = vec3(1.147039566040039, 1.1470705413818358, 1.1470705413818358);
    Engine::main->addNode(rocksm2_59);
    Node* rocksm2_60 = rocksm2->copy();
    rocksm2_60->position += vec3(-45.65596008300781, 100.16958618164062, 74.98491668701172);
    rocksm2_60->eulerAngles = vec3(15.422609834571105, 49.59396258232757, 11.863463144874576);
    rocksm2_60->scale = vec3(1.147032699584961, 1.1470622253417968, 1.14706298828125);
    Engine::main->addNode(rocksm2_60);
    Node* rocksm1_61 = rocksm1->copy();
    rocksm1_61->position += vec3(-44.84373474121094, 100.14331817626953, 75.01002502441406);
    rocksm1_61->eulerAngles = vec3(38.02482765671447, -3.306522965176911, -104.27097243554613);
    rocksm1_61->scale = vec3(0.8049809265136719, 0.8049881744384766, 0.804980239868164);
    Engine::main->addNode(rocksm1_61);
    Node* rocksm2_64 = rocksm2->copy();
    rocksm2_64->position += vec3(-35.5877799987793, 100.21414184570312, 72.6595687866211);
    rocksm2_64->eulerAngles = vec3(9.926235373604076, -0.0, 0.0);
    rocksm2_64->scale = vec3(0.9942637634277344, 0.9942906188964844, 0.9942906188964844);
    Engine::main->addNode(rocksm2_64);
    Node* rocksm2_65 = rocksm2->copy();
    rocksm2_65->position += vec3(-35.41065216064453, 100.26628875732422, 72.36226654052734);
    rocksm2_65->eulerAngles = vec3(-82.55391468643785, 0.0, 0.0);
    rocksm2_65->scale = vec3(0.9942538452148437, 0.9942722320556641, 0.9942722320556641);
    Engine::main->addNode(rocksm2_65);
    PBRShader* rockPileShader = new PBRShader(0.3, 0.7);
    rockPileShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Rock_Pile_01_Albedo.png", 2.0, true));
    rockPileShader->setNormalMap(new Texture("/Resources/Game/Map/T_Rock_Pile_01_Normal.png", 2.0, true));
    Node* rockpile1 = new Node();
    rockpile1->loadModelFile("/Resources/Game/Map/rockpile01lod0.dae");
    rockpile1->geometries[0]->setShader(rockPileShader);
    rockpile1->geometries[0]->setDoubleSided();
    rockpile1->position.x = MAPX;
    rockpile1->position.z = MAPZ;
    rockpile1->position.y  = MAPY;
    Node* rockpile1_23 = rockpile1->copy();
    rockpile1_23->position += vec3(-75.5518569946289, 100.0305404663086, 40.41579818725586);
    rockpile1_23->eulerAngles = vec3(0.0, 70.24674025496445, 0.0);
    rockpile1_23->scale = vec3(1.0, 0.49999515533447264, 0.9999772644042969);
    Engine::main->addNode(rockpile1_23);
    Node* rockpile1_37 = rockpile1->copy();
    rockpile1_37->position += vec3(-44.32003402709961, 100.03057098388672, 23.46868896484375);
    rockpile1_37->eulerAngles = vec3(0.0, -36.71445244935294, 0.0);
    rockpile1_37->scale = vec3(2.4999845886230467, 1.9999853515625, 1.9999777221679687);
    Engine::main->addNode(rockpile1_37);
    Node* rockpile1_38 = rockpile1->copy();
    rockpile1_38->position += vec3(-19.023115158081055, 100.00312042236328, 43.54102325439453);
    rockpile1_38->eulerAngles = vec3(0.0, -0.0, 0.0);
    rockpile1_38->scale = vec3(1.0, 1.0, 1.0);
    Engine::main->addNode(rockpile1_38);
    Node* rockpile1_39 = rockpile1->copy();
    rockpile1_39->position += vec3(-35.284297943115234, 100.03053283691406, 27.994184494018555);
    rockpile1_39->eulerAngles = vec3(179.999991348578, 39.663454925397645, 179.999991348578);
    rockpile1_39->scale = vec3(2.4999351501464844, 1.9999607849121093, 1.999937744140625);
    Engine::main->addNode(rockpile1_39);
    Node* rockpile1_40 = rockpile1->copy();
    rockpile1_40->position += vec3(-41.51778030395508, 100.03055572509766, 28.32457160949707);
    rockpile1_40->eulerAngles = vec3(0.0, -36.71444903425836, 0.0);
    rockpile1_40->scale = vec3(1.4999996948242187, 0.49999992370605467, 0.9999997711181641);
    Engine::main->addNode(rockpile1_40);
    Node* rockpile1_62 = rockpile1->copy();
    rockpile1_62->position += vec3(-43.38853454589844, 100.0566635131836, 74.31429290771484);
    rockpile1_62->eulerAngles = vec3(0.0, -36.71445244935294, 0.0);
    rockpile1_62->scale = vec3(0.9999999237060547, 0.49999996185302736, 0.9999999237060547);
    Engine::main->addNode(rockpile1_62);
    Node* rockpile1_63 = rockpile1->copy();
    rockpile1_63->position += vec3(-35.64524459838867, 100.05664825439453, 72.06964111328125);
    rockpile1_63->eulerAngles = vec3(0.0, 72.16633077025068, 0.0);
    rockpile1_63->scale = vec3(0.4999984359741211, 0.49999893188476563, 0.4999984359741211);
    Engine::main->addNode(rockpile1_63);
    PBRShader* fernShader = new PBRShader(0.3, 0.5);
    fernShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Fern_01_Albedo.png", 2.0, true));
    fernShader->setNormalMap(new Texture("/Resources/Game/Map/T_Fern_01_Normal.png", 2.0, true));
    Node* fern5 = new Node();
    fern5->loadModelFile("/Resources/Game/Map/Fern05lod0.dae");
    fern5->geometries[0]->setShader(fernShader);
    fern5->geometries[0]->setDoubleSided();
    fern5->position.x = MAPX;
    fern5->position.z = MAPZ;
    fern5->position.y  = MAPY;
    Node* fern8 = new Node();
    fern8->loadModelFile("/Resources/Game/Map/Fern08lod0.dae");
    fern8->geometries[0]->setShader(fernShader);
    fern8->geometries[0]->setDoubleSided();
    fern8->position.x = MAPX;
    fern8->position.z = MAPZ;
    fern8->position.y  = MAPY;
    Node* fern9 = new Node();
    fern9->loadModelFile("/Resources/Game/Map/Fern09lod0.dae");
    fern9->geometries[0]->setShader(fernShader);
    fern9->geometries[0]->setDoubleSided();
    fern9->position.x = MAPX;
    fern9->position.z = MAPZ;
    fern9->position.y  = MAPY;
    Node* fern5_66 = fern5->copy();
    fern5_66->position += vec3(-65.11994934082031, 100.00309753417969, 52.39829635620117);
    fern5_66->eulerAngles = vec3(179.999991348578, 7.24447514789352, 179.999991348578);
    fern5_66->scale = vec3(0.9999999237060547, 0.9999998474121093, 0.9999999237060547);
    Engine::main->addNode(fern5_66);
    Node* fern5_67 = fern5->copy();
    fern5_67->position += vec3(-64.06936645507812, 100.00309753417969, 40.02585983276367);
    fern5_67->eulerAngles = vec3(179.999991348578, 7.24447514789352, 179.999991348578);
    fern5_67->scale = vec3(0.9999999237060547, 0.9999998474121093, 0.9999999237060547);
    Engine::main->addNode(fern5_67);
    Node* fern5_68 = fern5->copy();
    fern5_68->position += vec3(-56.0262451171875, 100.00309753417969, 33.93038558959961);
    fern5_68->eulerAngles = vec3(179.999991348578, 7.24447514789352, 179.999991348578);
    fern5_68->scale = vec3(0.9999999237060547, 1.4999998474121095, 0.9999999237060547);
    Engine::main->addNode(fern5_68);
    Node* fern5_69 = fern5->copy();
    fern5_69->position += vec3(-38.990814208984375, 99.98937225341797, 45.542415618896484);
    fern5_69->eulerAngles = vec3(179.999991348578, 7.244470879025289, 179.999991348578);
    fern5_69->scale = vec3(0.9999999237060547, 1.4999998474121095, 0.9999999237060547);
    Engine::main->addNode(fern5_69);
    Node* fern8_70 = fern8->copy();
    fern8_70->position += vec3(-25.47951316833496, 99.76789855957031, 53.25028610229492);
    fern8_70->eulerAngles = vec3(-144.74781409863309, 50.47134136235073, -145.91270286157877);
    fern8_70->scale = vec3(0.9999515533447265, 1.4999337768554688, 0.9999526214599609);
    Engine::main->addNode(fern8_70);
    Node* fern9_71 = fern9->copy();
    fern9_71->position += vec3(-24.26594352722168, 100.00309753417969, 36.40979766845703);
    fern9_71->eulerAngles = vec3(0.0, 41.540271381006676, 0.0);
    fern9_71->scale = vec3(0.9999922180175781, 0.9999912261962891, 0.9999922180175781);
    Engine::main->addNode(fern9_71);
    Node* fern8_72 = fern8->copy();
    fern8_72->position += vec3(-82.17472839355469, 123.85626983642578, 43.794742584228516);
    fern8_72->eulerAngles = vec3(0.0, 16.681733009948154, 0.0);
    fern8_72->scale = vec3(0.9999980163574219, 0.9999948120117188, 0.9999980163574219);
    Engine::main->addNode(fern8_72);
    Node* fern8_73 = fern8->copy();
    fern8_73->position += vec3(-87.90583038330078, 123.98052215576172, 43.82664108276367);
    fern8_73->eulerAngles = vec3(0.0, 28.916476700368154, 0.0);
    fern8_73->scale = vec3(0.9999955749511719, 0.9999871063232422, 0.9999955749511719);
    Engine::main->addNode(fern8_73);
    Node* fern8_74 = fern8->copy();
    fern8_74->position += vec3(-86.30552673339844, 123.86573028564453, 54.4736328125);
    fern8_74->eulerAngles = vec3(-144.74781409863309, 50.47133794725614, -145.91270286157877);
    fern8_74->scale = vec3(0.9999514770507812, 1.4999337768554688, 0.9999525451660156);
    Engine::main->addNode(fern8_74);
    Node* fern8_75 = fern8->copy();
    fern8_75->position += vec3(-8.482683181762695, 123.85628509521484, 46.6224250793457);
    fern8_75->eulerAngles = vec3(0.0, -6.849894692655061, 0.0);
    fern8_75->scale = vec3(0.9999987030029297, 0.9999978637695313, 0.9999987030029297);
    Engine::main->addNode(fern8_75);
    Node* fern8_76 = fern8->copy();
    fern8_76->position += vec3(-16.194082260131836, 123.98052978515625, 43.935791015625);
    fern8_76->eulerAngles = vec3(0.0, 28.916469870178986, 0.0);
    fern8_76->scale = vec3(0.9999957275390625, 0.9999871826171876, 0.9999957275390625);
    Engine::main->addNode(fern8_76);
    Node* fern8_77 = fern8->copy();
    fern8_77->position += vec3(-11.031933784484863, 124.00096130371094, 54.33218002319336);
    fern8_77->eulerAngles = vec3(-144.74781409863309, 50.47133794725614, -145.91270286157877);
    fern8_77->scale = vec3(0.999951171875, 1.4999337768554688, 0.999952163696289);
    Engine::main->addNode(fern8_77);
    Node* fern8_78 = fern8->copy();
    fern8_78->position += vec3(-11.617449760437012, 127.277099609375, 55.502235412597656);
    fern8_78->eulerAngles = vec3(0.0, -52.28974262508322, 0.0);
    fern8_78->scale = vec3(0.9999998474121093, 0.9999999237060547, 0.7999998474121094);
    Engine::main->addNode(fern8_78);
    Node* fern8_79 = fern8->copy();
    fern8_79->position += vec3(-18.746118545532227, 117.63562774658203, 54.058956146240234);
    fern8_79->eulerAngles = vec3(1.8258480493246608e-05, -55.86639508962249, 88.40734582400376);
    fern8_79->scale = vec3(1.9998854064941407, 1.9998966979980468, 1.99994140625);
    Engine::main->addNode(fern8_79);
    Node* fern8_80 = fern8->copy();
    fern8_80->position += vec3(-18.89352798461914, 112.33396911621094, 44.039894104003906);
    fern8_80->eulerAngles = vec3(5.963598448172483e-06, 30.797206854371606, 88.40738680513878);
    fern8_80->scale = vec3(1.999837646484375, 1.9998529052734375, 1.9999134826660157);
    Engine::main->addNode(fern8_80);
    Node* fern5_81 = fern5->copy();
    fern5_81->position += vec3(-5.337573051452637, 105.82227325439453, 55.59061050415039);
    fern5_81->eulerAngles = vec3(20.879533122892138, 3.4150949921173744e-06, 66.71522509555521);
    fern5_81->scale = vec3(1.9999041748046875, 1.9999046325683594, 1.999943389892578);
    Engine::main->addNode(fern5_81);
    Node* fern9_82 = fern9->copy();
    fern9_82->position += vec3(-38.1777229309082, 100.09014892578125, 25.101539611816406);
    fern9_82->eulerAngles = vec3(0.0, 71.89996705299853, 0.0);
    fern9_82->scale = vec3(0.9999859619140625, 0.9999857330322266, 0.9999859619140625);
    Engine::main->addNode(fern9_82);
    Node* fern8_83 = fern8->copy();
    fern8_83->position += vec3(-30.06181526184082, 100.00310516357422, 29.864980697631836);
    fern8_83->eulerAngles = vec3(4.164655957675757e-06, 16.55002305708821, 1.2989961381160909e-06);
    fern8_83->scale = vec3(0.9999976348876953, 0.99999755859375, 0.9999976348876953);
    Engine::main->addNode(fern8_83);
    Node* fern8_84 = fern8->copy();
    fern8_84->position += vec3(-34.34769821166992, 100.93965148925781, 26.96869468688965);
    fern8_84->eulerAngles = vec3(4.053693376615357e-06, -10.741599451058104, -8.292625107656144e-07);
    fern8_84->scale = vec3(0.9999919128417969, 0.9999934387207031, 0.9999919128417969);
    Engine::main->addNode(fern8_84);
    Node* fern9_85 = fern9->copy();
    fern9_85->position += vec3(-71.11099243164062, 100.00310516357422, 33.38814163208008);
    fern9_85->eulerAngles = vec3(0.0, 71.89996705299853, 0.0);
    fern9_85->scale = vec3(0.9999859619140625, 0.9999857330322266, 0.9999859619140625);
    Engine::main->addNode(fern9_85);
    Node* fern9_86 = fern9->copy();
    fern9_86->position += vec3(-68.9703369140625, 101.14081573486328, 66.14180755615234);
    fern9_86->eulerAngles = vec3(0.0, 70.97032366544643, 0.0);
    fern9_86->scale = vec3(0.9999851989746094, 0.9999829864501953, 0.9999851989746094);
    Engine::main->addNode(fern9_86);
    PBRShader* ivyAtlasShader = new PBRShader(0.3, 0.5);
    ivyAtlasShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Ivy_Atlas_01_Albedo.png", 2.0, true));
    ivyAtlasShader->setNormalMap(new Texture("/Resources/Game/Map/T_Ivy_Atlas_01_Normal.png", 2.0, true));
    PBRShader* ivyTileableShader = new PBRShader(0.3, 0.5);
    ivyTileableShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Ivy_Tileable_01_Albedo.png", 2.0, true));
    ivyTileableShader->setNormalMap(new Texture("/Resources/Game/Map/T_Ivy_Tileable_01_Normal.png", 2.0, true));
    Node* ivy1 = new Node();
    ivy1->loadModelFile("/Resources/Game/Map/ivy01lod0.dae");
    ivy1->geometries[1]->setShader(ivyAtlasShader);
    ivy1->geometries[1]->setDoubleSided();
    ivy1->geometries[0]->setShader(ivyTileableShader);
    ivy1->geometries[0]->setDoubleSided();
    ivy1->position.x = MAPX;
    ivy1->position.z = MAPZ;
    ivy1->position.y  = MAPY;
    Node* ivy3 = new Node();
    ivy3->loadModelFile("/Resources/Game/Map/ivy03lod0.dae");
    ivy3->geometries[1]->setShader(ivyTileableShader);
    ivy3->geometries[1]->setDoubleSided();
    ivy3->geometries[0]->setShader(ivyAtlasShader);
    ivy3->geometries[0]->setDoubleSided();
    ivy3->position.x = MAPX;
    ivy3->position.z = MAPZ;
    ivy3->position.y  = MAPY;
    Node* ivy4 = new Node();
    ivy4->loadModelFile("/Resources/Game/Map/ivy04lod0.dae");
    ivy4->geometries[1]->setShader(ivyAtlasShader);
    ivy4->geometries[1]->setDoubleSided();
    ivy4->geometries[0]->setShader(ivyTileableShader);
    ivy4->geometries[0]->setDoubleSided();
    ivy4->position.x = MAPX;
    ivy4->position.z = MAPZ;
    ivy4->position.y  = MAPY;
    Node* ivy5 = new Node();
    ivy5->loadModelFile("/Resources/Game/Map/ivy05lod0.dae");
    ivy5->geometries[1]->setShader(ivyAtlasShader);
    ivy5->geometries[1]->setDoubleSided();
    ivy5->geometries[0]->setShader(ivyTileableShader);
    ivy5->geometries[0]->setDoubleSided();
    ivy5->position.x = MAPX;
    ivy5->position.z = MAPZ;
    ivy5->position.y  = MAPY;
    Node* ivy7 = new Node();
    ivy7->loadModelFile("/Resources/Game/Map/ivy07lod0.dae");
    ivy7->geometries[1]->setShader(ivyAtlasShader);
    ivy7->geometries[1]->setDoubleSided();
    ivy7->geometries[0]->setShader(ivyTileableShader);
    ivy7->geometries[0]->setDoubleSided();
    ivy7->position.x = MAPX;
    ivy7->position.z = MAPZ;
    ivy7->position.y  = MAPY;
    Node* ivy5_88 = ivy5->copy();
    ivy5_88->position += vec3(-79.29117584228516, 101.04862213134766, 52.570308685302734);
    ivy5_88->eulerAngles = vec3(179.999991348578, -5.008956130975331e-06, 179.999991348578);
    ivy5_88->scale = vec3(0.8253911590576172, 0.8253926849365234, 0.8253799438476562);
    Engine::main->addNode(ivy5_88);
    Node* ivy7_89 = ivy7->copy();
    ivy7_89->position += vec3(-79.61756896972656, 112.11808776855469, 52.20686721801758);
    ivy7_89->eulerAngles = vec3(179.999991348578, -5.008955723864332e-06, 179.999991348578);
    ivy7_89->scale = vec3(0.9999516296386719, 0.9999855041503907, 0.9999516296386719);
    Engine::main->addNode(ivy7_89);
    Node* ivy4_90 = ivy4->copy();
    ivy4_90->position += vec3(-79.37498474121094, 111.22118377685547, 49.53144454956055);
    ivy4_90->eulerAngles = vec3(-9.75279219156093e-13, -90.00000250447816, 0.0);
    ivy4_90->scale = vec3(0.9999996948242188, 0.9999999237060547, 0.9999996948242188);
    Engine::main->addNode(ivy4_90);
    Node* ivy4_91 = ivy4->copy();
    ivy4_91->position += vec3(-79.37498474121094, 110.68834686279297, 52.268470764160156);
    ivy4_91->eulerAngles = vec3(-9.752791220932669e-13, -90.00000250447816, 0.0);
    ivy4_91->scale = vec3(0.9999995422363281, 0.9999999237060547, 0.9999995422363281);
    Engine::main->addNode(ivy4_91);
    Node* ivy4_92 = ivy4->copy();
    ivy4_92->position += vec3(-79.3749771118164, 110.64950561523438, 51.643978118896484);
    ivy4_92->eulerAngles = vec3(89.99992054220813, 66.57366942500668, 89.99993420258646);
    ivy4_92->scale = vec3(0.9999934387207031, 0.9999971771240235, 0.9999938201904297);
    Engine::main->addNode(ivy4_92);
    Node* ivy4_93 = ivy4->copy();
    ivy4_93->position += vec3(-79.37496948242188, 109.9786148071289, 50.99808120727539);
    ivy4_93->eulerAngles = vec3(-89.99987273088394, 85.48186651946058, -89.99987273088394);
    ivy4_93->scale = vec3(0.9999937438964843, 0.9999947357177734, 0.9999979400634765);
    Engine::main->addNode(ivy4_93);
    Node* ivy4_94 = ivy4->copy();
    ivy4_94->position += vec3(-79.37496185302734, 109.99065399169922, 53.20085525512695);
    ivy4_94->eulerAngles = vec3(90.00002299504567, 77.30708630943913, 90.00002299504567);
    ivy4_94->scale = vec3(0.9999955749511719, 0.9999883270263672, 1.000003662109375);
    Engine::main->addNode(ivy4_94);
    Node* ivy4_95 = ivy4->copy();
    ivy4_95->position += vec3(-79.37495422363281, 109.16407012939453, 53.34881591796875);
    ivy4_95->eulerAngles = vec3(1.4393987614435415, -90.00000250447816, 0.0);
    ivy4_95->scale = vec3(0.9999887084960938, 0.9999848937988282, 0.9999958038330078);
    Engine::main->addNode(ivy4_95);
    Node* ivy7_96 = ivy7->copy();
    ivy7_96->position += vec3(-79.6175765991211, 124.12682342529297, 46.39894104003906);
    ivy7_96->eulerAngles = vec3(179.999991348578, -5.008955723864332e-06, 179.999991348578);
    ivy7_96->scale = vec3(0.9999517059326172, 0.9999855804443359, 0.9999517059326172);
    Engine::main->addNode(ivy7_96);
    Node* ivy3_97 = ivy3->copy();
    ivy3_97->position += vec3(-79.72660064697266, 123.70853424072266, 55.90580368041992);
    ivy3_97->eulerAngles = vec3(8.671168491956755e-08, 0.14541040520048734, -89.99988639126228);
    ivy3_97->scale = vec3(1.4999984741210937, 1.9999978637695313, 1.2998922729492188);
    Engine::main->addNode(ivy3_97);
    Node* ivy4_98 = ivy4->copy();
    ivy4_98->position += vec3(-83.89335632324219, 128.86044311523438, 43.681488037109375);
    ivy4_98->eulerAngles = vec3(0.0, 90.00000250447816, 0.0);
    ivy4_98->scale = vec3(0.9999984741210938, 0.9999998474121093, 0.9999984741210938);
    Engine::main->addNode(ivy4_98);
    Node* ivy4_99 = ivy4->copy();
    ivy4_99->position += vec3(-79.56023406982422, 124.0224609375, 51.303104400634766);
    ivy4_99->eulerAngles = vec3(-90.00002982523485, 1.1474905635823596, -1.4944037181912204e-06);
    ivy4_99->scale = vec3(1.3999996948242188, 1.3999996948242188, 1.399998321533203);
    Engine::main->addNode(ivy4_99);
    Node* ivy7_100 = ivy7->copy();
    ivy7_100->position += vec3(-87.56631469726562, 123.96558380126953, 55.5313835144043);
    ivy7_100->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    ivy7_100->scale = vec3(0.9999516296386719, 0.9999855804443359, 0.9999516296386719);
    Engine::main->addNode(ivy7_100);
    Node* ivy5_101 = ivy5->copy();
    ivy5_101->position += vec3(-67.56355285644531, 121.14012145996094, 28.94426918029785);
    ivy5_101->eulerAngles = vec3(4.145316085587963, 58.834436717978605, -178.23433280661635);
    ivy5_101->scale = vec3(1.0000023651123047, 1.0000018310546874, 0.9999864196777344);
    Engine::main->addNode(ivy5_101);
    Node* ivy4_102 = ivy4->copy();
    ivy4_102->position += vec3(-66.17664337158203, 119.48948669433594, 28.184785842895508);
    ivy4_102->eulerAngles = vec3(10.575289467410169, 32.44407133119381, 17.065598179039334);
    ivy4_102->scale = vec3(0.9999894714355468, 0.9999943542480468, 0.999992904663086);
    Engine::main->addNode(ivy4_102);
    Node* ivy4_103 = ivy4->copy();
    ivy4_103->position += vec3(-69.4089126586914, 113.94983673095703, 30.220815658569336);
    ivy4_103->eulerAngles = vec3(-6.404154412985912, 33.40596687200671, -13.64545779178361);
    ivy4_103->scale = vec3(0.9999864959716797, 0.9999892425537109, 0.9999882507324219);
    Engine::main->addNode(ivy4_103);
    Node* ivy4_104 = ivy4->copy();
    ivy4_104->position += vec3(-69.08358764648438, 113.28875732421875, 29.985509872436523);
    ivy4_104->eulerAngles = vec3(7.676014183617743, 33.16672583594867, 11.717137440964454);
    ivy4_104->scale = vec3(0.9999813842773437, 0.9999842071533203, 0.9999819946289062);
    Engine::main->addNode(ivy4_104);
    Node* ivy4_105 = ivy4->copy();
    ivy4_105->position += vec3(-68.86567687988281, 114.33499145507812, 29.865022659301758);
    ivy4_105->eulerAngles = vec3(28.71855147859953, 18.92553894475655, 57.25330256663401);
    ivy4_105->scale = vec3(0.9999734497070313, 0.9999800109863282, 0.9999772644042969);
    Engine::main->addNode(ivy4_105);
    Node* ivy4_106 = ivy4->copy();
    ivy4_106->position += vec3(-74.21525573730469, 112.7181625366211, 36.291263580322266);
    ivy4_106->eulerAngles = vec3(-12.880810430237865, 54.2116451594035, -23.8966035566579);
    ivy4_106->scale = vec3(1.9999980163574218, 1.999996337890625, 1.9999809265136719);
    Engine::main->addNode(ivy4_106);
    Node* ivy4_107 = ivy4->copy();
    ivy4_107->position += vec3(-73.61835479736328, 110.91771697998047, 35.47039031982422);
    ivy4_107->eulerAngles = vec3(15.495450386974705, 51.5243038153674, 21.02906133174935);
    ivy4_107->scale = vec3(1.999954071044922, 1.9999787902832031, 1.9999578857421876);
    Engine::main->addNode(ivy4_107);
    Node* ivy4_108 = ivy4->copy();
    ivy4_108->position += vec3(-73.2579574584961, 111.5736312866211, 34.966148376464844);
    ivy4_108->eulerAngles = vec3(39.051213843670624, 39.460936401412184, 53.45299214262809);
    ivy4_108->scale = vec3(1.0, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(ivy4_108);
    Node* ivy3_109 = ivy3->copy();
    ivy3_109->position += vec3(-18.731203079223633, 123.95829010009766, 42.95719909667969);
    ivy3_109->eulerAngles = vec3(0.0, 90.00000250447816, 0.0);
    ivy3_109->scale = vec3(1.2999992370605469, 1.2999998474121093, 1.2999992370605469);
    Engine::main->addNode(ivy3_109);
    Node* ivy3_110 = ivy3->copy();
    ivy3_110->position += vec3(-13.334854125976562, 115.81239318847656, 55.619903564453125);
    ivy3_110->eulerAngles = vec3(6.670128080084676e-09, 0.14541059196347245, -89.999995674289);
    ivy3_110->scale = vec3(1.2998928833007812, 1.2999378967285156, 1.2998922729492188);
    Engine::main->addNode(ivy3_110);
    Node* ivy3_111 = ivy3->copy();
    ivy3_111->position += vec3(-6.0654296875, 123.71343231201172, 55.785438537597656);
    ivy3_111->eulerAngles = vec3(3.335064437611674e-08, 0.14541049858197988, -89.99995469315398);
    ivy3_111->scale = vec3(1.4999993896484376, 1.9999992370605468, 1.2998922729492188);
    Engine::main->addNode(ivy3_111);
    Node* ivy4_112 = ivy4->copy();
    ivy4_112->position += vec3(-11.772525787353516, 128.86044311523438, 43.56110763549805);
    ivy4_112->eulerAngles = vec3(0.0, 90.00000250447816, 0.0);
    ivy4_112->scale = vec3(0.9999990844726563, 0.9999999237060547, 0.9999990844726563);
    Engine::main->addNode(ivy4_112);
    Node* ivy4_113 = ivy4->copy();
    ivy4_113->position += vec3(-6.971695423126221, 124.02246856689453, 49.58026123046875);
    ivy4_113->eulerAngles = vec3(-90.00002982523485, 1.1474912039125944, -1.3876605373045617e-06);
    ivy4_113->scale = vec3(1.3999998474121094, 1.3999998474121094, 1.399999237060547);
    Engine::main->addNode(ivy4_113);
    Node* ivy4_114 = ivy4->copy();
    ivy4_114->position += vec3(-17.001455307006836, 107.73348236083984, 55.613040924072266);
    ivy4_114->eulerAngles = vec3(0.0, -0.0, -174.9996508383467);
    ivy4_114->scale = vec3(1.4999485778808594, 1.999944305419922, 1.4999603271484374);
    Engine::main->addNode(ivy4_114);
    Node* ivy5_115 = ivy5->copy();
    ivy5_115->position += vec3(-18.838159561157227, 118.68336486816406, 52.8438606262207);
    ivy5_115->eulerAngles = vec3(3.0568443328500363, -0.0, 0.0);
    ivy5_115->scale = vec3(0.9999769592285156, 0.9999753570556641, 0.9999753570556641);
    Engine::main->addNode(ivy5_115);
    Node* ivy7_116 = ivy7->copy();
    ivy7_116->position += vec3(-30.78074836730957, 111.96758270263672, 28.348560333251953);
    ivy7_116->eulerAngles = vec3(0.0, 61.34920308735058, 0.0);
    ivy7_116->scale = vec3(0.9999604797363282, 0.9999726867675781, 0.9999604797363282);
    Engine::main->addNode(ivy7_116);
    Node* ivy7_117 = ivy7->copy();
    ivy7_117->position += vec3(-18.277198791503906, 111.88285064697266, 49.1378288269043);
    ivy7_117->eulerAngles = vec3(0.0, -0.0, 0.0);
    ivy7_117->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(ivy7_117);
    Node* ivy7_118 = ivy7->copy();
    ivy7_118->position += vec3(-13.880724906921387, 123.96559143066406, 55.54964828491211);
    ivy7_118->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    ivy7_118->scale = vec3(0.9999517822265624, 0.9999856567382812, 0.9999517822265624);
    Engine::main->addNode(ivy7_118);
    Node* ivy1_119 = ivy1->copy();
    ivy1_119->position += vec3(-25.523183822631836, 112.03187561035156, 33.95985794067383);
    ivy1_119->eulerAngles = vec3(0.0, 34.323537900200805, 0.0);
    ivy1_119->scale = vec3(0.9999864959716797, 0.9999863433837891, 0.9999864959716797);
    Engine::main->addNode(ivy1_119);
    Node* ivy1_120 = ivy1->copy();
    ivy1_120->position += vec3(-38.82855987548828, 117.23155212402344, 24.035188674926758);
    ivy1_120->eulerAngles = vec3(-152.16300897105742, 58.671502555327955, 3.2840976645629987e-06);
    ivy1_120->scale = vec3(0.9999720001220703, 0.9999440765380859, 0.9999421691894531);
    Engine::main->addNode(ivy1_120);
    Node* ivy5_121 = ivy5->copy();
    ivy5_121->position += vec3(-19.967988967895508, 108.75482177734375, 42.52937698364258);
    ivy5_121->eulerAngles = vec3(-88.60811923465629, 35.14794173302134, -0.05031372474209276);
    ivy5_121->scale = vec3(0.9999610137939453, 0.9999594879150391, 0.9999606323242187);
    Engine::main->addNode(ivy5_121);
    Node* ivy3_122 = ivy3->copy();
    ivy3_122->position += vec3(-41.34332275390625, 112.246826171875, 22.905677795410156);
    ivy3_122->eulerAngles = vec3(1.3340256160169352e-08, 0.14541048524176667, -89.99996835353231);
    ivy3_122->scale = vec3(1.4999990844726563, 1.9999990844726563, 1.2998922729492188);
    Engine::main->addNode(ivy3_122);
    Node* ivy4_123 = ivy4->copy();
    ivy4_123->position += vec3(-50.172523498535156, 111.99285125732422, 22.900985717773438);
    ivy4_123->eulerAngles = vec3(0.0, -0.0, 90.68429183666505);
    ivy4_123->scale = vec3(1.4999395751953124, 1.9999432373046875, 1.4999507141113282);
    Engine::main->addNode(ivy4_123);
    Node* ivy4_124 = ivy4->copy();
    ivy4_124->position += vec3(-48.57421112060547, 111.25130462646484, 22.900978088378906);
    ivy4_124->eulerAngles = vec3(0.0, 0.0, -2.122764097101783);
    ivy4_124->scale = vec3(1.9999824523925782, 1.9999221801757812, 1.9999847412109375);
    Engine::main->addNode(ivy4_124);
    Node* ivy4_125 = ivy4->copy();
    ivy4_125->position += vec3(-47.5992431640625, 112.03038787841797, 22.900976181030273);
    ivy4_125->eulerAngles = vec3(0.0, -0.0, 21.525942225942146);
    ivy4_125->scale = vec3(1.999979248046875, 1.9999142456054688, 1.9999734497070312);
    Engine::main->addNode(ivy4_125);
    Node* ivy4_126 = ivy4->copy();
    ivy4_126->position += vec3(-46.1629753112793, 112.00387573242188, 22.900983810424805);
    ivy4_126->eulerAngles = vec3(0.0, -0.0, 60.128907829857766);
    ivy4_126->scale = vec3(1.4999295043945313, 1.9999412536621093, 1.4999403381347656);
    Engine::main->addNode(ivy4_126);
    Node* ivy4_127 = ivy4->copy();
    ivy4_127->position += vec3(-42.937442779541016, 112.3630599975586, 22.900981903076172);
    ivy4_127->eulerAngles = vec3(0.0, 0.0, -86.3782468857547);
    ivy4_127->scale = vec3(1.499894256591797, 1.9999018859863282, 1.499922637939453);
    Engine::main->addNode(ivy4_127);
    Node* ivy5_128 = ivy5->copy();
    ivy5_128->position += vec3(-55.899845123291016, 108.11312866210938, 22.929000854492188);
    ivy5_128->eulerAngles = vec3(-88.23422101911146, -90.00000250447816, 0.0);
    ivy5_128->scale = vec3(0.9999549102783203, 0.9999645233154297, 0.9999526214599609);
    Engine::main->addNode(ivy5_128);
    Node* ivy7_129 = ivy7->copy();
    ivy7_129->position += vec3(-53.87495422363281, 123.96278381347656, 22.6284236907959);
    ivy7_129->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    ivy7_129->scale = vec3(0.9999516296386719, 0.9999855804443359, 0.9999516296386719);
    Engine::main->addNode(ivy7_129);
    PBRShader* grassShader = new PBRShader(0.3, 0.5);
    grassShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Grass_03_Albedo.png", 2.0, true));
    grassShader->setNormalMap(new Texture("/Resources/Game/Map/T_Grass_03_Normal.png", 2.0, true));
    Node* grass2 = new Node();
    grass2->loadModelFile("/Resources/Game/Map/grassDungeon02lod2.dae");
    grass2->geometries[0]->setShader(grassShader);
    grass2->geometries[0]->setDoubleSided();
    grass2->position.x = MAPX;
    grass2->position.z = MAPZ;
    grass2->position.y  = MAPY;
    Node* grass3 = new Node();
    grass3->loadModelFile("/Resources/Game/Map/grassLow03lod0.dae");
    grass3->geometries[0]->setShader(grassShader);
    grass3->geometries[0]->setDoubleSided();
    grass3->position.x = MAPX;
    grass3->position.z = MAPZ;
    grass3->position.y  = MAPY;
    Node* grass4 = new Node();
    grass4->loadModelFile("/Resources/Game/Map/grassDungeon04lod0.dae");
    grass4->geometries[0]->setShader(grassShader);
    grass4->geometries[0]->setDoubleSided();
    grass4->position.x = MAPX;
    grass4->position.z = MAPZ;
    grass4->position.y  = MAPY;
    Node* grass5 = new Node();
    grass5->loadModelFile("/Resources/Game/Map/grassPatch05lod0.dae");
    grass5->geometries[0]->setShader(grassShader);
    grass5->geometries[0]->setDoubleSided();
    grass5->position.x = MAPX;
    grass5->position.z = MAPZ;
    grass5->position.y  = MAPY;
    Node* grass10 = new Node();
    grass10->loadModelFile("/Resources/Game/Map/grassPatch10lod0.dae");
    grass10->geometries[0]->setShader(grassShader);
    grass10->geometries[0]->setDoubleSided();
    grass10->position.x = MAPX;
    grass10->position.z = MAPZ;
    grass10->position.y  = MAPY;
    Node* grass11 = new Node();
    grass11->loadModelFile("/Resources/Game/Map/grassPatch11lod0.dae");
    grass11->geometries[0]->setShader(grassShader);
    grass11->geometries[0]->setDoubleSided();
    grass11->position.x = MAPX;
    grass11->position.z = MAPZ;
    grass11->position.y  = MAPY;
    Node* grass11_130 = grass11->copy();
    grass11_130->position += vec3(-63.387237548828125, 100.00638580322266, 56.11091995239258);
    grass11_130->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_130->scale = vec3(1.9999732971191406, 1.999985809326172, 1.9999732971191406);
    Engine::main->addNode(grass11_130);
    Node* grass11_131 = grass11->copy();
    grass11_131->position += vec3(-64.56271362304688, 100.00638580322266, 47.335838317871094);
    grass11_131->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_131->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass11_131);
    Node* grass11_132 = grass11->copy();
    grass11_132->position += vec3(-57.26655960083008, 100.00638580322266, 54.91959762573242);
    grass11_132->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_132->scale = vec3(0.9999997711181641, 0.9999999237060547, 0.9999997711181641);
    Engine::main->addNode(grass11_132);
    Node* grass11_133 = grass11->copy();
    grass11_133->position += vec3(-49.26445007324219, 100.00638580322266, 56.9714241027832);
    grass11_133->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_133->scale = vec3(0.9999997711181641, 0.9999999237060547, 0.9999997711181641);
    Engine::main->addNode(grass11_133);
    Node* grass11_134 = grass11->copy();
    grass11_134->position += vec3(-45.142024993896484, 100.00638580322266, 52.089210510253906);
    grass11_134->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_134->scale = vec3(1.2999998474121093, 1.2999998474121093, 1.2999998474121093);
    Engine::main->addNode(grass11_134);
    Node* grass11_135 = grass11->copy();
    grass11_135->position += vec3(-34.45664978027344, 100.00190734863281, 59.23859405517578);
    grass11_135->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_135->scale = vec3(1.2999996948242187, 1.2999998474121093, 1.2999996948242187);
    Engine::main->addNode(grass11_135);
    Node* grass11_136 = grass11->copy();
    grass11_136->position += vec3(-30.237443923950195, 100.00190734863281, 44.97317886352539);
    grass11_136->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_136->scale = vec3(1.2999995422363282, 1.2999998474121093, 1.2999995422363282);
    Engine::main->addNode(grass11_136);
    Node* grass2_137 = grass2->copy();
    grass2_137->position += vec3(-83.5254898071289, 123.82551574707031, 45.177303314208984);
    grass2_137->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_137->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass2_137);
    Node* grass2_138 = grass2->copy();
    grass2_138->position += vec3(-85.83818054199219, 123.90988159179688, 42.74276351928711);
    grass2_138->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_138->scale = vec3(0.9999998474121093, 1.4999996948242187, 0.9999998474121093);
    Engine::main->addNode(grass2_138);
    Node* grass2_139 = grass2->copy();
    grass2_139->position += vec3(-85.8608169555664, 123.90988159179688, 43.18954086303711);
    grass2_139->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_139->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass2_139);
    Node* grass2_140 = grass2->copy();
    grass2_140->position += vec3(-89.72710418701172, 124.68132019042969, 42.961978912353516);
    grass2_140->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_140->scale = vec3(0.9999998474121093, 0.49999992370605467, 0.9999998474121093);
    Engine::main->addNode(grass2_140);
    Node* grass2_141 = grass2->copy();
    grass2_141->position += vec3(-9.745713233947754, 123.82552337646484, 45.056922912597656);
    grass2_141->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_141->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass2_141);
    Node* grass2_142 = grass2->copy();
    grass2_142->position += vec3(-12.058404922485352, 123.9098892211914, 42.62238311767578);
    grass2_142->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_142->scale = vec3(0.9999999237060547, 1.4999998474121095, 0.9999999237060547);
    Engine::main->addNode(grass2_142);
    Node* grass2_143 = grass2->copy();
    grass2_143->position += vec3(-12.081034660339355, 123.9098892211914, 43.06916046142578);
    grass2_143->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_143->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass2_143);
    Node* grass2_144 = grass2->copy();
    grass2_144->position += vec3(-15.9473237991333, 124.68132781982422, 42.84159851074219);
    grass2_144->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_144->scale = vec3(0.9999999237060547, 0.49999996185302736, 0.9999999237060547);
    Engine::main->addNode(grass2_144);
    Node* grass2_145 = grass2->copy();
    grass2_145->position += vec3(-21.78997230529785, 100.00311279296875, 40.10075759887695);
    grass2_145->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_145->scale = vec3(0.9999998474121093, 1.4999996948242187, 0.9999998474121093);
    Engine::main->addNode(grass2_145);
    Node* grass2_146 = grass2->copy();
    grass2_146->position += vec3(-11.501194953918457, 126.98491668701172, 54.783016204833984);
    grass2_146->eulerAngles = vec3(0.0, -0.0, 15.007303597183064);
    grass2_146->scale = vec3(0.9999978637695313, 0.9999978637695313, 0.9999974822998047);
    Engine::main->addNode(grass2_146);
    Node* grass4_147 = grass4->copy();
    grass4_147->position += vec3(-22.828813552856445, 100.00310516357422, 40.645965576171875);
    grass4_147->eulerAngles = vec3(0.0, 63.738751598668706, 0.0);
    grass4_147->scale = vec3(0.9999850463867187, 0.9999871063232422, 0.9999850463867187);
    Engine::main->addNode(grass4_147);
    Node* grass4_148 = grass4->copy();
    grass4_148->position += vec3(-7.582468509674072, 123.84445190429688, 51.6343879699707);
    grass4_148->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass4_148->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass4_148);
    Node* grass4_149 = grass4->copy();
    grass4_149->position += vec3(-16.990386962890625, 123.85985565185547, 52.83941650390625);
    grass4_149->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass4_149->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass4_149);
    Node* grass4_150 = grass4->copy();
    grass4_150->position += vec3(-81.36224365234375, 123.84444427490234, 51.75476837158203);
    grass4_150->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass4_150->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass4_150);
    Node* grass4_151 = grass4->copy();
    grass4_151->position += vec3(-90.7701644897461, 123.85984802246094, 52.95979690551758);
    grass4_151->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass4_151->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass4_151);
    Node* grass5_152 = grass2->copy();
    grass5_152->position += vec3(-90.6206283569336, 123.92105865478516, 44.372467041015625);
    grass5_152->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass5_152->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass5_152);
    Node* grass5_153 = grass2->copy();
    grass5_153->position += vec3(-16.840848922729492, 123.92106628417969, 44.2520866394043);
    grass5_153->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass5_153->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass5_153);
    Node* grass3_154 = grass3->copy();
    grass3_154->position += vec3(-89.78417205810547, 123.94147491455078, 54.2829475402832);
    grass3_154->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass3_154->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass3_154);
    Node* grass3_155 = grass3->copy();
    grass3_155->position += vec3(-16.004398345947266, 123.94148254394531, 54.162567138671875);
    grass3_155->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass3_155->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass3_155);
    Node* grass11_157 = grass11->copy();
    grass11_157->position += vec3(-18.96771812438965, 100.00312042236328, 54.751712799072266);
    grass11_157->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass11_157->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass11_157);
    Node* grass11_158 = grass11->copy();
    grass11_158->position += vec3(-15.942159652709961, 100.00311279296875, 56.49775695800781);
    grass11_158->eulerAngles = vec3(0.0, 40.832622801858335, 0.0);
    grass11_158->scale = vec3(1.9999998474121095, 1.9999998474121095, 1.9999998474121095);
    Engine::main->addNode(grass11_158);
    Node* grass11_159 = grass11->copy();
    grass11_159->position += vec3(-5.512401103973389, 100.00311279296875, 56.64284896850586);
    grass11_159->eulerAngles = vec3(0.0, 40.83261938676375, 0.0);
    grass11_159->scale = vec3(1.9999998474121095, 3.999999694824219, 2.0);
    Engine::main->addNode(grass11_159);
    Node* grass11_160 = grass11->copy();
    grass11_160->position += vec3(-21.643817901611328, 100.00310516357422, 41.203006744384766);
    grass11_160->eulerAngles = vec3(0.0, 40.83263304714209, 0.0);
    grass11_160->scale = vec3(1.9999995422363281, 1.9999996948242187, 1.9999995422363281);
    Engine::main->addNode(grass11_160);
    Node* grass11_161 = grass11->copy();
    grass11_161->position += vec3(-61.79794692993164, 100.44695281982422, 26.338220596313477);
    grass11_161->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass11_161->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass11_161);
    Node* grass5_162 = grass2->copy();
    grass5_162->position += vec3(-25.449129104614258, 99.78058624267578, 36.197357177734375);
    grass5_162->eulerAngles = vec3(0.0, 18.544149719239503, 0.0);
    grass5_162->scale = vec3(0.9999955749511719, 0.9999953460693359, 0.9999955749511719);
    Engine::main->addNode(grass5_162);
    Node* grass10_164 = grass10->copy();
    grass10_164->position += vec3(-38.613380432128906, 99.93116760253906, 24.195659637451172);
    grass10_164->eulerAngles = vec3(0.0, 20.775080747462425, 0.0);
    grass10_164->scale = vec3(0.999989013671875, 0.9999886322021484, 0.999989013671875);
    Engine::main->addNode(grass10_164);
    Node* grass10_165 = grass10->copy();
    grass10_165->position += vec3(-39.16757583618164, 100.26509094238281, 24.7023868560791);
    grass10_165->eulerAngles = vec3(0.0, 77.51820745668421, 0.0);
    grass10_165->scale = vec3(0.9999831390380859, 0.9999818420410156, 0.9999831390380859);
    Engine::main->addNode(grass10_165);
    Node* grass5_166 = grass2->copy();
    grass5_166->position += vec3(-32.15500259399414, 100.01226043701172, 32.10586166381836);
    grass5_166->eulerAngles = vec3(0.0, 18.544149719239503, 0.0);
    grass5_166->scale = vec3(0.9999954986572266, 0.9999953460693359, 0.9999954986572266);
    Engine::main->addNode(grass5_166);
    Node* grass5_167 = grass2->copy();
    grass5_167->position += vec3(-33.379920959472656, 100.01225280761719, 32.66874313354492);
    grass5_167->eulerAngles = vec3(0.0, 70.65213247277222, 0.0);
    grass5_167->scale = vec3(0.9999906158447266, 0.9999907684326171, 0.9999906158447266);
    Engine::main->addNode(grass5_167);
    Node* grass11_168 = grass11->copy();
    grass11_168->position += vec3(-26.81464385986328, 100.00311279296875, 32.4791145324707);
    grass11_168->eulerAngles = vec3(0.0, 40.83262621695292, 0.0);
    grass11_168->scale = vec3(1.9999990844726563, 1.9999993896484376, 1.9999990844726563);
    Engine::main->addNode(grass11_168);
    Node* grass11_169 = grass11->copy();
    grass11_169->position += vec3(-36.10348892211914, 100.364990234375, 26.146657943725586);
    grass11_169->eulerAngles = vec3(0.0, 40.83262621695292, 0.0);
    grass11_169->scale = vec3(1.9999990844726563, 1.9999993896484376, 1.9999990844726563);
    Engine::main->addNode(grass11_169);
    Node* grass11_170 = grass11->copy();
    grass11_170->position += vec3(-35.56925964355469, 100.35533905029297, 27.244781494140625);
    grass11_170->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_170->scale = vec3(1.999977569580078, 2.499988861083984, 1.999977569580078);
    Engine::main->addNode(grass11_170);
    Node* grass10_173 = grass10->copy();
    grass10_173->position += vec3(-56.994503021240234, 100.00296783447266, 26.642885208129883);
    grass10_173->eulerAngles = vec3(0.0, 77.51820745668421, 0.0);
    grass10_173->scale = vec3(0.9999829864501953, 0.9999818420410156, 0.9999829864501953);
    Engine::main->addNode(grass10_173);
    Node* grass10_174 = grass10->copy();
    grass10_174->position += vec3(-56.951194763183594, 100.00210571289062, 23.13821792602539);
    grass10_174->eulerAngles = vec3(179.999991348578, 40.529580968763206, 179.999991348578);
    grass10_174->scale = vec3(0.9999829864501953, 0.9999690246582031, 0.9999829864501953);
    Engine::main->addNode(grass10_174);
    Node* grass3_175 = grass3->copy();
    grass3_175->position += vec3(-56.59413528442383, 100.0021743774414, 23.659265518188477);
    grass3_175->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass3_175->scale = vec3(0.9999997711181641, 0.9999997711181641, 0.9999997711181641);
    Engine::main->addNode(grass3_175);
    Node* grass11_177 = grass11->copy();
    grass11_177->position += vec3(-58.926273345947266, 100.0025863647461, 24.463552474975586);
    grass11_177->eulerAngles = vec3(0.0, 37.737163994535635, 0.0);
    grass11_177->scale = vec3(0.9999957275390625, 0.9999951171875, 0.9999957275390625);
    Engine::main->addNode(grass11_177);
    Node* grass11_178 = grass11->copy();
    grass11_178->position += vec3(-19.932376861572266, 100.00309753417969, 52.64901351928711);
    grass11_178->eulerAngles = vec3(0.0, 40.832622801858335, 0.0);
    grass11_178->scale = vec3(1.9999993896484376, 1.9999995422363281, 1.9999993896484376);
    Engine::main->addNode(grass11_178);
    Node* grass10_179 = grass10->copy();
    grass10_179->position += vec3(-17.627302169799805, 99.67961120605469, 55.84433364868164);
    grass10_179->eulerAngles = vec3(0.0, 20.77509782293535, 0.0);
    grass10_179->scale = vec3(0.9999890899658204, 0.9999887084960938, 0.9999890899658204);
    Engine::main->addNode(grass10_179);
    Node* grass2_180 = grass2->copy();
    grass2_180->position += vec3(-22.68814468383789, 103.09507751464844, 38.547603607177734);
    grass2_180->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_180->scale = vec3(0.999997787475586, 0.999997787475586, 0.9999974060058594);
    Engine::main->addNode(grass2_180);
    Node* grass11_181 = grass11->copy();
    grass11_181->position += vec3(-72.0050277709961, 100.00310516357422, 33.92647171020508);
    grass11_181->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_181->scale = vec3(1.9999774169921876, 2.499988861083984, 1.9999774169921876);
    Engine::main->addNode(grass11_181);
    Node* grass5_182 = grass2->copy();
    grass5_182->position += vec3(-73.06846618652344, 100.00310516357422, 35.848262786865234);
    grass5_182->eulerAngles = vec3(0.0, 18.544149719239503, 0.0);
    grass5_182->scale = vec3(0.9999954986572266, 0.9999953460693359, 0.9999954986572266);
    Engine::main->addNode(grass5_182);
    Node* grass11_183 = grass11->copy();
    grass11_183->position += vec3(-78.207763671875, 100.06587219238281, 51.04287338256836);
    grass11_183->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_183->scale = vec3(1.9999771118164062, 2.499988861083984, 1.9999771118164062);
    Engine::main->addNode(grass11_183);
    Node* grass11_184 = grass11->copy();
    grass11_184->position += vec3(-78.32767486572266, 100.06586456298828, 52.302249908447266);
    grass11_184->eulerAngles = vec3(0.0, 71.19237311536354, 0.0);
    grass11_184->scale = vec3(1.9999839782714843, 0.9999911499023437, 1.9999839782714843);
    Engine::main->addNode(grass11_184);
    Node* grass5_185 = grass2->copy();
    grass5_185->position += vec3(-78.69593811035156, 99.99927520751953, 56.0202522277832);
    grass5_185->eulerAngles = vec3(0.0, 18.544149719239503, 0.0);
    grass5_185->scale = vec3(0.9999953460693359, 0.9999953460693359, 0.9999953460693359);
    Engine::main->addNode(grass5_185);
    Node* grass5_186 = grass2->copy();
    grass5_186->position += vec3(-68.73262786865234, 100.00372314453125, 63.31097412109375);
    grass5_186->eulerAngles = vec3(0.0, 18.54414801169221, 0.0);
    grass5_186->scale = vec3(0.9999953460693359, 1.9999998474121095, 0.9999953460693359);
    Engine::main->addNode(grass5_186);
    Node* grass10_187 = grass10->copy();
    grass10_187->position += vec3(-71.492919921875, 100.00189208984375, 63.271305084228516);
    grass10_187->eulerAngles = vec3(179.999991348578, 40.529580968763206, 179.999991348578);
    grass10_187->scale = vec3(0.9999829864501953, 0.9999690246582031, 0.9999829864501953);
    Engine::main->addNode(grass10_187);
    Node* grass11_188 = grass11->copy();
    grass11_188->position += vec3(-67.52619171142578, 99.76151275634766, 74.44866180419922);
    grass11_188->eulerAngles = vec3(42.18854854079468, 64.20756212292005, 45.19039960554236);
    grass11_188->scale = vec3(1.999973602294922, 0.9999868774414062, 1.9999714660644532);
    Engine::main->addNode(grass11_188);
    Node* grass11_189 = grass11->copy();
    grass11_189->position += vec3(-67.04084014892578, 99.99930572509766, 73.40177917480469);
    grass11_189->eulerAngles = vec3(-12.383558998282597, 70.72690938380552, -13.094126629527471);
    grass11_189->scale = vec3(1.999953155517578, 0.9999779510498047, 1.999951171875);
    Engine::main->addNode(grass11_189);
    Node* grass11_190 = grass11->copy();
    grass11_190->position += vec3(-68.59130859375, 99.72528076171875, 74.12393951416016);
    grass11_190->eulerAngles = vec3(-12.383558144508951, 70.72690938380552, -13.094126629527471);
    grass11_190->scale = vec3(1.999953155517578, 0.9999779510498047, 1.999951171875);
    Engine::main->addNode(grass11_190);
    Node* grass2_191 = grass2->copy();
    grass2_191->position += vec3(-68.40304565429688, 99.916015625, 69.12397003173828);
    grass2_191->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_191->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass2_191);
    Node* grass4_192 = grass4->copy();
    grass4_192->position += vec3(-66.60548400878906, 99.86902618408203, 68.02548217773438);
    grass4_192->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass4_192->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass4_192);
    Node* grass4_193 = grass4->copy();
    grass4_193->position += vec3(-64.88182830810547, 99.8690185546875, 68.25550079345703);
    grass4_193->eulerAngles = vec3(0.0, -57.653046217998174, 0.0);
    grass4_193->scale = vec3(0.9999939727783204, 0.9999945068359375, 0.9999939727783204);
    Engine::main->addNode(grass4_193);
    Node* grass4_194 = grass4->copy();
    grass4_194->position += vec3(-60.508209228515625, 99.8690185546875, 65.79206848144531);
    grass4_194->eulerAngles = vec3(0.0, -57.65303938780902, 0.0);
    grass4_194->scale = vec3(0.9999939727783204, 0.9999945068359375, 0.9999939727783204);
    Engine::main->addNode(grass4_194);
    Node* grass4_195 = grass4->copy();
    grass4_195->position += vec3(-58.50030517578125, 99.8690185546875, 65.91484069824219);
    grass4_195->eulerAngles = vec3(0.0, -57.65303938780902, 0.0);
    grass4_195->scale = vec3(0.9999939727783204, 0.9999945068359375, 0.9999939727783204);
    Engine::main->addNode(grass4_195);
    Node* grass4_196 = grass4->copy();
    grass4_196->position += vec3(-57.23771286010742, 99.86901092529297, 70.07000732421875);
    grass4_196->eulerAngles = vec3(0.0, 6.0862603335405945, 0.0);
    grass4_196->scale = vec3(0.9999909973144532, 0.9999869537353515, 0.9999909973144532);
    Engine::main->addNode(grass4_196);
    Node* grass4_197 = grass4->copy();
    grass4_197->position += vec3(-55.942447662353516, 99.86900329589844, 71.36154174804688);
    grass4_197->eulerAngles = vec3(0.0, 64.03459441237864, 0.0);
    grass4_197->scale = vec3(0.9999828338623047, 0.9999810028076171, 0.9999828338623047);
    Engine::main->addNode(grass4_197);
    Node* grass4_198 = grass4->copy();
    grass4_198->position += vec3(-50.04313659667969, 99.86900329589844, 68.02871704101562);
    grass4_198->eulerAngles = vec3(0.0, 64.03459441237864, 0.0);
    grass4_198->scale = vec3(0.9999828338623047, 0.9999810028076171, 0.9999828338623047);
    Engine::main->addNode(grass4_198);
    Node* grass4_199 = grass4->copy();
    grass4_199->position += vec3(-40.89301681518555, 99.95682525634766, 64.70237731933594);
    grass4_199->eulerAngles = vec3(0.0, 64.03458075200031, 0.0);
    grass4_199->scale = vec3(0.999982681274414, 0.9999810028076171, 0.999982681274414);
    Engine::main->addNode(grass4_199);
    Node* grass4_200 = grass4->copy();
    grass4_200->position += vec3(-39.70751953125, 99.92105865478516, 62.97782897949219);
    grass4_200->eulerAngles = vec3(0.0, 64.03458075200031, 0.0);
    grass4_200->scale = vec3(0.999982681274414, 0.9999810028076171, 0.999982681274414);
    Engine::main->addNode(grass4_200);
    Node* grass4_201 = grass4->copy();
    grass4_201->position += vec3(-32.13686752319336, 100.01161193847656, 65.8199462890625);
    grass4_201->eulerAngles = vec3(0.0, 64.03458075200031, 0.0);
    grass4_201->scale = vec3(0.999982681274414, 0.9999810028076171, 0.999982681274414);
    Engine::main->addNode(grass4_201);
    Node* grass4_202 = grass4->copy();
    grass4_202->position += vec3(-33.318546295166016, 100.03462982177734, 67.44712829589844);
    grass4_202->eulerAngles = vec3(0.0, 64.03459441237864, 0.0);
    grass4_202->scale = vec3(0.999982681274414, 0.9999810028076171, 0.999982681274414);
    Engine::main->addNode(grass4_202);
    Node* grass4_203 = grass4->copy();
    grass4_203->position += vec3(-25.404220581054688, 100.01161193847656, 62.080623626708984);
    grass4_203->eulerAngles = vec3(0.0, 64.03458075200031, 0.0);
    grass4_203->scale = vec3(0.9999826049804688, 0.9999810028076171, 0.9999826049804688);
    Engine::main->addNode(grass4_203);
    Node* grass4_204 = grass4->copy();
    grass4_204->position += vec3(-25.99184799194336, 100.01160430908203, 63.64189910888672);
    grass4_204->eulerAngles = vec3(179.999991348578, 51.64629440903841, 179.999991348578);
    grass4_204->scale = vec3(0.9999800109863282, 0.9999754333496094, 0.9999800109863282);
    Engine::main->addNode(grass4_204);
    Node* grass2_205 = grass2->copy();
    grass2_205->position += vec3(-65.30450439453125, 100.00310516357422, 56.829471588134766);
    grass2_205->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_205->scale = vec3(0.999997787475586, 1.9999998474121095, 0.9999974060058594);
    Engine::main->addNode(grass2_205);
    Node* grass2_206 = grass2->copy();
    grass2_206->position += vec3(-64.86962890625, 100.00310516357422, 56.79600524902344);
    grass2_206->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_206->scale = vec3(0.999997787475586, 0.9999999237060547, 0.9999974060058594);
    Engine::main->addNode(grass2_206);
    Node* grass2_207 = grass2->copy();
    grass2_207->position += vec3(-62.606685638427734, 100.00310516357422, 42.72309875488281);
    grass2_207->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_207->scale = vec3(0.999997787475586, 0.9999999237060547, 0.9999974060058594);
    Engine::main->addNode(grass2_207);
    Node* grass2_208 = grass2->copy();
    grass2_208->position += vec3(-62.462364196777344, 100.00309753417969, 41.504913330078125);
    grass2_208->eulerAngles = vec3(0.0, 23.491117423749046, 0.0);
    grass2_208->scale = vec3(0.9999953460693359, 0.9999974822998047, 0.9999947357177734);
    Engine::main->addNode(grass2_208);
    Node* grass2_209 = grass2->copy();
    grass2_209->position += vec3(-65.70083618164062, 100.00309753417969, 32.18511962890625);
    grass2_209->eulerAngles = vec3(0.0, 23.491117423749046, 0.0);
    grass2_209->scale = vec3(0.9999951934814453, 0.9999974822998047, 0.9999947357177734);
    Engine::main->addNode(grass2_209);
    Node* grass4_210 = grass4->copy();
    grass4_210->position += vec3(-43.699668884277344, 99.99565124511719, 44.367828369140625);
    grass4_210->eulerAngles = vec3(179.999991348578, 51.64629440903841, 179.999991348578);
    grass4_210->scale = vec3(0.9999798583984375, 0.9999754333496094, 0.9999798583984375);
    Engine::main->addNode(grass4_210);
    Node* grass4_211 = grass4->copy();
    grass4_211->position += vec3(-46.48033905029297, 99.99565124511719, 46.599327087402344);
    grass4_211->eulerAngles = vec3(179.999991348578, 51.64629440903841, 179.999991348578);
    grass4_211->scale = vec3(0.9999798583984375, 0.9999754333496094, 0.9999798583984375);
    Engine::main->addNode(grass4_211);
    Node* grass4_212 = grass4->copy();
    grass4_212->position += vec3(-45.3099365234375, 99.99565124511719, 50.2840461730957);
    grass4_212->eulerAngles = vec3(179.999991348578, 51.64629440903841, 179.999991348578);
    grass4_212->scale = vec3(0.9999797058105468, 0.9999754333496094, 0.9999797058105468);
    Engine::main->addNode(grass4_212);
    Node* grass4_213 = grass4->copy();
    grass4_213->position += vec3(-49.610713958740234, 99.99565124511719, 56.51579284667969);
    grass4_213->eulerAngles = vec3(179.999991348578, 51.64629440903841, 179.999991348578);
    grass4_213->scale = vec3(0.9999796295166016, 0.9999754333496094, 0.9999796295166016);
    Engine::main->addNode(grass4_213);
    Node* grass11_214 = grass11->copy();
    grass11_214->position += vec3(-64.50089263916016, 99.03285217285156, 77.03083038330078);
    grass11_214->eulerAngles = vec3(0.0, 40.83262621695292, 0.0);
    grass11_214->scale = vec3(1.9999990844726563, 1.9999993896484376, 1.9999990844726563);
    Engine::main->addNode(grass11_214);
    Node* grass11_215 = grass11->copy();
    grass11_215->position += vec3(-63.84961700439453, 98.45808410644531, 78.1153335571289);
    grass11_215->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_215->scale = vec3(1.9999737548828125, 1.9999859619140625, 1.9999737548828125);
    Engine::main->addNode(grass11_215);
    PBRShader* plankShader = new PBRShader(0.3, 0.7);
    plankShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Wood_01_Albedo.png", 2.0, true));
    plankShader->setNormalMap(new Texture("/Resources/Game/Map/T_Wood_01_Normal.png", 2.0, true));
    Node* plank1 = new Node();
    plank1->loadModelFile("/Resources/Game/Map/plank1.dae");
    plank1->geometries[0]->setShader(plankShader);
    plank1->geometries[0]->setDoubleSided();
    plank1->position.x = MAPX;
    plank1->position.z = MAPZ;
    plank1->position.y  = MAPY;
    Node* plank2 = new Node();
    plank2->loadModelFile("/Resources/Game/Map/plank2.dae");
    plank2->geometries[0]->setShader(plankShader);
    plank2->geometries[0]->setDoubleSided();
    plank2->position.x = MAPX;
    plank2->position.z = MAPZ;
    plank2->position.y  = MAPY;
    Node* plank3 = new Node();
    plank3->loadModelFile("/Resources/Game/Map/plank3.dae");
    plank3->geometries[0]->setShader(plankShader);
    plank3->geometries[0]->setDoubleSided();
    plank3->position.x = MAPX;
    plank3->position.z = MAPZ;
    plank3->position.y  = MAPY;
    Node* plank3_216 = plank3->copy();
    plank3_216->position += vec3(-37.71573257446289, 100.20777893066406, 30.402681350708008);
    plank3_216->eulerAngles = vec3(25.08401145329711, 65.99082206237283, 27.131930977804124);
    plank3_216->scale = vec3(0.4999987030029297, 0.9999718475341797, 0.9999976348876953);
    Engine::main->addNode(plank3_216);
    Node* plank2_217 = plank2->copy();
    plank2_217->position += vec3(-39.8646240234375, 100.14472961425781, 29.915334701538086);
    plank2_217->eulerAngles = vec3(3.7378534666880356, -43.50627986189232, -5.42098454045572);
    plank2_217->scale = vec3(0.9999665069580078, 0.9999600219726562, 0.9999700164794922);
    Engine::main->addNode(plank2_217);
    Node* plank2_218 = plank2->copy();
    plank2_218->position += vec3(-67.09780883789062, 100.03519439697266, 30.353471755981445);
    plank2_218->eulerAngles = vec3(2.7913497571697636, 2.115648960977334, -0.646283491602302);
    plank2_218->scale = vec3(0.9999588012695313, 0.9999536895751953, 0.9999625396728515);
    Engine::main->addNode(plank2_218);
    Node* plank1_219 = plank1->copy();
    plank1_219->position += vec3(-82.24755859375, 123.9820785522461, 45.10414123535156);
    plank1_219->eulerAngles = vec3(-1.7540349473764696, -35.241525569934275, 3.037892905780778);
    plank1_219->scale = vec3(0.9999594116210937, 0.9999716186523437, 0.9999587249755859);
    Engine::main->addNode(plank1_219);
    Node* plank1_220 = plank1->copy();
    plank1_220->position += vec3(-82.11333465576172, 124.09194946289062, 45.1502571105957);
    plank1_220->eulerAngles = vec3(-0.6800147543443802, -7.609061254278692, -3.5977154872791224);
    plank1_220->scale = vec3(0.9999519348144531, 0.9999635314941406, 0.9999530792236329);
    Engine::main->addNode(plank1_220);
    Node* plank1_221 = plank1->copy();
    plank1_221->position += vec3(-14.726137161254883, 123.98208618164062, 53.513099670410156);
    plank1_221->eulerAngles = vec3(-1.7540350540981755, -35.241525569934275, 3.0378933326676014);
    plank1_221->scale = vec3(0.9999594116210937, 0.9999716186523437, 0.9999588012695313);
    Engine::main->addNode(plank1_221);
    Node* plank1_222 = plank1->copy();
    plank1_222->position += vec3(-14.591909408569336, 124.09195709228516, 53.5592155456543);
    plank1_222->eulerAngles = vec3(-0.680014861066086, -7.609061254278692, -3.5977154872791224);
    plank1_222->scale = vec3(0.9999520111083985, 0.9999636077880859, 0.9999531555175781);
    Engine::main->addNode(plank1_222);
    Node* plank2_223 = plank2->copy();
    plank2_223->position += vec3(-21.462772369384766, 100.08348846435547, 44.11054992675781);
    plank2_223->eulerAngles = vec3(-0.7490667395535927, -43.62939060658721, 1.0855502460421584);
    plank2_223->scale = vec3(0.999968032836914, 0.9999617767333985, 0.999970932006836);
    Engine::main->addNode(plank2_223);
    Node* plank3_224 = plank3->copy();
    plank3_224->position += vec3(-20.954912185668945, 100.03620910644531, 46.00153732299805);
    plank3_224->eulerAngles = vec3(0.0, 68.37629978094563, 0.0);
    plank3_224->scale = vec3(0.49999992370605467, 0.9999771118164062, 0.9999998474121093);
    Engine::main->addNode(plank3_224);
    PBRShader* torchShader = new PBRShader(0.6, 0.5);
    torchShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Torch_01_Albedo.png", 2.0, true));
    torchShader->setNormalMap(new Texture("/Resources/Game/Map/T_Torch_01_Normal.png", 2.0, true));
    Node* torch1 = new Node();
    torch1->loadModelFile("/Resources/Game/Map/torch01lod0.dae");
    torch1->geometries[0]->setShader(torchShader);
    torch1->geometries[0]->setDoubleSided();
    torch1->position.x = MAPX;
    torch1->position.z = MAPZ;
    torch1->position.y  = MAPY;
    Node* torch1_225 = torch1->copy();
    torch1_225->position += vec3(-83.11381530761719, 127.62088775634766, 43.743831634521484);
    torch1_225->eulerAngles = vec3(0.0, -0.0, 0.0);
    torch1_225->scale = vec3(1.4999996948242187, 1.4999996948242187, 1.4999996948242187);
    Engine::main->addNode(torch1_225);
    Node* torch1_226 = torch1->copy();
    torch1_226->position += vec3(-87.22014617919922, 127.33155822753906, 54.257423400878906);
    torch1_226->eulerAngles = vec3(179.999991348578, -5.008956130975331e-06, 179.999991348578);
    torch1_226->scale = vec3(1.4999996948242187, 1.4999996948242187, 1.4999996948242187);
    Engine::main->addNode(torch1_226);
    Node* torch1_227 = torch1->copy();
    torch1_227->position += vec3(-10.973664283752441, 127.28768920898438, 43.86478805541992);
    torch1_227->eulerAngles = vec3(0.0, -0.0, 0.0);
    torch1_227->scale = vec3(1.4999998474121095, 1.4999998474121095, 1.4999998474121095);
    Engine::main->addNode(torch1_227);
    Node* torch1_228 = torch1->copy();
    torch1_228->position += vec3(-15.105896949768066, 127.28768920898438, 54.34872817993164);
    torch1_228->eulerAngles = vec3(179.999991348578, -5.008956130975331e-06, 179.999991348578);
    torch1_228->scale = vec3(1.4999998474121095, 1.4999998474121095, 1.4999998474121095);
    Engine::main->addNode(torch1_228);
    PBRShader* rootShader = new PBRShader(0.6, 0.5);
    rootShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Roots_01_Albedo.png", 2.0, true));
    rootShader->setNormalMap(new Texture("/Resources/Game/Map/T_Roots_01_Normal.png", 2.0, true));
    Node* root1 = new Node();
    root1->loadModelFile("/Resources/Game/Map/root01lod0.dae");
    root1->geometries[0]->setShader(rootShader);
    root1->geometries[0]->setDoubleSided();
    root1->position.x = MAPX;
    root1->position.z = MAPZ;
    root1->position.y  = MAPY;
    Node* root2 = new Node();
    root2->loadModelFile("/Resources/Game/Map/root02lod0.dae");
    root2->geometries[0]->setShader(rootShader);
    root2->geometries[0]->setDoubleSided();
    root2->position.x = MAPX;
    root2->position.z = MAPZ;
    root2->position.y  = MAPY;
    Node* root4 = new Node();
    root4->loadModelFile("/Resources/Game/Map/root04lod0.dae");
    root4->geometries[0]->setShader(rootShader);
    root4->geometries[0]->setDoubleSided();
    root4->position.x = MAPX;
    root4->position.z = MAPZ;
    root4->position.y  = MAPY;
    Node* root4_229 = root4->copy();
    root4_229->position += vec3(-18.374248504638672, 99.94685363769531, 55.337928771972656);
    root4_229->eulerAngles = vec3(179.999991348578, -30.9940460760622, 3.5808221447938354e-06);
    root4_229->scale = vec3(1.4999684143066405, 1.0999903106689453, 1.49996826171875);
    Engine::main->addNode(root4_229);
    Node* root1_230 = root1->copy();
    root1_230->position += vec3(-5.482107639312744, 105.82120513916016, 55.57176971435547);
    root1_230->eulerAngles = vec3(90.00000250447816, -0.0, 45.2957108772602);
    root1_230->scale = vec3(0.9999790191650391, 0.9999923706054688, 0.9999857330322266);
    Engine::main->addNode(root1_230);
    Node* root2_231 = root2->copy();
    root2_231->position += vec3(-18.892175674438477, 100.05636596679688, 56.071746826171875);
    root2_231->eulerAngles = vec3(165.7497032303168, 28.67118411670549, -179.999991348578);
    root2_231->scale = vec3(0.6999456024169922, 0.6999674224853516, 0.6999458312988281);
    Engine::main->addNode(root2_231);
    Node* root1_232 = root1->copy();
    root1_232->position += vec3(-68.36189270019531, 99.34781646728516, 75.44401550292969);
    root1_232->eulerAngles = vec3(58.28055618761476, 60.262909311184245, 61.77813896722738);
    root1_232->scale = vec3(0.49999305725097654, 0.4999936294555664, 0.49999317169189456);
    Engine::main->addNode(root1_232);
    Node* root1_233 = root1->copy();
    root1_233->position += vec3(-68.28618621826172, 99.48162078857422, 75.42308807373047);
    root1_233->eulerAngles = vec3(20.320010856273864, 25.781530861906315, 20.212783716493835);
    root1_233->scale = vec3(0.3000008010864258, 0.2999987983703613, 0.3000002098083496);
    Engine::main->addNode(root1_233);
    Node* root2_234 = root2->copy();
    root2_234->position += vec3(-64.9647445678711, 98.8053970336914, 75.91790008544922);
    root2_234->eulerAngles = vec3(160.3051955183596, -11.803172211297225, -170.40331601752163);
    root2_234->scale = vec3(0.6999424743652344, 0.6999610900878906, 0.6999413299560547);
    Engine::main->addNode(root2_234);
    Node* root1_235 = root1->copy();
    root1_235->position += vec3(-46.344486236572266, 99.24991607666016, 76.68132781982422);
    root1_235->eulerAngles = vec3(163.841498640377, 43.0034140144393, 178.9855716530477);
    root1_235->scale = vec3(0.999951400756836, 0.9999496459960937, 0.9999655914306641);
    Engine::main->addNode(root1_235);
    Node* root1_236 = root1->copy();
    root1_236->position += vec3(-41.6873893737793, 99.39608001708984, 77.92771911621094);
    root1_236->eulerAngles = vec3(168.9128184764631, -4.010984620747206, 175.24486828992846);
    root1_236->scale = vec3(0.9999441528320312, 0.9999390411376953, 0.9999615478515625);
    Engine::main->addNode(root1_236);
    Node* crate1 = new Node();
    crate1->loadModelFile("/Resources/Game/Map/crate01lod0.dae");
    crate1->geometries[0]->setShader(plankShader);
    crate1->geometries[0]->setDoubleSided();
    crate1->position.x = MAPX;
    crate1->position.z = MAPZ;
    crate1->position.y  = MAPY;
    Node* crate2 = new Node();
    crate2->loadModelFile("/Resources/Game/Map/crateb01lod0.dae");
    crate2->geometries[0]->setShader(plankShader);
    crate2->geometries[0]->setDoubleSided();
    crate2->position.x = MAPX;
    crate2->position.z = MAPZ;
    crate2->position.y  = MAPY;
    Node* crate1_237 = crate1->copy();
    crate1_237->position += vec3(-64.72871398925781, 102.00199127197266, 55.782108306884766);
    crate1_237->eulerAngles = vec3(0.0, 23.035700900460103, 0.0);
    crate1_237->scale = vec3(1.9999932861328125, 1.9999412536621093, 1.4999998474121095);
    Engine::main->addNode(crate1_237);
    Node* crate1_238 = crate1->copy();
    crate1_238->position += vec3(-59.76287078857422, 105.13507080078125, 26.18661880493164);
    crate1_238->eulerAngles = vec3(0.0, 29.974496908465227, 0.0);
    crate1_238->scale = vec3(2.9999765014648436, 2.999975280761719, 2.9999765014648436);
    Engine::main->addNode(crate1_238);
    Node* crate2_239 = crate2->copy();
    crate2_239->position += vec3(-61.33685302734375, 100.05243682861328, 27.188745498657227);
    crate2_239->eulerAngles = vec3(-5.269714633360155, 0.0, 0.0);
    crate2_239->scale = vec3(0.9999960327148437, 0.9999954223632812, 0.9999954223632812);
    Engine::main->addNode(crate2_239);
    Node* crate2_240 = crate2->copy();
    crate2_240->position += vec3(-23.667755126953125, 100.08351135253906, 61.5477294921875);
    crate2_240->eulerAngles = vec3(0.0, -0.0, 0.0);
    crate2_240->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(crate2_240);
    Node* crate1_241 = crate1->copy();
    crate1_241->position += vec3(-65.20054626464844, 100.00308990478516, 54.68937683105469);
    crate1_241->eulerAngles = vec3(0.0, 23.03569919291281, 0.0);
    crate1_241->scale = vec3(1.999993133544922, 1.99994140625, 3.999986267089844);
    Engine::main->addNode(crate1_241);
    Node* crate1_242 = crate1->copy();
    crate1_242->position += vec3(-61.0711784362793, 99.970458984375, 25.995046615600586);
    crate1_242->eulerAngles = vec3(-1.7733529635050873, 22.13437547720688, 4.306770231622839);
    crate1_242->scale = vec3(0.9999791717529297, 0.9999751281738282, 0.9999752807617187);
    Engine::main->addNode(crate1_242);
    Node* crate1_243 = crate1->copy();
    crate1_243->position += vec3(-24.513986587524414, 100.03558349609375, 59.952640533447266);
    crate1_243->eulerAngles = vec3(0.5196003978889319, -18.290589191586534, -1.6552251619748342);
    crate1_243->scale = vec3(0.9999908447265625, 0.9999872589111328, 0.9999908447265625);
    Engine::main->addNode(crate1_243);
    Node* crate1_244 = crate1->copy();
    crate1_244->position += vec3(-23.448984146118164, 100.00550079345703, 60.12397766113281);
    crate1_244->eulerAngles = vec3(0.5196001844455203, -18.29058748403924, -1.6552243082011875);
    crate1_244->scale = vec3(0.9999907684326171, 0.9999871826171876, 0.9999908447265625);
    Engine::main->addNode(crate1_244);
    Node* crate1_245 = crate1->copy();
    crate1_245->position += vec3(-23.96421241760254, 101.0422592163086, 59.953590393066406);
    crate1_245->eulerAngles = vec3(0.5196002911672261, -18.290589191586534, -1.6552244149228934);
    crate1_245->scale = vec3(0.9999906158447266, 0.9999869537353515, 0.9999906921386719);
    Engine::main->addNode(crate1_245);
    Node* crate1_246 = crate1->copy();
    crate1_246->position += vec3(-22.329954147338867, 100.20539093017578, 60.51980972290039);
    crate1_246->eulerAngles = vec3(-1.7293412522059348, -18.218597290187308, 5.515934842089476);
    crate1_246->scale = vec3(0.9999885559082031, 0.9999848937988282, 0.9999863433837891);
    Engine::main->addNode(crate1_246);
    Node* rack1 = new Node();
    rack1->loadModelFile("/Resources/Game/Map/rack01lod0.dae");
    rack1->geometries[0]->setShader(plankShader);
    rack1->geometries[0]->setDoubleSided();
    rack1->position.x = MAPX;
    rack1->position.z = MAPZ;
    rack1->position.y  = MAPY;
    Node* rack1_247 = rack1->copy();
    rack1_247->position += vec3(-65.17606353759766, 100.00313568115234, 29.69363021850586);
    rack1_247->eulerAngles = vec3(179.999991348578, 57.47447092214819, 179.999991348578);
    rack1_247->scale = vec3(1.9999990844726563, 2.999999694824219, 1.9999990844726563);
    Engine::main->addNode(rack1_247);
    Node* rack1_248 = rack1->copy();
    rack1_248->position += vec3(-60.91197204589844, 100.00309753417969, 26.871240615844727);
    rack1_248->eulerAngles = vec3(0.0, 29.218934552289248, 0.0);
    rack1_248->scale = vec3(3.9997760009765626, 4.9995291137695315, 1.9998880004882813);
    Engine::main->addNode(rack1_248);
    Node* rack1_249 = rack1->copy();
    rack1_249->position += vec3(-24.43468475341797, 100.00312042236328, 38.02402877807617);
    rack1_249->eulerAngles = vec3(179.999991348578, 55.379047431963734, 179.999991348578);
    rack1_249->scale = vec3(1.9999917602539063, 2.999993896484375, 1.9999917602539063);
    Engine::main->addNode(rack1_249);
    Node* barrel1 = new Node();
    barrel1->loadModelFile("/Resources/Game/Map/barrel01lod0.dae");
    barrel1->geometries[0]->setShader(plankShader);
    barrel1->geometries[0]->setDoubleSided();
    barrel1->geometries[1]->setShader(wallShader8);
    barrel1->geometries[1]->setDoubleSided();
    barrel1->position.x = MAPX;
    barrel1->position.z = MAPZ;
    barrel1->position.y  = MAPY;
    Node* barrel1_252 = barrel1->copy();
    barrel1_252->position += vec3(-58.544437408447266, 100.37054443359375, 25.527950286865234);
    barrel1_252->eulerAngles = vec3(89.99998884409983, -0.0, 0.0);
    barrel1_252->scale = vec3(0.9999845886230468, 0.9999786376953125, 0.9999786376953125);
    Engine::main->addNode(barrel1_252);
    Node* barrel1_257 = barrel1->copy();
    barrel1_257->position += vec3(-26.098234176635742, 100.01934814453125, 34.28403091430664);
    barrel1_257->eulerAngles = vec3(0.0, 16.022329472002195, 0.0);
    barrel1_257->scale = vec3(0.999966812133789, 0.9999604797363282, 0.9999617767333985);
    Engine::main->addNode(barrel1_257);
    Node* barrel1_258 = barrel1->copy();
    barrel1_258->position += vec3(-26.75208854675293, 100.01934814453125, 33.21472930908203);
    barrel1_258->eulerAngles = vec3(0.0, 16.022329472002195, 0.0);
    barrel1_258->scale = vec3(0.999966812133789, 0.9999604797363282, 0.9999617767333985);
    Engine::main->addNode(barrel1_258);
    Node* barrel1_259 = barrel1->copy();
    barrel1_259->position += vec3(-27.087125778198242, 100.01934814453125, 34.34706497192383);
    barrel1_259->eulerAngles = vec3(0.0, 16.022329472002195, 0.0);
    barrel1_259->scale = vec3(0.999966812133789, 0.9999604797363282, 0.9999617767333985);
    Engine::main->addNode(barrel1_259);
    Node* barrel1_260 = barrel1->copy();
    barrel1_260->position += vec3(-26.179431915283203, 100.41751098632812, 35.09712219238281);
    barrel1_260->eulerAngles = vec3(89.99992054220813, -52.17486567343278, 5.5688127344467605e-05);
    barrel1_260->scale = vec3(0.999925765991211, 0.9998771667480468, 0.9998847961425781);
    Engine::main->addNode(barrel1_260);
    Node* barrel1_261 = barrel1->copy();
    barrel1_261->position += vec3(-25.437583923339844, 100.4175033569336, 34.7987060546875);
    barrel1_261->eulerAngles = vec3(89.99998884409983, 7.173277255985307, 1.2907631323787166e-06);
    barrel1_261->scale = vec3(0.9999437713623047, 0.9999246215820312, 0.9999456024169922);
    Engine::main->addNode(barrel1_261);
    Node* barrel1_262 = barrel1->copy();
    barrel1_262->position += vec3(-24.421594619750977, 106.07965087890625, 36.491188049316406);
    barrel1_262->eulerAngles = vec3(0.0, 16.022336302191366, 0.0);
    barrel1_262->scale = vec3(0.9999667358398437, 0.9999604034423828, 0.9999617004394531);
    Engine::main->addNode(barrel1_262);
    Node* barrel1_263 = barrel1->copy();
    barrel1_263->position += vec3(-23.967884063720703, 106.4652099609375, 37.575130462646484);
    barrel1_263->eulerAngles = vec3(-89.99951073085793, -84.4773505982268, 179.99952689571444);
    barrel1_263->scale = vec3(0.9998902130126953, 0.9998339080810547, 0.9998487854003906);
    Engine::main->addNode(barrel1_263);
    Node* brazier1 = new Node();
    brazier1->loadModelFile("/Resources/Game/Map/brazier01lod0.dae");
    brazier1->geometries[0]->setShader(wallShader8);
    brazier1->geometries[0]->setDoubleSided();
    brazier1->geometries[1]->setShader(plankShader);
    brazier1->geometries[1]->setDoubleSided();
    brazier1->position.x = MAPX;
    brazier1->position.z = MAPZ;
    brazier1->position.y  = MAPY;
    Node* brazier1_251 = brazier1->copy();
    brazier1_251->position += vec3(-82.49749755859375, 123.8620834350586, 52.35103988647461);
    brazier1_251->eulerAngles = vec3(0.0, -0.0, 0.0);
    brazier1_251->scale = vec3(1.9999995422363281, 1.9999996948242187, 1.9999995422363281);
    Engine::main->addNode(brazier1_251);
    Node* brazier1_254 = brazier1->copy();
    brazier1_254->position += vec3(-8.112088203430176, 123.86209106445312, 53.058349609375);
    brazier1_254->eulerAngles = vec3(0.0, -0.0, 0.0);
    brazier1_254->scale = vec3(1.9999996948242187, 1.9999998474121095, 1.9999996948242187);
    Engine::main->addNode(brazier1_254);
    Node* pike1 = new Node();
    pike1->loadModelFile("/Resources/Game/Map/pike02lod0.dae");
    pike1->geometries[0]->setShader(wallShader8);
    pike1->geometries[0]->setDoubleSided();
    pike1->position.x = MAPX;
    pike1->position.z = MAPZ;
    pike1->position.y  = MAPY;
    Node* pike1_250 = pike1->copy();
    pike1_250->position += vec3(-84.80848693847656, 123.41913604736328, 42.543792724609375);
    pike1_250->eulerAngles = vec3(0.0, 0.0, -20.93777414594484);
    pike1_250->scale = vec3(0.9999931335449219, 0.9999931335449219, 0.9999930572509765);
    Engine::main->addNode(pike1_250);
    Node* pike1_255 = pike1->copy();
    pike1_255->position += vec3(-12.7362699508667, 123.6455307006836, 42.90245056152344);
    pike1_255->eulerAngles = vec3(0.0, 0.0, -20.937779268586716);
    pike1_255->scale = vec3(0.9999932098388672, 0.9999932098388672, 0.9999931335449219);
    Engine::main->addNode(pike1_255);
    Node* chest1 = new Node();
    Node* chestBody = new Node();
    Node* chestLid = new Node();
    chest1->addChildNode(chestLid);
    chest1->addChildNode(chestBody);
    chestLid->position = vec3(0, 0.707, -0.355);
    chestLid->loadModelFile("/Resources/Game/Map/chestlid.dae");
    chestLid->geometries[0]->setShader(wallShader8);
    chestLid->geometries[0]->setDoubleSided();
    chestLid->geometries[1]->setShader(plankShader);
    chestLid->geometries[1]->setDoubleSided();
    chestBody->loadModelFile("/Resources/Game/Map/chestbody.dae");
    chestBody->geometries[0]->setShader(wallShader8);
    chestBody->geometries[0]->setDoubleSided();
    chestBody->geometries[1]->setShader(plankShader);
    chestBody->geometries[1]->setDoubleSided();
    chest1->position.x = MAPX;
    chest1->position.z = MAPZ;
    chest1->position.y  = MAPY;
    Node* chest1_253 = chest1->copy();
    chest1_253->position += vec3(-8.676246643066406, 124.01528930664062, 45.554969787597656);
    chest1_253->eulerAngles = vec3(0.0, -55.61447039227574, 0.0);
    chest1_253->scale = vec3(1.4998001098632812, 1.4998756408691407, 1.4998001098632812);
    Engine::main->addNode(chest1_253);
    Node* chest1_256 = chest1->copy();
    chest1_256->position += vec3(-62.858856201171875, 99.98562622070312, 27.078420639038086);
    chest1_256->eulerAngles = vec3(0.0, 41.29396109915768, 0.0);
    chest1_256->scale = vec3(1.4997727966308594, 1.499774169921875, 1.4997727966308594);
    Engine::main->addNode(chest1_256);
    Node* chest1_260 = chest1->copy();
    chest1_260->position += vec3(-24.3662109375, 100.00310516357422, 38.28737258911133);
    chest1_260->eulerAngles = vec3(5.5868543419460714e-12, -70.95321404157555, -3.4647084340055335e-12);
    chest1_260->scale = vec3(1.4998004150390625, 1.4998641967773438, 1.499800262451172);
    Engine::main->addNode(chest1_260);
    Node* chest1_265 = chest1->copy();
    chest1_265->position += vec3(-90.12577819824219, 124.01527404785156, 45.301124572753906);
    chest1_265->eulerAngles = vec3(0.0, 51.35024327455879, 0.0);
    chest1_265->scale = vec3(1.499794921875, 1.4998686218261719, 1.499794921875);
    Engine::main->addNode(chest1_265);
    Node* cover1 = new Node();
    cover1->loadModelFile("/Resources/Game/Map/Cover01lod0.dae");
    cover1->geometries[0]->setShader(plankShader);
    cover1->geometries[0]->setDoubleSided();
    cover1->geometries[1]->setShader(wallShader8);
    cover1->geometries[1]->setDoubleSided();
    cover1->position.x = MAPX;
    cover1->position.z = MAPZ;
    cover1->position.y  = MAPY;
    Node* cover1_266 = cover1->copy();
    cover1_266->position += vec3(-39.453678131103516, 100.00250244140625, 48.28976058959961);
    cover1_266->eulerAngles = vec3(0.0, -83.57401026916844, 0.0);
    cover1_266->scale = vec3(1.9999398803710937, 0.9999430084228516, 0.9999181365966797);
    Engine::main->addNode(cover1_266);
    Node* cover1_267 = cover1->copy();
    cover1_267->position += vec3(-35.44919967651367, 100.02408599853516, 41.40475082397461);
    cover1_267->eulerAngles = vec3(0.0, -65.95676673917114, 0.0);
    cover1_267->scale = vec3(1.0, 0.9999394989013672, 0.9999176025390625);
    Engine::main->addNode(cover1_267);
    Node* cover1_268 = cover1->copy();
    cover1_268->position += vec3(-33.6307373046875, 100.00248718261719, 57.174041748046875);
    cover1_268->eulerAngles = vec3(179.999991348578, -68.89168536514728, 179.999991348578);
    cover1_268->scale = vec3(0.999992446899414, 0.9999156188964844, 0.9999075317382813);
    Engine::main->addNode(cover1_268);
    Node* cover1_269 = cover1->copy();
    cover1_269->position += vec3(-56.97282409667969, 100.12015533447266, 56.37169647216797);
    cover1_269->eulerAngles = vec3(-172.4976842434793, 70.27423859656292, -172.44170401304189);
    cover1_269->scale = vec3(1.9999891662597655, 0.9999658966064453, 0.9999494934082032);
    Engine::main->addNode(cover1_269);
    Node* cover1_270 = cover1->copy();
    cover1_270->position += vec3(-56.41801452636719, 100.00310516357422, 35.17462158203125);
    cover1_270->eulerAngles = vec3(0.0, 68.56699866257239, 0.0);
    cover1_270->scale = vec3(0.9999998474121093, 0.9999279022216797, 0.9998992156982421);
    Engine::main->addNode(cover1_270);
    Node* cover1_271 = cover1->copy();
    cover1_271->position += vec3(-62.63439178466797, 100.00309753417969, 41.29227066040039);
    cover1_271->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    cover1_271->scale = vec3(0.9999967956542969, 1.9999998474121095, 0.9998963165283203);
    Engine::main->addNode(cover1_271);
    PBRShader* ruinedShader = new PBRShader(0.2, 0.7);
    ruinedShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Ballustrade_01_Albedo.png", 2.0, true));
    ruinedShader->setNormalMap(new Texture("/Resources/Game/Map/T_Ballustrade_01_Normal.png", 2.0, true));
    Node* ruined1 = new Node();
    ruined1->loadModelFile("/Resources/Game/Map/ball01lod0.dae");
    ruined1->geometries[0]->setShader(ruinedShader);
    ruined1->geometries[0]->setDoubleSided();
    ruined1->position.x = MAPX;
    ruined1->position.z = MAPZ;
    ruined1->position.y  = MAPY;
    Node* ruined2 = new Node();
    ruined2->loadModelFile("/Resources/Game/Map/ball02lod0.dae");
    ruined2->geometries[0]->setShader(ruinedShader);
    ruined2->geometries[0]->setDoubleSided();
    ruined2->position.x = MAPX;
    ruined2->position.z = MAPZ;
    ruined2->position.y  = MAPY;
    Node* ruined5 = new Node();
    ruined5->loadModelFile("/Resources/Game/Map/ball05lod0.dae");
    ruined5->geometries[0]->setShader(ruinedShader);
    ruined5->geometries[0]->setDoubleSided();
    ruined5->position.x = MAPX;
    ruined5->position.z = MAPZ;
    ruined5->position.y  = MAPY;
    Node* ruined5_66 = ruined5->copy();
    ruined5_66->position += vec3(-62.7413444519043, 100.16389465332031, 45.17681884765625);
    ruined5_66->eulerAngles = vec3(-90.00001616485652, -46.48136000018813, -179.999991348578);
    ruined5_66->scale = vec3(0.9999694061279297, 0.9999420928955078, 0.9999604797363282);
    Engine::main->addNode(ruined5_66);
    Node* ruined2_271 = ruined2->copy();
    ruined2_271->position += vec3(-41.0066032409668, 100.00182342529297, 58.27544021606445);
    ruined2_271->eulerAngles = vec3(0.0, 66.96369371718193, 0.0);
    ruined2_271->scale = vec3(0.9998912811279297, 0.9999526977539063, 0.9998912811279297);
    Engine::main->addNode(ruined2_271);
    Node* ruined1_272 = ruined1->copy();
    ruined1_272->position += vec3(-29.207162857055664, 100.00310516357422, 43.177001953125);
    ruined1_272->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    ruined1_272->scale = vec3(0.9999993896484375, 0.9999999237060547, 0.9999993896484375);
    Engine::main->addNode(ruined1_272);
    Node* ruined5_273 = ruined5->copy();
    ruined5_273->position += vec3(-67.20616149902344, 100.00312042236328, 47.14087677001953);
    ruined5_273->eulerAngles = vec3(0.0, -0.0, 0.0);
    ruined5_273->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(ruined5_273);
    Node* ruined5_274 = ruined5->copy();
    ruined5_274->position += vec3(-28.26511573791504, 100.00310516357422, 53.004661560058594);
    ruined5_274->eulerAngles = vec3(0.0, -0.0, 0.0);
    ruined5_274->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(ruined5_274);
    Node* ruined5_275 = ruined5->copy();
    ruined5_275->position += vec3(-48.91549301147461, 99.95623779296875, 67.52113342285156);
    ruined5_275->eulerAngles = vec3(158.2510707669916, 70.88033592313151, 157.10909045852216);
    ruined5_275->scale = vec3(0.9999714660644531, 0.9999848937988282, 0.999972915649414);
    Engine::main->addNode(ruined5_275);
    Node* ruined5_276 = ruined5->copy();
    ruined5_276->position += vec3(-46.2738037109375, 100.04888916015625, 67.17887878417969);
    ruined5_276->eulerAngles = vec3(80.55053141041391, 42.70265346452695, 171.1927902629267);
    ruined5_276->scale = vec3(0.9999746704101562, 0.9999679565429688, 0.9999694061279297);
    Engine::main->addNode(ruined5_276);
    PBRShader* barkShader = new PBRShader(0.2, 0.7);
    barkShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Ash_Tree_Bark_01_Albedo.png", 2.0, true));
    barkShader->setNormalMap(new Texture("/Resources/Game/Map/T_Ash_Tree_Bark_01_Normal.png", 2.0, true));
    PBRShader* treeShader = new PBRShader(0.2, 0.7);
    treeShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Ash_Tree_Canopy_01_Albedo.png", 2.0, true));
    treeShader->setNormalMap(new Texture("/Resources/Game/Map/T_Ash_Tree_Canopy_01_Normal.png", 2.0, true));
    Node* tree1 = new Node();
    tree1->loadModelFile("/Resources/Game/Map/tree01lod0.dae");
    tree1->geometries[0]->setShader(barkShader);
    tree1->geometries[0]->setDoubleSided();
    tree1->geometries[1]->setShader(treeShader);
    tree1->geometries[1]->setDoubleSided();
    tree1->position.x = MAPX;
    tree1->position.z = MAPZ;
    tree1->position.y  = MAPY;
    Node* tree1_277 = tree1->copy();
    tree1_277->position += vec3(-90.48456573486328, 124.47830963134766, 52.6517219543457);
    tree1_277->eulerAngles = vec3(0.0, 38.717832310282304, 0.0);
    tree1_277->scale = vec3(0.9999897003173828, 0.9999895477294922, 0.9999897003173828);
    Engine::main->addNode(tree1_277);
    Node* tree1_278 = tree1->copy();
    tree1_278->position += vec3(-24.947269439697266, 100.06257629394531, 63.21464157104492);
    tree1_278->eulerAngles = vec3(179.999991348578, -52.71037982511846, 179.999991348578);
    tree1_278->scale = vec3(0.9999507141113281, 0.9999618530273438, 0.9999507141113281);
    Engine::main->addNode(tree1_278);
    Node* tree1_279 = tree1->copy();
    tree1_279->position += vec3(-68.31903839111328, 99.77661895751953, 75.6146011352539);
    tree1_279->eulerAngles = vec3(166.8262913076726, -52.215491638616015, -172.0628744009163);
    tree1_279->scale = vec3(0.9999092102050782, 0.999945297241211, 0.9999094390869141);
    Engine::main->addNode(tree1_279);
    Node* tree1_280 = tree1->copy();
    tree1_280->position += vec3(-69.54647827148438, 99.66692352294922, 73.10148620605469);
    tree1_280->eulerAngles = vec3(-8.457288786924236, -77.35016431253439, 8.254868446908093);
    tree1_280->scale = vec3(0.4999870300292969, 0.49998779296875, 0.499987907409668);
    Engine::main->addNode(tree1_280);
    Node* tree1_281 = tree1->copy();
    tree1_281->position += vec3(-8.11652660369873, 124.47830963134766, 44.574310302734375);
    tree1_281->eulerAngles = vec3(0.0, 38.717832310282304, 0.0);
    tree1_281->scale = vec3(0.9999897766113282, 0.9999896240234375, 0.9999897766113282);
    Engine::main->addNode(tree1_281);
}

} // namespace ImportMapHelper
