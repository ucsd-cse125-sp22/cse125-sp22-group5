//
//  ImportMapHelper.cpp
//
//  Created by Kangming Yu on 5/15/22.
//

#include "Game/Map/ImportMapHelper.hpp"

#include <glm/glm.hpp>

#include "Game/Map/MapSystemManager.hpp"
#include "KGLEngine/Engine.hpp"

#define MAPX 40
#define MAPY -101
#define MAPZ -50

using namespace glm;


namespace ImportMapHelper {

void importMapBox() {
    unsigned int boxType;
    vec3 boxSize, boxPosition, boxEulerAngles;
    PBRShader* cubeShader = new PBRShader(0.5f, 0.5f);
    
    boxType = Map::WALL;
    boxSize = vec3(62.400001525878906f, 2.0f, 42.694854736328125f);
    boxPosition = vec3(-50.78607940673828f + (MAPX), 99.01634216308594f + (MAPY), 41.54486846923828f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(12.240461349487305f, 2.0f, 12.95934009552002f);
    boxPosition = vec3(-87.5407485961914f + (MAPX), 99.01634216308594f + (MAPY), 49.13040542602539f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(13.731521606445312f, 2.0f, 14.384867668151855f);
    boxPosition = vec3(-12.861579895019531f + (MAPX), 99.01634216308594f + (MAPY), 49.0954704284668f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-16.15308380126953f, -13.926260948181152f, -4.099987030029297f);
    boxPosition = vec3(-48.89267349243164f + (MAPX), 106.54586791992188f + (MAPY), 20.897172927856445f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -(-0.0f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-5.031685829162598f, -13.926260948181152f, -5.993000030517578f);
    boxPosition = vec3(-54.478511810302734f + (MAPX), 117.06099700927734f + (MAPY), 19.958358764648438f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -(-0.0f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-8.501032829284668f, -2.8576691150665283f, -4.099987030029297f);
    boxPosition = vec3(-45.06622314453125f + (MAPX), 114.4621810913086f + (MAPY), 20.868000030517578f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -(-0.0f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-3.8743982315063477f, -8.045479774475098f, -4.099987030029297f);
    boxPosition = vec3(-42.823970794677734f + (MAPX), 119.93531036376953f + (MAPY), 20.884689331054688f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -(-0.0f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-2.1132969856262207f, -1.392619252204895f, -5.993000030517578f);
    boxPosition = vec3(-51.58463668823242f + (MAPX), 114.03091430664062f + (MAPY), 19.939729690551758f + (MAPZ));
    boxEulerAngles = vec3(179.999991348578f, 0.0f, 136.73161722076097f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-3.835601806640625f, -6.9994611740112305f, -5.9929938316345215f);
    boxPosition = vec3(-44.37236404418945f + (MAPX), 118.21878814697266f + (MAPY), 19.922849655151367f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 159.39486790578027f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-2.749178647994995f, -1.1199140548706055f, -5.992942810058594f);
    boxPosition = vec3(-47.5247917175293f + (MAPX), 116.12020111083984f + (MAPY), 19.92284393310547f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 0.0f, -149.90537190317974f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-16.153032302856445f, -13.92625617980957f, -5.993000030517578f);
    boxPosition = vec3(-64.993896484375f + (MAPX), 105.051513671875f + (MAPY), 24.019380569458008f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-9.18625545501709f, -12.507573127746582f, -5.993000030517578f);
    boxPosition = vec3(-67.66053009033203f + (MAPX), 117.82518005371094f + (MAPY), 25.558963775634766f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.01194429397583f, -12.507367134094238f, -5.992974758148193f);
    boxPosition = vec3(-58.92234802246094f + (MAPX), 118.01396179199219f + (MAPY), 20.513967514038086f + (MAPZ));
    boxEulerAngles = vec3(4.4891263183646994e-09f, -(-30.025743817807832f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-5.111237525939941f, -3.9193005561828613f, -5.993000030517578f);
    boxPosition = vec3(-61.46918869018555f + (MAPX), 122.24138641357422f + (MAPY), 22.026363372802734f + (MAPZ));
    boxEulerAngles = vec3(-9.401824660383858e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-3.6432862281799316f, -2.2340104579925537f, -5.992957592010498f);
    boxPosition = vec3(-63.68602752685547f + (MAPX), 120.4490737915039f + (MAPY), 23.30624771118164f + (MAPZ));
    boxEulerAngles = vec3(-20.199509243841916f, -22.66404810960491f, -136.32397787071628f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-3.6432669162750244f, -2.2339975833892822f, -5.99293851852417f);
    boxPosition = vec3(-59.2789306640625f + (MAPX), 120.41677856445312f + (MAPY), 20.761817932128906f + (MAPZ));
    boxEulerAngles = vec3(22.0211463086937f, -20.904244747309246f, 131.41844038616475f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-16.153043746948242f, -1.9051134586334229f, -0.8989500999450684f);
    boxPosition = vec3(-63.462913513183594f + (MAPX), 123.94266510009766f + (MAPY), 26.55126953125f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-16.153045654296875f, -1.905113697052002f, -0.8989500999450684f);
    boxPosition = vec3(-66.43089294433594f + (MAPX), 123.94266510009766f + (MAPY), 21.410573959350586f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768978118896484f, -1.22879958152771f, -0.8989500999450684f);
    boxPosition = vec3(-66.99405670166016f + (MAPX), 125.20433807373047f + (MAPY), 28.589977264404297f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768978118896484f, -1.22879958152771f, -0.8989500999450684f);
    boxPosition = vec3(-69.26302337646484f + (MAPX), 125.20433807373047f + (MAPY), 29.899961471557617f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768978118896484f, -1.22879958152771f, -0.8989500999450684f);
    boxPosition = vec3(-64.70073699951172f + (MAPX), 125.20433807373047f + (MAPY), 27.265933990478516f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.876898169517517f, -1.2287997007369995f, -0.8989500999450684f);
    boxPosition = vec3(-62.344329833984375f + (MAPX), 125.20433807373047f + (MAPY), 25.90546226501465f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768984079360962f, -1.228799819946289f, -0.8989500999450684f);
    boxPosition = vec3(-60.03669738769531f + (MAPX), 125.20433807373047f + (MAPY), 24.573152542114258f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768986463546753f, -1.2287999391555786f, -0.8989500999450684f);
    boxPosition = vec3(-57.737762451171875f + (MAPX), 125.20433807373047f + (MAPY), 23.24586296081543f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768984079360962f, -1.228799819946289f, -0.8989500999450684f);
    boxPosition = vec3(-69.9570083618164f + (MAPX), 125.20433807373047f + (MAPY), 23.428958892822266f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768986463546753f, -1.2287999391555786f, -0.8989500999450684f);
    boxPosition = vec3(-72.2259750366211f + (MAPX), 125.20433807373047f + (MAPY), 24.738943099975586f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768986463546753f, -1.2287999391555786f, -0.8989500999450684f);
    boxPosition = vec3(-67.66368865966797f + (MAPX), 125.20433807373047f + (MAPY), 22.104915618896484f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.876899003982544f, -1.2288000583648682f, -0.8989500999450684f);
    boxPosition = vec3(-65.3072738647461f + (MAPX), 125.20433807373047f + (MAPY), 20.744443893432617f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.876899242401123f, -1.2288001775741577f, -0.8989500999450684f);
    boxPosition = vec3(-62.9996452331543f + (MAPX), 125.20433807373047f + (MAPY), 19.412134170532227f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768994808197021f, -1.2288002967834473f, -0.8989500999450684f);
    boxPosition = vec3(-60.70071029663086f + (MAPX), 125.20433807373047f + (MAPY), 18.0848445892334f + (MAPZ));
    boxEulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-16.153057098388672f, -13.926362991333008f, -5.992980480194092f);
    boxPosition = vec3(-77.05362701416016f + (MAPX), 105.0514907836914f + (MAPY), 35.145816802978516f + (MAPZ));
    boxEulerAngles = vec3(6.4565671215818614e-06f, -(-55.150000453241944f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.1910244226455688f, -12.506986618041992f, -5.992878437042236f);
    boxPosition = vec3(-72.85975646972656f + (MAPX), 117.81483459472656f + (MAPY), 29.247861862182617f + (MAPZ));
    boxEulerAngles = vec3(6.4433470061039515e-06f, -(-55.172509341651725f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-4.1447649002075195f, -12.506986618041992f, -5.992878437042236f);
    boxPosition = vec3(-77.22274780273438f + (MAPX), 117.81483459472656f + (MAPY), 35.518924713134766f + (MAPZ));
    boxEulerAngles = vec3(6.4433470061039515e-06f, -(-55.172509341651725f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-5.111246585845947f, -3.9193332195281982f, -5.992946147918701f);
    boxPosition = vec3(-74.62297821044922f + (MAPX), 122.23399353027344f + (MAPY), 31.74716567993164f + (MAPZ));
    boxEulerAngles = vec3(5.837744968093344e-06f, -(-53.60293870057196f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-3.301877021789551f, -2.5867772102355957f, -5.9929280281066895f);
    boxPosition = vec3(-75.95060729980469f + (MAPX), 120.79544067382812f + (MAPY), 33.548133850097656f + (MAPZ));
    boxEulerAngles = vec3(-39.758169158618216f, -39.47763621393286f, -127.38769987013009f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-3.3018226623535156f, -2.5867462158203125f, -5.992837905883789f);
    boxPosition = vec3(-73.07401275634766f + (MAPX), 120.39566040039062f + (MAPY), 29.54353904724121f + (MAPZ));
    boxEulerAngles = vec3(-45.99573013510564f, 31.335709213819165f, -63.3304087391395f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-5.747694969177246f, -4.002236366271973f, -5.992878437042236f);
    boxPosition = vec3(-80.0619888305664f + (MAPX), 114.01215362548828f + (MAPY), 39.465274810791016f + (MAPZ));
    boxEulerAngles = vec3(6.4433470061039515e-06f, -(-55.172509341651725f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-5.747664451599121f, -4.002203941345215f, -5.992835521697998f);
    boxPosition = vec3(-79.5380859375f + (MAPX), 115.35032653808594f + (MAPY), 38.699913024902344f + (MAPZ));
    boxEulerAngles = vec3(-39.97134960789806f, -41.82238551448488f, -128.50214085586606f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-6.437243938446045f, -4.002139568328857f, -5.992730617523193f);
    boxPosition = vec3(-77.87712097167969f + (MAPX), 120.43452453613281f + (MAPY), 36.31254196166992f + (MAPZ));
    boxEulerAngles = vec3(-54.37014311418823f, -11.373211803044924f, -98.04467444100005f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-7.753487586975098f, -1.9051213264465332f, -0.8989477157592773f);
    boxPosition = vec3(-72.32882690429688f + (MAPX), 123.94265747070312f + (MAPY), 33.6116828918457f + (MAPZ));
    boxEulerAngles = vec3(6.305221979175104e-06f, -(-54.82502005253274f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768984079360962f, -1.228798270225525f, -0.898947536945343f);
    boxPosition = vec3(-73.74040222167969f + (MAPX), 125.2599105834961f + (MAPY), 35.61079788208008f + (MAPZ));
    boxEulerAngles = vec3(6.51958383315226e-06f, -(-55.36177046845819f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768978118896484f, -1.228797435760498f, -0.8989469408988953f);
    boxPosition = vec3(-72.21380615234375f + (MAPX), 125.2599105834961f + (MAPY), 33.46361541748047f + (MAPZ));
    boxEulerAngles = vec3(5.524545927056776e-06f, -(-52.74247829912293f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768985271453857f, -1.2287980318069458f, -0.8989474177360535f);
    boxPosition = vec3(-70.71154022216797f + (MAPX), 125.2599105834961f + (MAPY), 31.30318832397461f + (MAPZ));
    boxEulerAngles = vec3(5.907588116898787e-06f, -(-53.79012344987075f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-7.753486156463623f, -1.905120849609375f, -0.8989476561546326f);
    boxPosition = vec3(-77.24722290039062f + (MAPX), 123.94265747070312f + (MAPY), 30.132204055786133f + (MAPZ));
    boxEulerAngles = vec3(6.305223200508102e-06f, -(-54.825023467627325f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768986463546753f, -1.228798508644104f, -0.898947536945343f);
    boxPosition = vec3(-78.65879821777344f + (MAPX), 125.2599105834961f + (MAPY), 32.131317138671875f + (MAPZ));
    boxEulerAngles = vec3(6.519582611819262e-06f, -(-55.36177046845819f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768975734710693f, -1.2287973165512085f, -0.8989469408988953f);
    boxPosition = vec3(-77.1322021484375f + (MAPX), 125.2599105834961f + (MAPY), 29.9841365814209f + (MAPZ));
    boxEulerAngles = vec3(5.524545927056776e-06f, -(-52.74247829912293f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768984079360962f, -1.2287979125976562f, -0.8989474177360535f);
    boxPosition = vec3(-75.62993621826172f + (MAPX), 125.2599105834961f + (MAPY), 27.82370948791504f + (MAPZ));
    boxEulerAngles = vec3(5.907589338231785e-06f, -(-53.79012344987075f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-2.042255401611328f, -0.8438174724578857f, -1.3134886026382446f);
    boxPosition = vec3(-75.691162109375f + (MAPX), 124.4269790649414f + (MAPY), 36.6179313659668f + (MAPZ));
    boxEulerAngles = vec3(6.519575283821276e-06f, -(-55.36177046845819f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-3.938777208328247f, -1.4260528087615967f, -1.3134886026382446f);
    boxPosition = vec3(-80.68180084228516f + (MAPX), 123.51990509033203f + (MAPY), 35.03047561645508f + (MAPZ));
    boxEulerAngles = vec3(6.519570398489285e-06f, -(-55.36177046845819f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-3.2817745208740234f, -0.49640941619873047f, -1.3134887218475342f);
    boxPosition = vec3(-80.5099868774414f + (MAPX), 124.4751968383789f + (MAPY), 34.78175735473633f + (MAPZ));
    boxEulerAngles = vec3(6.519565920268294e-06f, -(-55.36178412883653f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.571313738822937f, -0.49640941619873047f, -1.3134887218475342f);
    boxPosition = vec3(-80.141845703125f + (MAPX), 124.91292572021484f + (MAPY), 34.24888229370117f + (MAPZ));
    boxEulerAngles = vec3(6.5195667344902915e-06f, -(-55.361787543931115f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-16.152935028076172f, -13.926281929016113f, -5.99288272857666f);
    boxPosition = vec3(-32.42966842651367f + (MAPX), 105.05148315429688f + (MAPY), 24.36405372619629f + (MAPZ));
    boxEulerAngles = vec3(7.033169014673508e-06f, -(29.863181900466945f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-9.207172393798828f, -13.090703010559082f, -5.99288272857666f);
    boxPosition = vec3(-35.701236724853516f + (MAPX), 117.48953247070312f + (MAPY), 22.485612869262695f + (MAPZ));
    boxEulerAngles = vec3(7.03316820045151e-06f, -(29.863192145750702f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.5468051433563232f, -13.090703010559082f, -5.99288272857666f);
    boxPosition = vec3(-26.693540573120117f + (MAPX), 117.54330444335938f + (MAPY), 27.657590866088867f + (MAPZ));
    boxEulerAngles = vec3(7.03316820045151e-06f, -(29.863192145750702f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-5.243000030517578f, -3.8400790691375732f, -5.99288272857666f);
    boxPosition = vec3(-29.460006713867188f + (MAPX), 122.21344757080078f + (MAPY), 26.06914520263672f + (MAPZ));
    boxEulerAngles = vec3(7.033167386229512e-06f, -(29.86319897593987f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-5.242997646331787f, -3.8400704860687256f, -5.992867469787598f);
    boxPosition = vec3(-32.100013732910156f + (MAPX), 121.05671691894531f + (MAPY), 24.553327560424805f + (MAPZ));
    boxEulerAngles = vec3(22.150393978357855f, 20.557616062025684f, -130.7810334724408f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-5.2428812980651855f, -3.839973211288452f, -5.992798805236816f);
    boxPosition = vec3(-27.336458206176758f + (MAPX), 121.42704010009766f + (MAPY), 27.288414001464844f + (MAPZ));
    boxEulerAngles = vec3(-19.31657410492895f, 23.227122074591588f, 138.36949658373004f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-16.15282440185547f, -1.905092477798462f, -0.8989410996437073f);
    boxPosition = vec3(-34.412269592285156f + (MAPX), 123.94264221191406f + (MAPY), 26.659175872802734f + (MAPZ));
    boxEulerAngles = vec3(-8.647566053665489e-06f, -(29.977877852104385f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768917322158813f, -1.2287896871566772f, -0.8989421725273132f);
    boxPosition = vec3(-40.259525299072266f + (MAPX), 125.20430755615234f + (MAPY), 23.26726722717285f + (MAPZ));
    boxEulerAngles = vec3(-8.697710729662318e-06f, -(30.264776533096185f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768917322158813f, -1.2287896871566772f, -0.8989421725273132f);
    boxPosition = vec3(-37.960693359375f + (MAPX), 125.20430755615234f + (MAPY), 24.608701705932617f + (MAPZ));
    boxEulerAngles = vec3(-8.697710729662318e-06f, -(30.264776533096185f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.876891851425171f, -1.2287896871566772f, -0.8989421725273132f);
    boxPosition = vec3(-35.63922119140625f + (MAPX), 125.20430755615234f + (MAPY), 25.963346481323242f + (MAPZ));
    boxEulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768919706344604f, -1.2287896871566772f, -0.8989421725273132f);
    boxPosition = vec3(-33.33761215209961f + (MAPX), 125.20430755615234f + (MAPY), 27.306400299072266f + (MAPZ));
    boxEulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768922090530396f, -1.2287896871566772f, -0.8989421725273132f);
    boxPosition = vec3(-31.02751922607422f + (MAPX), 125.20430755615234f + (MAPY), 28.65440559387207f + (MAPZ));
    boxEulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.876892328262329f, -1.2287896871566772f, -0.8989421725273132f);
    boxPosition = vec3(-28.749771118164062f + (MAPX), 125.20430755615234f + (MAPY), 29.983535766601562f + (MAPZ));
    boxEulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-16.15282440185547f, -1.9050922393798828f, -0.8989410996437073f);
    boxPosition = vec3(-31.458450317382812f + (MAPX), 123.94264221191406f + (MAPY), 21.46540069580078f + (MAPZ));
    boxEulerAngles = vec3(-8.647565239443491e-06f, -(29.977877852104385f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768919706344604f, -1.2287896871566772f, -0.8989421725273132f);
    boxPosition = vec3(-37.305702209472656f + (MAPX), 125.20430755615234f + (MAPY), 18.0734920501709f + (MAPZ));
    boxEulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768922090530396f, -1.2287896871566772f, -0.8989421725273132f);
    boxPosition = vec3(-35.006874084472656f + (MAPX), 125.20430755615234f + (MAPY), 19.414926528930664f + (MAPZ));
    boxEulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.876892328262329f, -1.2287896871566772f, -0.8989421725273132f);
    boxPosition = vec3(-32.685401916503906f + (MAPX), 125.20430755615234f + (MAPY), 20.76957130432129f + (MAPZ));
    boxEulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768924474716187f, -1.2287896871566772f, -0.8989421725273132f);
    boxPosition = vec3(-30.383792877197266f + (MAPX), 125.20430755615234f + (MAPY), 22.112625122070312f + (MAPZ));
    boxEulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768925666809082f, -1.2287896871566772f, -0.8989421725273132f);
    boxPosition = vec3(-28.073699951171875f + (MAPX), 125.20430755615234f + (MAPY), 23.460630416870117f + (MAPZ));
    boxEulerAngles = vec3(-8.69770910121832e-06f, -(30.264776533096185f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.8768926858901978f, -1.2287896871566772f, -0.8989421725273132f);
    boxPosition = vec3(-25.79595184326172f + (MAPX), 125.20430755615234f + (MAPY), 24.78976058959961f + (MAPZ));
    boxEulerAngles = vec3(-8.69770910121832e-06f, -(30.264776533096185f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-16.15269660949707f, -13.926040649414062f, -5.992833137512207f);
    boxPosition = vec3(-20.970481872558594f + (MAPX), 105.05144500732422f + (MAPY), 35.088497161865234f + (MAPZ));
    boxEulerAngles = vec3(1.1931123074821515e-05f, -(54.84077388385337f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-4.358596324920654f, -13.18424129486084f, -5.992829322814941f);
    boxPosition = vec3(-24.285057067871094f + (MAPX), 117.4466323852539f + (MAPY), 30.333099365234375f + (MAPZ));
    boxEulerAngles = vec3(1.1886087641864988e-05f, -(55.102697978145024f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-2.9781434535980225f, -5.405541896820068f, -5.992829322814941f);
    boxPosition = vec3(-22.173316955566406f + (MAPX), 113.34149932861328f + (MAPY), 33.36051559448242f + (MAPZ));
    boxEulerAngles = vec3(1.188609741252897e-05f, -(55.102697978145024f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-2.9781463146209717f, -5.405553340911865f, -5.992827415466309f);
    boxPosition = vec3(-23.187902450561523f + (MAPX), 117.18025970458984f + (MAPY), 31.90598487854004f + (MAPZ));
    boxEulerAngles = vec3(22.69194260217524f, 51.67595450550919f, -151.94258510616277f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-3.5737740993499756f, -9.297536849975586f, -5.992829322814941f);
    boxPosition = vec3(-17.46780014038086f + (MAPX), 115.95350646972656f + (MAPY), 40.106407165527344f + (MAPZ));
    boxEulerAngles = vec3(1.1886107183192952e-05f, -(55.102697978145024f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-3.5737757682800293f, -9.297525405883789f, -5.992823600769043f);
    boxPosition = vec3(-18.447582244873047f + (MAPX), 115.21334838867188f + (MAPY), 38.701759338378906f + (MAPZ));
    boxEulerAngles = vec3(-30.44728943300268f, 48.42315546046608f, 141.840858267119f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(-1.372329831123352f, -3.254133462905884f, -5.992823600769043f);
    boxPosition = vec3(-19.205615997314453f + (MAPX), 116.29552459716797f + (MAPY), 37.61503982543945f + (MAPZ));
    boxEulerAngles = vec3(-30.44728943300268f, 48.42315546046608f, 141.840858267119f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394783973693848f, 19.950000762939453f, 13.462162017822266f);
    boxPosition = vec3(-79.91456604003906f + (MAPX), 114.09693145751953f + (MAPY), 48.98015213012695f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394729137420654f, 25.057615280151367f, 13.462119102478027f);
    boxPosition = vec3(-86.04442596435547f + (MAPX), 111.6244125366211f + (MAPY), 55.00763702392578f + (MAPZ));
    boxEulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394726753234863f, 25.057615280151367f, 13.462117195129395f);
    boxPosition = vec3(-86.04442596435547f + (MAPX), 111.6244125366211f + (MAPY), 42.98772430419922f + (MAPZ));
    boxEulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394729137420654f, 25.057615280151367f, 13.462119102478027f);
    boxPosition = vec3(-92.04331970214844f + (MAPX), 111.6244125366211f + (MAPY), 48.99794387817383f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394783973693848f, 4.222418308258057f, 5.713043689727783f);
    boxPosition = vec3(-79.91456604003906f + (MAPX), 102.138427734375f + (MAPY), 52.874794006347656f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394783973693848f, 4.222418308258057f, 5.713043689727783f);
    boxPosition = vec3(-79.91456604003906f + (MAPX), 102.138427734375f + (MAPY), 45.13015365600586f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394702911376953f, 0.905704140663147f, 1.542514443397522f);
    boxPosition = vec3(-79.91455078125f + (MAPX), 104.0869369506836f + (MAPY), 50.05832290649414f + (MAPZ));
    boxEulerAngles = vec3(44.970935382226095f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394702911376953f, 0.905704140663147f, 1.5425145626068115f);
    boxPosition = vec3(-79.91455078125f + (MAPX), 104.00344848632812f + (MAPY), 47.8505973815918f + (MAPZ));
    boxEulerAngles = vec3(-44.97100026902321f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394783973693848f, 19.950000762939453f, 13.462162017822266f);
    boxPosition = vec3(-18.01214599609375f + (MAPX), 114.09693145751953f + (MAPY), 48.99785614013672f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394783973693848f, 4.222418308258057f, 5.713043689727783f);
    boxPosition = vec3(-18.01214599609375f + (MAPX), 102.138427734375f + (MAPY), 52.89249801635742f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394783973693848f, 4.222418308258057f, 5.713043689727783f);
    boxPosition = vec3(-18.01214599609375f + (MAPX), 102.138427734375f + (MAPY), 45.147857666015625f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394702911376953f, 0.9057040214538574f, 1.542514443397522f);
    boxPosition = vec3(-18.012130737304688f + (MAPX), 104.0869369506836f + (MAPY), 50.076026916503906f + (MAPZ));
    boxEulerAngles = vec3(44.970935382226095f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394702911376953f, 0.905704140663147f, 1.5425145626068115f);
    boxPosition = vec3(-18.012130737304688f + (MAPX), 104.00344848632812f + (MAPY), 47.86830139160156f + (MAPZ));
    boxEulerAngles = vec3(-44.97100026902321f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394729137420654f, 25.057615280151367f, 13.462119102478027f);
    boxPosition = vec3(-5.975827217102051f + (MAPX), 111.6244125366211f + (MAPY), 48.99794387817383f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394724369049072f, 25.057615280151367f, 13.462115287780762f);
    boxPosition = vec3(-11.971139907836914f + (MAPX), 111.6244125366211f + (MAPY), 55.081886291503906f + (MAPZ));
    boxEulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4394721984863281f, 25.057615280151367f, 13.462113380432129f);
    boxPosition = vec3(-11.971131324768066f + (MAPX), 111.6244125366211f + (MAPY), 43.012451171875f + (MAPZ));
    boxEulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.9647095203399658f, 0.4559999704360962f, 12.95934009552002f);
    boxPosition = vec3(-90.49871063232422f + (MAPX), 123.78119659423828f + (MAPY), 49.13040542602539f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.0432980060577393f, 0.4559999704360962f, 12.95934009552002f);
    boxPosition = vec3(-81.58023834228516f + (MAPX), 123.78119659423828f + (MAPY), 49.13040542602539f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(6.926779270172119f, 0.4559999704360962f, 2.3326807022094727f);
    boxPosition = vec3(-86.03443145751953f + (MAPX), 123.78119659423828f + (MAPY), 53.55587387084961f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(6.926779270172119f, 0.4559999704360962f, 2.3326807022094727f);
    boxPosition = vec3(-86.03443145751953f + (MAPX), 123.78119659423828f + (MAPY), 44.36404800415039f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.9647095203399658f, 0.4559999704360962f, 12.95934009552002f);
    boxPosition = vec3(-90.48426055908203f + (MAPX), 123.78119659423828f + (MAPY), 49.11735153198242f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.0432980060577393f, 0.4559999704360962f, 12.95934009552002f);
    boxPosition = vec3(-81.56578826904297f + (MAPX), 123.78119659423828f + (MAPY), 49.11735153198242f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(6.926779270172119f, 0.4559999704360962f, 2.3326807022094727f);
    boxPosition = vec3(-86.01998138427734f + (MAPX), 123.78119659423828f + (MAPY), 53.54281997680664f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(6.926779270172119f, 0.4559999704360962f, 2.3326807022094727f);
    boxPosition = vec3(-86.01998138427734f + (MAPX), 123.78119659423828f + (MAPY), 44.35099411010742f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.9647095203399658f, 0.4559999704360962f, 12.95934009552002f);
    boxPosition = vec3(-16.640254974365234f + (MAPX), 123.78119659423828f + (MAPY), 49.11735153198242f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.0432980060577393f, 0.4559999704360962f, 12.95934009552002f);
    boxPosition = vec3(-7.721782684326172f + (MAPX), 123.78119659423828f + (MAPY), 49.11735153198242f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(6.926779270172119f, 0.4559999704360962f, 2.3326807022094727f);
    boxPosition = vec3(-12.175975799560547f + (MAPX), 123.78119659423828f + (MAPY), 53.54281997680664f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(6.926779270172119f, 0.4559999704360962f, 2.3326807022094727f);
    boxPosition = vec3(-12.175975799560547f + (MAPX), 123.78119659423828f + (MAPY), 44.35099411010742f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.916860580444336f, 0.09999994933605194f, 1.2791105508804321f);
    boxPosition = vec3(-83.79002380371094f + (MAPX), 99.6512222290039f + (MAPY), 56.3434944152832f + (MAPZ));
    boxEulerAngles = vec3(0.2943439340326583f, 0.6262366195840501f, 10.133630652656928f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.0759334564208984f, 0.09999962896108627f, 1.2790982723236084f);
    boxPosition = vec3(-82.83871459960938f + (MAPX), 99.71932983398438f + (MAPY), 57.615867614746094f + (MAPZ));
    boxEulerAngles = vec3(7.486777816247016f, 0.6262363527797856f, 10.133636629072452f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.745666265487671f, 0.4999956786632538f, 3.9620554447174072f);
    boxPosition = vec3(-80.36149597167969f + (MAPX), 99.57840728759766f + (MAPY), 64.78752136230469f + (MAPZ));
    boxEulerAngles = vec3(6.660267723841174f, -0.2902905102449466f, 1.5386186783604954f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(11.772867202758789f, 1.9999829530715942f, 11.181173324584961f);
    boxPosition = vec3(-67.03697204589844f + (MAPX), 99.03250885009766f + (MAPY), 68.33628845214844f + (MAPZ));
    boxEulerAngles = vec3(-0.23631139183220362f, 0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(11.772867202758789f, 1.9999829530715942f, 11.181173324584961f);
    boxPosition = vec3(-55.36033248901367f + (MAPX), 99.03250885009766f + (MAPY), 68.33628845214844f + (MAPZ));
    boxEulerAngles = vec3(-0.23631139183220362f, 0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(11.772867202758789f, 1.9999828338623047f, 11.181173324584961f);
    boxPosition = vec3(-43.62922668457031f + (MAPX), 99.03250885009766f + (MAPY), 68.33628845214844f + (MAPZ));
    boxEulerAngles = vec3(-0.23631144519305652f, 0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(11.772867202758789f, 1.9999827146530151f, 11.181173324584961f);
    boxPosition = vec3(-31.914894104003906f + (MAPX), 99.03250885009766f + (MAPY), 68.33628845214844f + (MAPZ));
    boxEulerAngles = vec3(-0.2363114985539094f, 0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.590973377227783f, 1.999982237815857f, 6.420229434967041f);
    boxPosition = vec3(-24.80545425415039f + (MAPX), 99.02281951904297f + (MAPY), 65.9909439086914f + (MAPZ));
    boxEulerAngles = vec3(-0.23631163195604163f, 0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(11.772809028625488f, 1.9999712705612183f, 11.181106567382812f);
    boxPosition = vec3(-56.57715606689453f + (MAPX), 97.44789123535156f + (MAPY), 78.8705825805664f + (MAPZ));
    boxEulerAngles = vec3(17.6807881949405f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(14.58283805847168f, 1.9999710321426392f, 8.385830879211426f);
    boxPosition = vec3(-69.62022399902344f + (MAPX), 97.86380004882812f + (MAPY), 77.56586456298828f + (MAPZ));
    boxEulerAngles = vec3(17.680795025129672f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(6.710501194000244f, 1.9999712705612183f, 11.181107521057129f);
    boxPosition = vec3(-47.57149124145508f + (MAPX), 97.44789123535156f + (MAPY), 78.8705825805664f + (MAPZ));
    boxEulerAngles = vec3(17.680789902487795f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(6.538704872131348f, 1.9999678134918213f, 11.181087493896484f);
    boxPosition = vec3(-48.46910095214844f + (MAPX), 96.72219848632812f + (MAPY), 81.1694107055664f + (MAPZ));
    boxEulerAngles = vec3(12.966062290137026f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(9.023391723632812f, 1.9999639987945557f, 11.181075096130371f);
    boxPosition = vec3(-56.14405822753906f + (MAPX), 96.33374786376953f + (MAPY), 82.67776489257812f + (MAPZ));
    boxEulerAngles = vec3(15.847287091500402f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.7898244857788086f, 1.9999638795852661f, 4.360619068145752f);
    boxPosition = vec3(-61.498497009277344f + (MAPX), 95.49950408935547f + (MAPY), 85.21045684814453f + (MAPZ));
    boxEulerAngles = vec3(15.847287091500402f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(5.411869525909424f, 1.9999638795852661f, 4.360619068145752f);
    boxPosition = vec3(-65.01434326171875f + (MAPX), 96.2917709350586f + (MAPY), 82.66045379638672f + (MAPZ));
    boxEulerAngles = vec3(15.847287091500402f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(6.7104597091674805f, 1.9999582767486572f, 6.373169898986816f);
    boxPosition = vec3(-39.454898834228516f + (MAPX), 98.59320068359375f + (MAPY), 76.85437774658203f + (MAPZ));
    boxEulerAngles = vec3(8.153667241523305f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(5.502553462982178f, 1.9999486207962036f, 5.162247657775879f);
    boxPosition = vec3(-33.56798553466797f + (MAPX), 98.6267318725586f + (MAPY), 76.06134796142578f + (MAPZ));
    boxEulerAngles = vec3(12.591641565120682f, 0.4948286891514707f, -3.4558358096318553f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(4.630179405212402f, 1.9999428987503052f, 6.373124599456787f);
    boxPosition = vec3(-43.25553512573242f + (MAPX), 97.03315734863281f + (MAPY), 83.28518676757812f + (MAPZ));
    boxEulerAngles = vec3(7.789539611586171f, -2.4169036323874438f, 17.132919938593563f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(4.629972457885742f, 1.9998725652694702f, 4.9708967208862305f);
    boxPosition = vec3(-39.33913803100586f + (MAPX), 97.4089126586914f + (MAPY), 81.73054504394531f + (MAPZ));
    boxEulerAngles = vec3(4.148453703737937f, 3.324068440494204f, -7.273587121683407f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(6.710443496704102f, 1.9999520778656006f, 7.329125881195068f);
    boxPosition = vec3(-43.395599365234375f + (MAPX), 98.22145080566406f + (MAPY), 77.150146484375f + (MAPZ));
    boxEulerAngles = vec3(15.926119427353397f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(6.475058555603027f, 1.9999746084213257f, 11.299928665161133f);
    boxPosition = vec3(-75.75047302246094f + (MAPX), 98.95337677001953f + (MAPY), 68.34326171875f + (MAPZ));
    boxEulerAngles = vec3(1.8591602031611343f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.3363354206085205f, 6.2919206619262695f, 2.3797647953033447f);
    boxPosition = vec3(-69.98931884765625f + (MAPX), 107.17994689941406f + (MAPY), 65.02070617675781f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.3363354206085205f, 3.1459603309631348f, 2.3797647953033447f);
    boxPosition = vec3(-69.98931884765625f + (MAPX), 102.58721923828125f + (MAPY), 65.09889221191406f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.0198159217834473f, 1.7342653274536133f, 3.970447063446045f);
    boxPosition = vec3(-70.0486068725586f + (MAPX), 100.36532592773438f + (MAPY), 65.02467346191406f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.349531650543213f, 1.6822375059127808f, 3.4145846366882324f);
    boxPosition = vec3(-69.98355102539062f + (MAPX), 111.2369155883789f + (MAPY), 65.0127182006836f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.1049747467041016f, 1.7342653274536133f, 3.374880075454712f);
    boxPosition = vec3(-29.01679039001465f + (MAPX), 100.32316589355469f + (MAPY), 65.03975677490234f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.3349409103393555f, 7.202520847320557f, 2.4636623859405518f);
    boxPosition = vec3(-29.01588249206543f + (MAPX), 104.40106964111328f + (MAPY), 65.03975677490234f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4429469108581543f, 0.6173641681671143f, 1.5085103511810303f);
    boxPosition = vec3(-29.145505905151367f + (MAPX), 108.03313446044922f + (MAPY), 64.80118560791016f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.0733039379119873f, 1.7342653274536133f, 3.2061359882354736f);
    boxPosition = vec3(-37.011207580566406f + (MAPX), 100.32316589355469f + (MAPY), 71.00804901123047f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.3049778938293457f, 3.1910481452941895f, 2.3404793739318848f);
    boxPosition = vec3(-37.011207580566406f + (MAPX), 102.8109130859375f + (MAPY), 71.00169372558594f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.6595813035964966f, 0.7339404225349426f, 1.4979040622711182f);
    boxPosition = vec3(-36.96181869506836f + (MAPX), 104.37153625488281f + (MAPY), 71.08525085449219f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 0.0f, -3.8108468445743156f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.304943323135376f, 7.0840744972229f, 2.3872461318969727f);
    boxPosition = vec3(-39.80268859863281f + (MAPX), 103.1633071899414f + (MAPY), 72.8375244140625f + (MAPZ));
    boxEulerAngles = vec3(-34.21402947723799f, 18.293013908741887f, -74.61004268168702f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.073212146759033f, 1.7342132329940796f, 3.2060868740081787f);
    boxPosition = vec3(-42.80894470214844f + (MAPX), 101.6016616821289f + (MAPY), 74.84982299804688f + (MAPZ));
    boxEulerAngles = vec3(-34.11354714926335f, 18.789355217990252f, -73.51506090489642f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.8828964233398438f, 6.240264415740967f, 1.8231102228164673f);
    boxPosition = vec3(-14.966094017028809f + (MAPX), 126.97420501708984f + (MAPY), 55.02255630493164f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.7699226140975952f, 4.51545524597168f, 1.567874789237976f);
    boxPosition = vec3(-10.996423721313477f + (MAPX), 126.2566146850586f + (MAPY), 55.02255630493164f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.8828964233398438f, 6.240264415740967f, 1.8231102228164673f);
    boxPosition = vec3(-6.05708646774292f + (MAPX), 126.97420501708984f + (MAPY), 55.02255630493164f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.5251461267471313f, 3.432145357131958f, 1.8231102228164673f);
    boxPosition = vec3(-6.0570855140686035f + (MAPX), 125.39830017089844f + (MAPY), 43.62656784057617f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.7510936260223389f, 6.240264415740967f, 1.8231102228164673f);
    boxPosition = vec3(-10.981622695922852f + (MAPX), 126.97669982910156f + (MAPY), 43.020286560058594f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.5251461267471313f, 3.432145357131958f, 1.8231102228164673f);
    boxPosition = vec3(-14.993782997131348f + (MAPX), 125.6747055053711f + (MAPY), 42.98314666748047f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.8828964233398438f, 6.240264415740967f, 1.8231102228164673f);
    boxPosition = vec3(-83.0040512084961f + (MAPX), 126.97420501708984f + (MAPY), 43.011138916015625f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.6319063901901245f, 3.432145357131958f, 1.8231102228164673f);
    boxPosition = vec3(-83.00118255615234f + (MAPX), 125.6747055053711f + (MAPY), 54.85859298706055f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.8828964233398438f, 6.240264415740967f, 1.8231102228164673f);
    boxPosition = vec3(-87.02174377441406f + (MAPX), 126.97420501708984f + (MAPY), 54.986114501953125f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.8828964233398438f, 6.240264415740967f, 1.8231102228164673f);
    boxPosition = vec3(-91.85603332519531f + (MAPX), 126.92522430419922f + (MAPY), 43.12936782836914f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.6319063901901245f, 3.432145357131958f, 1.8231102228164673f);
    boxPosition = vec3(-91.99224853515625f + (MAPX), 125.43270111083984f + (MAPY), 54.543453216552734f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.6319063901901245f, 3.878324270248413f, 1.8231102228164673f);
    boxPosition = vec3(-86.99781036376953f + (MAPX), 125.98971557617188f + (MAPY), 43.12692642211914f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.1617982387542725f, 3.800711154937744f, 1.1962753534317017f);
    boxPosition = vec3(-76.06031799316406f + (MAPX), 100.74909210205078f + (MAPY), 40.02192306518555f + (MAPZ));
    boxEulerAngles = vec3(-8.423854157163378f, -20.949791863789475f, -7.656492594480482e-06f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.19757080078125f, 2.4122378826141357f, 0.7932929992675781f);
    boxPosition = vec3(-77.75029754638672f + (MAPX), 100.59754943847656f + (MAPY), 43.8182487487793f + (MAPZ));
    boxEulerAngles = vec3(4.867968455908706f, -1.6541867449457125e-06f, 16.217022306746117f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.227097988128662f, 1.2978501319885254f, 1.6353298425674438f);
    boxPosition = vec3(-76.26378631591797f + (MAPX), 100.48469543457031f + (MAPY), 42.52497100830078f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.0199317932128906f, 0.06489215791225433f, 4.153727054595947f);
    boxPosition = vec3(-75.21691131591797f + (MAPX), 100.06875610351562f + (MAPY), 40.61332321166992f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 0.0f, -3.667080327168833f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.0244650840759277f, 0.6359465718269348f, 1.097306251525879f);
    boxPosition = vec3(-73.04967498779297f + (MAPX), 100.17463684082031f + (MAPY), 34.74942398071289f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.161790370941162f, 3.0443596839904785f, 1.196270227432251f);
    boxPosition = vec3(-75.42894744873047f + (MAPX), 100.86859130859375f + (MAPY), 40.30752182006836f + (MAPZ));
    boxEulerAngles = vec3(-12.56606079913169f, -17.165742412650058f, 13.120413466321912f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.0214884281158447f, 3.5345864295959473f, 1.1842758655548096f);
    boxPosition = vec3(-76.42626953125f + (MAPX), 100.8612060546875f + (MAPY), 40.903621673583984f + (MAPZ));
    boxEulerAngles = vec3(-42.0142318678922f, -2.4366341279089063f, -11.59954036647705f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.8248710632324219f, 0.8828644752502441f, 0.9211280941963196f);
    boxPosition = vec3(-75.48004913330078f + (MAPX), 100.59532165527344f + (MAPY), 41.0806999206543f + (MAPZ));
    boxEulerAngles = vec3(-12.566055676489814f, -17.16573729000818f, 13.120408343680035f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.824999988079071f, 0.8828644752502441f, 0.9211280941963196f);
    boxPosition = vec3(-77.35387420654297f + (MAPX), 101.1469955444336f + (MAPY), 41.309059143066406f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.6004562377929688f, 1.2155393362045288f, 1.6353203058242798f);
    boxPosition = vec3(-77.74472045898438f + (MAPX), 100.75554656982422f + (MAPY), 42.7237548828125f + (MAPZ));
    boxEulerAngles = vec3(57.447867335331f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.19757080078125f, 2.0504021644592285f, 0.7932929992675781f);
    boxPosition = vec3(-77.70169067382812f + (MAPX), 100.43040466308594f + (MAPY), 43.13095474243164f + (MAPZ));
    boxEulerAngles = vec3(4.867967602135059f, -1.5474650391642633e-06f, 16.217020599198825f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.197549819946289f, 0.8710060715675354f, 0.7932868599891663f);
    boxPosition = vec3(-77.92670440673828f + (MAPX), 101.52191925048828f + (MAPY), 43.25148010253906f + (MAPZ));
    boxEulerAngles = vec3(45.785073440724105f, -4.861744019140708f, 11.238791118858133f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.6502342224121094f, 0.5061595439910889f, 1.1937869787216187f);
    boxPosition = vec3(-63.9312744140625f + (MAPX), 100.13201141357422f + (MAPY), 45.73871612548828f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 43.705653083764986f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.7297306060791016f, 0.506156861782074f, 6.517556190490723f);
    boxPosition = vec3(-46.55611801147461f + (MAPX), 99.95452117919922f + (MAPY), 24.650171279907227f + (MAPZ));
    boxEulerAngles = vec3(7.904074200004469f, 43.127641495063486f, 11.479775560701816f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(6.517524719238281f, 0.5061544179916382f, 4.6);
    boxPosition = vec3(-41.971 + (MAPX), 99.933 + (MAPY), 28.542 + (MAPZ));
    boxEulerAngles = vec3(-10, 140, 0);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(4, 0.506, 1);
    boxPosition = vec3(-39.882 + (MAPX), 100.2 + (MAPY), 26.585 + (MAPZ));
    boxEulerAngles = vec3(-10, -40, 0);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(2, 0.506, 3);
    boxPosition = vec3(-37.824 + (MAPX), 100.3 + (MAPY), 25.255 + (MAPZ));
    boxEulerAngles = vec3(-15, 50, 0);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.3032939434051514f, 0.6175018548965454f, 3.9104771614074707f);
    boxPosition = vec3(-43.27030944824219f + (MAPX), 100.60518646240234f + (MAPY), 24.61647605895996f + (MAPZ));
    boxEulerAngles = vec3(8.073687433889749f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.7747550010681152f, 0.617497980594635f, 3.910478115081787f);
    boxPosition = vec3(-40.348876953125f + (MAPX), 100.26519775390625f + (MAPY), 24.803071975708008f + (MAPZ));
    boxEulerAngles = vec3(7.929977692431741f, 1.5214013722884798f, -10.79151105841797f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.4444267749786377f, 0.617498517036438f, 3.910470724105835f);
    boxPosition = vec3(-45.70943069458008f + (MAPX), 100.63699340820312f + (MAPY), 23.689605712890625f + (MAPZ));
    boxEulerAngles = vec3(7.952978354461759f, -1.395372535992403f, 9.88779165386066f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(4.5710625648498535f, 0.6174969673156738f, 3.9104578495025635f);
    boxPosition = vec3(-37.560611724853516f + (MAPX), 100.33831787109375f + (MAPY), 27.739652633666992f + (MAPZ));
    boxEulerAngles = vec3(-0.11929571051747247f, -1.3898941906695237f, 14.794070213937143f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(4.570981979370117f, 0.6174842715263367f, 3.4411532878875732f);
    boxPosition = vec3(-33.84784698486328f + (MAPX), 100.49056243896484f + (MAPY), 29.19207763671875f + (MAPZ));
    boxEulerAngles = vec3(10.067675784710346f, -24.70581021857516f, -12.513392356668078f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(4.570917129516602f, 0.6174736618995667f, 3.441112518310547f);
    boxPosition = vec3(-36.70840835571289f + (MAPX), 100.08808135986328f + (MAPY), 30.102859497070312f + (MAPZ));
    boxEulerAngles = vec3(13.974030018222596f, -23.249943444155896f, -6.272339216656513e-06f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.1371562480926514f, 1.227376937866211f, 1.821528434753418f);
    boxPosition = vec3(-20.46408462524414f + (MAPX), 100.39659881591797f + (MAPY), 41.6118278503418f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.42302215099334717f, 0.270022988319397f, 0.7195037603378296f);
    boxPosition = vec3(-21.194692611694336f + (MAPX), 100.19007873535156f + (MAPY), 42.074790954589844f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.64073646068573f, 0.2700205147266388f, 2.4155006408691406f);
    boxPosition = vec3(-20.173702239990234f + (MAPX), 100.12782287597656f + (MAPY), 43.585540771484375f + (MAPZ));
    boxEulerAngles = vec3(4.872282147256392f, 25.844510328695712f, 14.616603116279995f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.6407318115234375f, 0.27001962065696716f, 2.415491819381714f);
    boxPosition = vec3(-19.43890953063965f + (MAPX), 100.15076446533203f + (MAPY), 44.18009948730469f + (MAPZ));
    boxEulerAngles = vec3(13.4793475911689f, 8.461187971166668f, 10.046144467125528f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.9579792618751526f, 0.35642877221107483f, 0.7464099526405334f);
    boxPosition = vec3(-19.488296508789062f + (MAPX), 100.38102722167969f + (MAPY), 42.73700714111328f + (MAPZ));
    boxEulerAngles = vec3(-8.256094465864109f, 1.1534183140082845f, 7.89815413354136f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.9893259406089783f, 0.47867703437805176f, 1.0668045282363892f);
    boxPosition = vec3(-19.103288650512695f + (MAPX), 100.21629333496094f + (MAPY), 54.49107360839844f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.9893237352371216f, 0.4786757826805115f, 1.0667997598648071f);
    boxPosition = vec3(-19.015531539916992f + (MAPX), 100.2162857055664f + (MAPY), 54.012451171875f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 28.17137990154793f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.9893259406089783f, 0.47867703437805176f, 1.0668045282363892f);
    boxPosition = vec3(-7.078795433044434f + (MAPX), 100.21629333496094f + (MAPY), 55.771881103515625f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.2854312658309937f, 1.301044225692749f, 0.786234974861145f);
    boxPosition = vec3(-7.15847110748291f + (MAPX), 100.21804809570312f + (MAPY), 56.24834060668945f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.400498390197754f, 0.5403918623924255f, 1.2003716230392456f);
    boxPosition = vec3(-35.81951141357422f + (MAPX), 100.14787292480469f + (MAPY), 72.19966888427734f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -25.005870674097576f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.8797130584716797f, 0.47867512702941895f, 1.0667979717254639f);
    boxPosition = vec3(-46.30879592895508f + (MAPX), 100.11913299560547f + (MAPY), 76.7021713256836f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 29.869335900909128f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.6650418043136597f, 0.558131992816925f, 1.066979169845581f);
    boxPosition = vec3(-46.33772277832031f + (MAPX), 100.08332061767578f + (MAPY), 76.13661193847656f + (MAPZ));
    boxEulerAngles = vec3(-6.073886364884964e-05f, -9.080844930785027f, 29.869349561287468f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.6105358600616455f, 0.6184462904930115f, 1.0667928457260132f);
    boxPosition = vec3(-46.338932037353516f + (MAPX), 99.96936798095703f + (MAPY), 76.99179077148438f + (MAPZ));
    boxEulerAngles = vec3(4.659847864251916e-05f, 23.638140660728155f, 29.869346146192882f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.6105307340621948f, 0.8410839438438416f, 1.0667918920516968f);
    boxPosition = vec3(-45.917198181152344f + (MAPX), 99.65918731689453f + (MAPY), 76.97357177734375f + (MAPZ));
    boxEulerAngles = vec3(-9.33001535434897f, 21.816754605328363f, 6.019853819335146f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.0822665691375732f, 0.5456820726394653f, 0.874915599822998f);
    boxPosition = vec3(-45.241573333740234f + (MAPX), 100.31649017333984f + (MAPY), 76.50729370117188f + (MAPZ));
    boxEulerAngles = vec3(-1.2627842634938806f, 5.965700237613876f, -13.107611984270017f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.1255348920822144f, 0.27862152457237244f, 0.8311588168144226f);
    boxPosition = vec3(-45.56191635131836f + (MAPX), 100.208740234375f + (MAPY), 76.0946273803711f + (MAPZ));
    boxEulerAngles = vec3(-45.22926679701432f, -14.404377185936651f, -0.676554196312711f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.6816788911819458f, 0.5637115836143494f, 1.088313341140747f);
    boxPosition = vec3(-44.376583099365234f + (MAPX), 100.8388671875f + (MAPY), 76.6834945678711f + (MAPZ));
    boxEulerAngles = vec3(-12.561622029944829f, -11.891285920458621f, 18.128348293136636f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.6816788911819458f, 1.037229299545288f, 1.0883134603500366f);
    boxPosition = vec3(-44.230098724365234f + (MAPX), 100.81695556640625f + (MAPY), 77.45632934570312f + (MAPZ));
    boxEulerAngles = vec3(-12.561622029944829f, -11.891285920458621f, 18.12835170823122f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.244404911994934f, 1.1386659145355225f, 1.0882747173309326f);
    boxPosition = vec3(-44.6690788269043f + (MAPX), 100.24158477783203f + (MAPY), 77.19627380371094f + (MAPZ));
    boxEulerAngles = vec3(54.26487282360541f, -75.50755685938337f, -67.51022496399884f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.6951248049736023f, 1.5162369012832642f, 1.9588944911956787f);
    boxPosition = vec3(-44.0681037902832f + (MAPX), 100.29679107666016f + (MAPY), 77.83768463134766f + (MAPZ));
    boxEulerAngles = vec3(54.2648762387f, -75.5075295386267f, -67.51022496399884f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.5703728199005127f, 1.6072033643722534f, 1.1557502746582031f);
    boxPosition = vec3(-43.45943069458008f + (MAPX), 100.52117156982422f + (MAPY), 77.1209487915039f + (MAPZ));
    boxEulerAngles = vec3(-90.95473317685172f, -54.737737065129146f, 65.56701565456271f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.5339264869689941f, 0.9112842679023743f, 1.1557499170303345f);
    boxPosition = vec3(-43.366268157958984f + (MAPX), 101.20550537109375f + (MAPY), 77.76778411865234f + (MAPZ));
    boxEulerAngles = vec3(-90.954623893825f, -54.73774389531832f, 65.5669268621035f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.114264965057373f, 0.5501925349235535f, 1.3187836408615112f);
    boxPosition = vec3(-43.707115173339844f + (MAPX), 100.58856201171875f + (MAPY), 75.94579315185547f + (MAPZ));
    boxEulerAngles = vec3(-33.930662004047086f, -22.41235051604806f, -12.336537414715291f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.7909379601478577f, 0.8252865672111511f, 0.6593897342681885f);
    boxPosition = vec3(-44.33345031738281f + (MAPX), 100.5409164428711f + (MAPY), 75.96971893310547f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 34.647357168751114f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.8450971841812134f, 1.121996521949768f, 1.1474974155426025f);
    boxPosition = vec3(-42.66917037963867f + (MAPX), 99.7457046508789f + (MAPY), 78.0596923828125f + (MAPZ));
    boxEulerAngles = vec3(120.11884863086244f, -75.5075295386267f, -67.51046402061979f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.7528423070907593f, 1.3652454614639282f, 1.065106987953186f);
    boxPosition = vec3(-42.07681655883789f + (MAPX), 99.7665786743164f + (MAPY), 78.006103515625f + (MAPZ));
    boxEulerAngles = vec3(120.11884863086244f, -75.5075295386267f, -67.51046402061979f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.3511553108692169f, 1.6241815090179443f, 1.147481918334961f);
    boxPosition = vec3(-42.115264892578125f + (MAPX), 99.24984741210938f + (MAPY), 79.01890563964844f + (MAPZ));
    boxEulerAngles = vec3(176.46452150963933f, -75.50750221787001f, -67.51077820932161f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.42138636112213135f, 1.0992460250854492f, 1.5491007566452026f);
    boxPosition = vec3(-41.9118537902832f + (MAPX), 99.84220123291016f + (MAPY), 77.1347885131836f + (MAPZ));
    boxEulerAngles = vec3(176.46452150963933f, -75.50750221787001f, -67.51077820932161f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.1217873096466064f, 0.6083914041519165f, 1.8561211824417114f);
    boxPosition = vec3(-66.78717041015625f + (MAPX), 99.73412322998047f + (MAPY), 75.27947235107422f + (MAPZ));
    boxEulerAngles = vec3(17.68080697796072f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.0353643894195557f, 1.631704568862915f, 1.5777019262313843f);
    boxPosition = vec3(-64.58651733398438f + (MAPX), 99.30984497070312f + (MAPY), 76.46227264404297f + (MAPZ));
    boxEulerAngles = vec3(17.684582365024443f, -1.1637468406938132f, -0.37102094499611726f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.3840434551239014f, 1.6317036151885986f, 1.5776997804641724f);
    boxPosition = vec3(-64.33647155761719f + (MAPX), 99.57342529296875f + (MAPY), 75.6353988647461f + (MAPZ));
    boxEulerAngles = vec3(19.118387628424568f, -21.98046911709169f, -7.392553649099397f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.0353643894195557f, 1.631704568862915f, 1.5777021646499634f);
    boxPosition = vec3(-64.64596557617188f + (MAPX), 99.83838653564453f + (MAPY), 76.24405670166016f + (MAPZ));
    boxEulerAngles = vec3(17.684582365024443f, -1.1637468406938132f, -0.37102094499611726f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.8990232944488525f, 2.1851742267608643f, 2.564908742904663f);
    boxPosition = vec3(-75.92134857177734f + (MAPX), 100.36532592773438f + (MAPY), 62.609107971191406f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.768714666366577f, 2.7719271183013916f, 1.9929255247116089f);
    boxPosition = vec3(-75.48342895507812f + (MAPX), 100.36531829833984f + (MAPY), 62.979713439941406f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 22.84948262292888f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.8253557682037354f, 0.3321402370929718f, 1.6034952402114868f);
    boxPosition = vec3(-75.84029388427734f + (MAPX), 101.84427642822266f + (MAPY), 63.03424835205078f + (MAPZ));
    boxEulerAngles = vec3(12.245058129840372f, 20.834766355524582f, 7.005017253329336f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.7517120838165283f, 0.6626157760620117f, 1.6034883260726929f);
    boxPosition = vec3(-76.39762878417969f + (MAPX), 101.62838745117188f + (MAPY), 62.189762115478516f + (MAPZ));
    boxEulerAngles = vec3(11.693423024166169f, -12.028948383180229f, 0.12120505521539517f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.1168081760406494f, 0.5934932231903076f, 1.4876470565795898f);
    boxPosition = vec3(-75.54895782470703f + (MAPX), 100.37399291992188f + (MAPY), 66.80155944824219f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.9574413299560547f, 1.3841447830200195f, 1.4876470565795898f);
    boxPosition = vec3(-77.38719940185547f + (MAPX), 100.37399291992188f + (MAPY), 61.3284912109375f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.4680771827697754f, 1.3841394186019897f, 1.487642765045166f);
    boxPosition = vec3(-77.14984130859375f + (MAPX), 100.37398529052734f + (MAPY), 60.486331939697266f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 46.437838034796805f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.8722339868545532f, 0.8858473896980286f, 1.487638235092163f);
    boxPosition = vec3(-77.32471466064453f + (MAPX), 101.1423568725586f + (MAPY), 60.79917526245117f + (MAPZ));
    boxEulerAngles = vec3(19.453246190220906f, 46.437838034796805f, -1.7344535841309212e-05f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.4991462826728821f, 1.3841394186019897f, 0.7140685319900513f);
    boxPosition = vec3(-76.30138397216797f + (MAPX), 100.37398529052734f + (MAPY), 61.2760124206543f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 46.437838034796805f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.045966386795044f, 2.5606579780578613f, 2.605754852294922f);
    boxPosition = vec3(-81.76553344726562f + (MAPX), 100.38604736328125f + (MAPY), 56.356571197509766f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.6218743324279785f, 0.947441816329956f, 0.9713861346244812f);
    boxPosition = vec3(-79.50634765625f + (MAPX), 100.38603973388672f + (MAPY), 56.055606842041016f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 13.66454902428744f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.055711269378662f, 1.3053615093231201f, 3.545872926712036f);
    boxPosition = vec3(-64.4777603149414f + (MAPX), 98.57506561279297f + (MAPY), 78.7672348022461f + (MAPZ));
    boxEulerAngles = vec3(19.21524141840264f, 22.659395043232838f, 7.647507535343048f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.1833491325378418f, 1.999954342842102f, 4.248776435852051f);
    boxPosition = vec3(-47.677337646484375f + (MAPX), 97.99266052246094f + (MAPY), 78.55644226074219f + (MAPZ));
    boxEulerAngles = vec3(20.285714768903937f, -28.835340883217576f, -10.10793974986757f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.289754629135132f, 1.8223292827606201f, 4.503650665283203f);
    boxPosition = vec3(-49.460941314697266f + (MAPX), 97.80448913574219f + (MAPY), 80.72434997558594f + (MAPZ));
    boxEulerAngles = vec3(19.069358823014923f, -37.997602522682804f, -13.686672007009113f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.5265110731124878f, 2.679922103881836f, 4.5036845207214355f);
    boxPosition = vec3(-47.48369216918945f + (MAPX), 97.74949645996094f + (MAPY), 80.28510284423828f + (MAPZ));
    boxEulerAngles = vec3(3.276960625788626f, -11.48887166512898f, -8.991245655479153f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.5265110731124878f, 2.679922103881836f, 1.711400032043457f);
    boxPosition = vec3(-48.36045455932617f + (MAPX), 97.71595001220703f + (MAPY), 83.14300537109375f + (MAPZ));
    boxEulerAngles = vec3(3.2769608392320375f, -11.488870811355334f, -8.991245655479153f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(4.629956245422363f, 1.9998663663864136f, 4.970881938934326f);
    boxPosition = vec3(-40.98076248168945f + (MAPX), 98.816650390625f + (MAPY), 81.67090606689453f + (MAPZ));
    boxEulerAngles = vec3(4.777880395190353f, -29.882477184872233f, -9.899205753737396f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.1108453273773193f, 4.276276588439941f, 4.208272457122803f);
    boxPosition = vec3(-65.1513442993164f + (MAPX), 100.0163345336914f + (MAPY), 54.71626663208008f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 23.6740947765191f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.116755962371826f, 2.2664268016815186f, 1.809557318687439f);
    boxPosition = vec3(-64.7252197265625f + (MAPX), 102.90035247802734f + (MAPY), 55.788299560546875f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 23.6740947765191f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.0288915634155273f, 1.0854145288467407f, 1.0667879581451416f);
    boxPosition = vec3(-24.496538162231445f + (MAPX), 100.5317153930664f + (MAPY), 59.94657516479492f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -18.79608807696459f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.0288883447647095f, 1.085411787033081f, 1.0987902879714966f);
    boxPosition = vec3(-23.422000885009766f + (MAPX), 100.48589324951172f + (MAPY), 60.09714126586914f + (MAPZ));
    boxEulerAngles = vec3(0.9747312805323479f, -18.7717145469114f, -3.026506553547544f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.0288915634155273f, 1.0854145288467407f, 1.0667879581451416f);
    boxPosition = vec3(-23.952796936035156f + (MAPX), 101.51490020751953f + (MAPY), 59.96515655517578f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -18.79608807696459f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.0288889408111572f, 1.0854082107543945f, 1.0667831897735596f);
    boxPosition = vec3(-22.37727928161621f + (MAPX), 100.70132446289062f + (MAPY), 60.50138473510742f + (MAPZ));
    boxEulerAngles = vec3(-1.6802891814644305f, -18.72353951514801f, 5.221528075652539f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.131768822669983f, 1.0854010581970215f, 1.3725931644439697f);
    boxPosition = vec3(-23.662965774536133f + (MAPX), 100.57051849365234f + (MAPY), 61.51395034790039f + (MAPZ));
    boxEulerAngles = vec3(-1.5919626692217066f, 1.6102327849212559f, 4.637237408669682f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.432934045791626f, 9.042978286743164f, 4.1511101722717285f);
    boxPosition = vec3(-65.18487548828125f + (MAPX), 101.84440612792969f + (MAPY), 29.633747100830078f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 31.89699025414872f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(7.906647682189941f, 6.342826843261719f, 4.1511101722717285f);
    boxPosition = vec3(-60.799381256103516f + (MAPX), 107.45794677734375f + (MAPY), 26.904338836669922f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 31.89699025414872f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.6309500932693481f, 5.7085442543029785f, 4.1511101722717285f);
    boxPosition = vec3(-63.555904388427734f + (MAPX), 102.73540496826172f + (MAPY), 28.61992645263672f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 31.89699025414872f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.68773353099823f, 5.708541393280029f, 4.151106834411621f);
    boxPosition = vec3(-58.21347427368164f + (MAPX), 102.73653411865234f + (MAPY), 25.16110610961914f + (MAPZ));
    boxEulerAngles = vec3(0.8597104680225102f, 31.886625442083222f, 1.6271840337807582f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.3244683742523193f, 2.808577299118042f, 1.9094921350479126f);
    boxPosition = vec3(-62.70801544189453f + (MAPX), 100.01632690429688f + (MAPY), 27.0463809967041f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 34.113209054899436f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.742863416671753f, 2.808567762374878f, 1.9094847440719604f);
    boxPosition = vec3(-61.182647705078125f + (MAPX), 100.01631927490234f + (MAPY), 26.5772762298584f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 57.449028467489896f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.3330776691436768f, 1.6357016563415527f, 0.8634673953056335f);
    boxPosition = vec3(-58.55326843261719f + (MAPX), 100.01631164550781f + (MAPY), 26.047744750976562f + (MAPZ));
    boxEulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.3027400970458984f, 0.7708060145378113f, 3.8798422813415527f);
    boxPosition = vec3(-24.49850845336914f + (MAPX), 105.7392578125f + (MAPY), 38.11702346801758f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 35.30097553647007f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.3027400970458984f, 0.7708060145378113f, 3.8798422813415527f);
    boxPosition = vec3(-24.49850845336914f + (MAPX), 102.82872009277344f + (MAPY), 38.11702346801758f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 35.30097553647007f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.3027400970458984f, 6.181863784790039f, 0.5276586413383484f);
    boxPosition = vec3(-25.4595890045166f + (MAPX), 102.82872009277344f + (MAPY), 36.75968933105469f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 35.30097553647007f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(3.3027400970458984f, 6.181863784790039f, 0.5276586413383484f);
    boxPosition = vec3(-23.595863342285156f + (MAPX), 102.82872009277344f + (MAPY), 39.391841888427734f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 35.30097553647007f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.2099288702011108f, 2.172447443008423f, 2.3497653007507324f);
    boxPosition = vec3(-24.373140335083008f + (MAPX), 100.39659118652344f + (MAPY), 38.33529281616211f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 19.48352954145345f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.8312058448791504f, 2.1724252700805664f, 3.6186177730560303f);
    boxPosition = vec3(-26.115230560302734f + (MAPX), 100.08478546142578f + (MAPY), 34.44472122192383f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -3.188667410718106f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.849534511566162f, 1.4568233489990234f, 2.2503085136413574f);
    boxPosition = vec3(-24.445858001708984f + (MAPX), 106.50621795654297f + (MAPY), 37.16318130493164f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 35.30097553647007f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.3509410619735718f, 4.276251316070557f, 5.5145182609558105f);
    boxPosition = vec3(-57.3437385559082f + (MAPX), 100.20632934570312f + (MAPY), 56.64642333984375f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 17.788167306429564f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.3509371280670166f, 4.276229381561279f, 2.8123979568481445f);
    boxPosition = vec3(-63.13749694824219f + (MAPX), 102.05230712890625f + (MAPY), 41.383949279785156f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -1.0896361932697072f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.3509324789047241f, 2.7795376777648926f, 2.8123879432678223f);
    boxPosition = vec3(-56.93417739868164f + (MAPX), 100.74541473388672f + (MAPY), 35.11125564575195f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -23.885209093575025f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.3509324789047241f, 4.2762064933776855f, 5.514500141143799f);
    boxPosition = vec3(-38.96821594238281f + (MAPX), 100.20631408691406f + (MAPY), 48.01899337768555f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 6.5528625722559f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.350921392440796f, 4.276169300079346f, 2.686642646789551f);
    boxPosition = vec3(-35.004669189453125f + (MAPX), 100.206298828125f + (MAPY), 41.2084846496582f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 23.370209415061478f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.3508974313735962f, 4.276102542877197f, 2.8746590614318848f);
    boxPosition = vec3(-33.034629821777344f + (MAPX), 100.20629119873047f + (MAPY), 57.30351638793945f + (MAPZ));
    boxEulerAngles = vec3(179.999991348578f, -(21.904616451264115f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.6502342224121094f, 0.5061594247817993f, 1.1937867403030396f);
    boxPosition = vec3(-65.95882415771484f + (MAPX), 100.53648376464844f + (MAPY), 47.136268615722656f + (MAPZ));
    boxEulerAngles = vec3(-89.99998884409983f, 0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.650203227996826f, 0.5061525106430054f, 1.1937720775604248f);
    boxPosition = vec3(-47.533782958984375f + (MAPX), 100.22769165039062f + (MAPY), 66.69246673583984f + (MAPZ));
    boxEulerAngles = vec3(173.2816943375484f, -(45.54360917809123f), 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.6499550342559814f, 0.5061374306678772f, 1.1937456130981445f);
    boxPosition = vec3(-49.26051712036133f + (MAPX), 100.55846405029297f + (MAPY), 66.35468292236328f + (MAPZ));
    boxEulerAngles = vec3(-70.58603673217401f, 108.856, 20.426);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(4.07969331741333f, 0.5061299204826355f, 1.1937311887741089f);
    boxPosition = vec3(-41.01167678833008f + (MAPX), 100.47013092041016f + (MAPY), 58.2442626953125f + (MAPZ));
    boxEulerAngles = vec3(-90.00015276863991f, 66.62704735337034f, -0.00013773504390357996f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(4.0796942710876465f, 0.506130039691925f, 1.193731427192688f);
    boxPosition = vec3(-29.214153289794922f + (MAPX), 100.47013854980469f + (MAPY), 43.1866455078125f + (MAPZ));
    boxEulerAngles = vec3(90.00019374977492f, -90.00000250447816f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(2.651801109313965f, 0.506130039691925f, 1.193731427192688f);
    boxPosition = vec3(-26.996849060058594f + (MAPX), 100.47014617919922f + (MAPY), 52.97856903076172f + (MAPZ));
    boxEulerAngles = vec3(90.00019374977492f, 0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.0974222421646118f, 7.202520847320557f, 1.406652808189392f);
    boxPosition = vec3(-24.998699188232422f + (MAPX), 103.33746337890625f + (MAPY), 63.16604995727539f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(1.262032389640808f, 7.202511310577393f, 1.4066494703292847f);
    boxPosition = vec3(-68.37962341308594f + (MAPX), 102.8046875f + (MAPY), 76.13838958740234f + (MAPZ));
    boxEulerAngles = vec3(8.85952033469358f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::WALL;
    boxSize = vec3(0.49063050746917725f, 3.1459603309631348f, 0.4283576011657715f);
    boxPosition = vec3(-69.54641723632812f + (MAPX), 101.47850799560547f + (MAPY), 73.10081481933594f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

//    boxType = Map::DOOR;
//    boxSize = vec3(0.5664000511169434f, 7.945343494415283f, 2.413800001144409f);
//    boxPosition = vec3(-79.71293640136719f + (MAPX), 100.41064453125f + (MAPY), 49.08203125f + (MAPZ));
//    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
//
//    boxType = Map::DOOR;
//    boxSize = vec3(0.5664000511169434f, 7.945343494415283f, 2.413800001144409f);
//    boxPosition = vec3(-18.24441909790039f + (MAPX), 100.41064453125f + (MAPY), 49.08203125f + (MAPZ));
//    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::ELEVATOR;
    boxSize = vec3(7.02209997177124f, 1.0f, 7.021727561950684f);
    boxPosition = vec3(-12.227217674255371f + (MAPX), 123.5608139038086f + (MAPY), 49.0118522644043f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::ELEVATOR;
    boxSize = vec3(7.02209997177124f, 1.0f, 7.021727561950684f);
    boxPosition = vec3(-86.04368591308594f + (MAPX), 123.5608139038086f + (MAPY), 49.0118522644043f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::AIR;
    boxSize = vec3(22.118587493896484f, 34.160240173339844f, 0.9999827742576599f);
    boxPosition = vec3(-77.25244903564453f + (MAPX), 100.03518676757812f + (MAPY), 65.96394348144531f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -73.81431881319136f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::AIR;
    boxSize = vec3(22.11847686767578f, 34.160064697265625f, 0.9999775886535645f);
    boxPosition = vec3(-24.610084533691406f + (MAPX), 100.0351791381836f + (MAPY), 64.84906768798828f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 54.58096714820443f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::AIR;
    boxSize = vec3(18.13706398010254f, 34.15998458862305f, 0.999973714351654f);
    boxPosition = vec3(-68.18663787841797f + (MAPX), 98.04540252685547f + (MAPY), 80.27544403076172f + (MAPZ));
    boxEulerAngles = vec3(0.0f, -34.62470826146335f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::AIR;
    boxSize = vec3(18.137014389038086f, 34.159786224365234f, 0.9999696016311646f);
    boxPosition = vec3(-36.88357925415039f + (MAPX), 98.0453872680664f + (MAPY), 78.03290557861328f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 36.56689987271316f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    boxType = Map::AIR;
    boxSize = vec3(20.132038116455078f, 34.159706115722656f, 0.9999676942825317f);
    boxPosition = vec3(-52.44977951049805f + (MAPX), 98.04537963867188f + (MAPY), 84.4310302734375f + (MAPZ));
    boxEulerAngles = vec3(0.0f, 7.596097555234008f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));

    MapSystemManager::Instance()->updateGrids();
//
//    Node* testNode1 = new Node();
//    testNode1->loadUnitCube();
//    testNode1->geometries[0]->setShader(cubeShader);
//    testNode1->scale = vec3(1.0f, 1.0f, 1.0f);
//    testNode1->position = vec3(0.0f + (MAPX), 0.0f + (MAPY), 0.0f + (MAPZ));
//    testNode1->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode1);
//    Node* testNode2 = new Node();
//    testNode2->loadUnitCube();
//    testNode2->geometries[0]->setShader(cubeShader);
//    testNode2->scale = vec3(62.400001525878906f, 2.0f, 42.694854736328125f);
//    testNode2->position = vec3(-50.78607940673828f + (MAPX), 99.01634216308594f + (MAPY), 41.54486846923828f + (MAPZ));
//    testNode2->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode2);
//    Node* testNode3 = new Node();
//    testNode3->loadUnitCube();
//    testNode3->geometries[0]->setShader(cubeShader);
//    testNode3->scale = vec3(12.240461349487305f, 2.0f, 12.95934009552002f);
//    testNode3->position = vec3(-87.5407485961914f + (MAPX), 99.01634216308594f + (MAPY), 49.13040542602539f + (MAPZ));
//    testNode3->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode3);
//    Node* testNode4 = new Node();
//    testNode4->loadUnitCube();
//    testNode4->geometries[0]->setShader(cubeShader);
//    testNode4->scale = vec3(13.731521606445312f, 2.0f, 14.384867668151855f);
//    testNode4->position = vec3(-12.861579895019531f + (MAPX), 99.01634216308594f + (MAPY), 49.0954704284668f + (MAPZ));
//    testNode4->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode4);
//    Node* testNode5 = new Node();
//    testNode5->loadUnitCube();
//    testNode5->geometries[0]->setShader(cubeShader);
//    testNode5->scale = vec3(-16.15308380126953f, -13.926260948181152f, -4.099987030029297f);
//    testNode5->position = vec3(-48.89267349243164f + (MAPX), 106.54586791992188f + (MAPY), 20.897172927856445f + (MAPZ));
//    testNode5->eulerAngles = vec3(0.0f, -(-0.0f), 0.0f);
//    Engine::main->addNode(testNode5);
//    Node* testNode6 = new Node();
//    testNode6->loadUnitCube();
//    testNode6->geometries[0]->setShader(cubeShader);
//    testNode6->scale = vec3(-5.031685829162598f, -13.926260948181152f, -5.993000030517578f);
//    testNode6->position = vec3(-54.478511810302734f + (MAPX), 117.06099700927734f + (MAPY), 19.958358764648438f + (MAPZ));
//    testNode6->eulerAngles = vec3(0.0f, -(-0.0f), 0.0f);
//    Engine::main->addNode(testNode6);
//    Node* testNode7 = new Node();
//    testNode7->loadUnitCube();
//    testNode7->geometries[0]->setShader(cubeShader);
//    testNode7->scale = vec3(-8.501032829284668f, -2.8576691150665283f, -4.099987030029297f);
//    testNode7->position = vec3(-45.06622314453125f + (MAPX), 114.4621810913086f + (MAPY), 20.868000030517578f + (MAPZ));
//    testNode7->eulerAngles = vec3(0.0f, -(-0.0f), 0.0f);
//    Engine::main->addNode(testNode7);
//    Node* testNode8 = new Node();
//    testNode8->loadUnitCube();
//    testNode8->geometries[0]->setShader(cubeShader);
//    testNode8->scale = vec3(-3.8743982315063477f, -8.045479774475098f, -4.099987030029297f);
//    testNode8->position = vec3(-42.823970794677734f + (MAPX), 119.93531036376953f + (MAPY), 20.884689331054688f + (MAPZ));
//    testNode8->eulerAngles = vec3(0.0f, -(-0.0f), 0.0f);
//    Engine::main->addNode(testNode8);
//    Node* testNode9 = new Node();
//    testNode9->loadUnitCube();
//    testNode9->geometries[0]->setShader(cubeShader);
//    testNode9->scale = vec3(-2.1132969856262207f, -1.392619252204895f, -5.993000030517578f);
//    testNode9->position = vec3(-51.58463668823242f + (MAPX), 114.03091430664062f + (MAPY), 19.939729690551758f + (MAPZ));
//    testNode9->eulerAngles = vec3(179.999991348578f, 0.0f, 136.73161722076097f);
//    Engine::main->addNode(testNode9);
//    Node* testNode10 = new Node();
//    testNode10->loadUnitCube();
//    testNode10->geometries[0]->setShader(cubeShader);
//    testNode10->scale = vec3(-3.835601806640625f, -6.9994611740112305f, -5.9929938316345215f);
//    testNode10->position = vec3(-44.37236404418945f + (MAPX), 118.21878814697266f + (MAPY), 19.922849655151367f + (MAPZ));
//    testNode10->eulerAngles = vec3(0.0f, -0.0f, 159.39486790578027f);
//    Engine::main->addNode(testNode10);
//    Node* testNode11 = new Node();
//    testNode11->loadUnitCube();
//    testNode11->geometries[0]->setShader(cubeShader);
//    testNode11->scale = vec3(-2.749178647994995f, -1.1199140548706055f, -5.992942810058594f);
//    testNode11->position = vec3(-47.5247917175293f + (MAPX), 116.12020111083984f + (MAPY), 19.92284393310547f + (MAPZ));
//    testNode11->eulerAngles = vec3(0.0f, 0.0f, -149.90537190317974f);
//    Engine::main->addNode(testNode11);
//    Node* testNode12 = new Node();
//    testNode12->loadUnitCube();
//    testNode12->geometries[0]->setShader(cubeShader);
//    testNode12->scale = vec3(-16.153032302856445f, -13.92625617980957f, -5.993000030517578f);
//    testNode12->position = vec3(-64.993896484375f + (MAPX), 105.051513671875f + (MAPY), 24.019380569458008f + (MAPZ));
//    testNode12->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode12);
//    Node* testNode13 = new Node();
//    testNode13->loadUnitCube();
//    testNode13->geometries[0]->setShader(cubeShader);
//    testNode13->scale = vec3(-9.18625545501709f, -12.507573127746582f, -5.993000030517578f);
//    testNode13->position = vec3(-67.66053009033203f + (MAPX), 117.82518005371094f + (MAPY), 25.558963775634766f + (MAPZ));
//    testNode13->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode13);
//    Node* testNode14 = new Node();
//    testNode14->loadUnitCube();
//    testNode14->geometries[0]->setShader(cubeShader);
//    testNode14->scale = vec3(-1.01194429397583f, -12.507367134094238f, -5.992974758148193f);
//    testNode14->position = vec3(-58.92234802246094f + (MAPX), 118.01396179199219f + (MAPY), 20.513967514038086f + (MAPZ));
//    testNode14->eulerAngles = vec3(4.4891263183646994e-09f, -(-30.025743817807832f), 0.0f);
//    Engine::main->addNode(testNode14);
//    Node* testNode15 = new Node();
//    testNode15->loadUnitCube();
//    testNode15->geometries[0]->setShader(cubeShader);
//    testNode15->scale = vec3(-5.111237525939941f, -3.9193005561828613f, -5.993000030517578f);
//    testNode15->position = vec3(-61.46918869018555f + (MAPX), 122.24138641357422f + (MAPY), 22.026363372802734f + (MAPZ));
//    testNode15->eulerAngles = vec3(-9.401824660383858e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode15);
//    Node* testNode16 = new Node();
//    testNode16->loadUnitCube();
//    testNode16->geometries[0]->setShader(cubeShader);
//    testNode16->scale = vec3(-3.6432862281799316f, -2.2340104579925537f, -5.992957592010498f);
//    testNode16->position = vec3(-63.68602752685547f + (MAPX), 120.4490737915039f + (MAPY), 23.30624771118164f + (MAPZ));
//    testNode16->eulerAngles = vec3(-20.199509243841916f, -22.66404810960491f, -136.32397787071628f);
//    Engine::main->addNode(testNode16);
//    Node* testNode17 = new Node();
//    testNode17->loadUnitCube();
//    testNode17->geometries[0]->setShader(cubeShader);
//    testNode17->scale = vec3(-3.6432669162750244f, -2.2339975833892822f, -5.99293851852417f);
//    testNode17->position = vec3(-59.2789306640625f + (MAPX), 120.41677856445312f + (MAPY), 20.761817932128906f + (MAPZ));
//    testNode17->eulerAngles = vec3(22.0211463086937f, -20.904244747309246f, 131.41844038616475f);
//    Engine::main->addNode(testNode17);
//    Node* testNode18 = new Node();
//    testNode18->loadUnitCube();
//    testNode18->geometries[0]->setShader(cubeShader);
//    testNode18->scale = vec3(-16.153043746948242f, -1.9051134586334229f, -0.8989500999450684f);
//    testNode18->position = vec3(-63.462913513183594f + (MAPX), 123.94266510009766f + (MAPY), 26.55126953125f + (MAPZ));
//    testNode18->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode18);
//    Node* testNode19 = new Node();
//    testNode19->loadUnitCube();
//    testNode19->geometries[0]->setShader(cubeShader);
//    testNode19->scale = vec3(-16.153045654296875f, -1.905113697052002f, -0.8989500999450684f);
//    testNode19->position = vec3(-66.43089294433594f + (MAPX), 123.94266510009766f + (MAPY), 21.410573959350586f + (MAPZ));
//    testNode19->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode19);
//    Node* testNode20 = new Node();
//    testNode20->loadUnitCube();
//    testNode20->geometries[0]->setShader(cubeShader);
//    testNode20->scale = vec3(-1.8768978118896484f, -1.22879958152771f, -0.8989500999450684f);
//    testNode20->position = vec3(-66.99405670166016f + (MAPX), 125.20433807373047f + (MAPY), 28.589977264404297f + (MAPZ));
//    testNode20->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode20);
//    Node* testNode21 = new Node();
//    testNode21->loadUnitCube();
//    testNode21->geometries[0]->setShader(cubeShader);
//    testNode21->scale = vec3(-1.8768978118896484f, -1.22879958152771f, -0.8989500999450684f);
//    testNode21->position = vec3(-69.26302337646484f + (MAPX), 125.20433807373047f + (MAPY), 29.899961471557617f + (MAPZ));
//    testNode21->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode21);
//    Node* testNode22 = new Node();
//    testNode22->loadUnitCube();
//    testNode22->geometries[0]->setShader(cubeShader);
//    testNode22->scale = vec3(-1.8768978118896484f, -1.22879958152771f, -0.8989500999450684f);
//    testNode22->position = vec3(-64.70073699951172f + (MAPX), 125.20433807373047f + (MAPY), 27.265933990478516f + (MAPZ));
//    testNode22->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode22);
//    Node* testNode23 = new Node();
//    testNode23->loadUnitCube();
//    testNode23->geometries[0]->setShader(cubeShader);
//    testNode23->scale = vec3(-1.876898169517517f, -1.2287997007369995f, -0.8989500999450684f);
//    testNode23->position = vec3(-62.344329833984375f + (MAPX), 125.20433807373047f + (MAPY), 25.90546226501465f + (MAPZ));
//    testNode23->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode23);
//    Node* testNode24 = new Node();
//    testNode24->loadUnitCube();
//    testNode24->geometries[0]->setShader(cubeShader);
//    testNode24->scale = vec3(-1.8768984079360962f, -1.228799819946289f, -0.8989500999450684f);
//    testNode24->position = vec3(-60.03669738769531f + (MAPX), 125.20433807373047f + (MAPY), 24.573152542114258f + (MAPZ));
//    testNode24->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode24);
//    Node* testNode25 = new Node();
//    testNode25->loadUnitCube();
//    testNode25->geometries[0]->setShader(cubeShader);
//    testNode25->scale = vec3(-1.8768986463546753f, -1.2287999391555786f, -0.8989500999450684f);
//    testNode25->position = vec3(-57.737762451171875f + (MAPX), 125.20433807373047f + (MAPY), 23.24586296081543f + (MAPZ));
//    testNode25->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode25);
//    Node* testNode26 = new Node();
//    testNode26->loadUnitCube();
//    testNode26->geometries[0]->setShader(cubeShader);
//    testNode26->scale = vec3(-1.8768984079360962f, -1.228799819946289f, -0.8989500999450684f);
//    testNode26->position = vec3(-69.9570083618164f + (MAPX), 125.20433807373047f + (MAPY), 23.428958892822266f + (MAPZ));
//    testNode26->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode26);
//    Node* testNode27 = new Node();
//    testNode27->loadUnitCube();
//    testNode27->geometries[0]->setShader(cubeShader);
//    testNode27->scale = vec3(-1.8768986463546753f, -1.2287999391555786f, -0.8989500999450684f);
//    testNode27->position = vec3(-72.2259750366211f + (MAPX), 125.20433807373047f + (MAPY), 24.738943099975586f + (MAPZ));
//    testNode27->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode27);
//    Node* testNode28 = new Node();
//    testNode28->loadUnitCube();
//    testNode28->geometries[0]->setShader(cubeShader);
//    testNode28->scale = vec3(-1.8768986463546753f, -1.2287999391555786f, -0.8989500999450684f);
//    testNode28->position = vec3(-67.66368865966797f + (MAPX), 125.20433807373047f + (MAPY), 22.104915618896484f + (MAPZ));
//    testNode28->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode28);
//    Node* testNode29 = new Node();
//    testNode29->loadUnitCube();
//    testNode29->geometries[0]->setShader(cubeShader);
//    testNode29->scale = vec3(-1.876899003982544f, -1.2288000583648682f, -0.8989500999450684f);
//    testNode29->position = vec3(-65.3072738647461f + (MAPX), 125.20433807373047f + (MAPY), 20.744443893432617f + (MAPZ));
//    testNode29->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode29);
//    Node* testNode30 = new Node();
//    testNode30->loadUnitCube();
//    testNode30->geometries[0]->setShader(cubeShader);
//    testNode30->scale = vec3(-1.876899242401123f, -1.2288001775741577f, -0.8989500999450684f);
//    testNode30->position = vec3(-62.9996452331543f + (MAPX), 125.20433807373047f + (MAPY), 19.412134170532227f + (MAPZ));
//    testNode30->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode30);
//    Node* testNode31 = new Node();
//    testNode31->loadUnitCube();
//    testNode31->geometries[0]->setShader(cubeShader);
//    testNode31->scale = vec3(-1.8768994808197021f, -1.2288002967834473f, -0.8989500999450684f);
//    testNode31->position = vec3(-60.70071029663086f + (MAPX), 125.20433807373047f + (MAPY), 18.0848445892334f + (MAPZ));
//    testNode31->eulerAngles = vec3(-7.051368737944958e-13f, -(-29.999994004636886f), 0.0f);
//    Engine::main->addNode(testNode31);
//    Node* testNode32 = new Node();
//    testNode32->loadUnitCube();
//    testNode32->geometries[0]->setShader(cubeShader);
//    testNode32->scale = vec3(-16.153057098388672f, -13.926362991333008f, -5.992980480194092f);
//    testNode32->position = vec3(-77.05362701416016f + (MAPX), 105.0514907836914f + (MAPY), 35.145816802978516f + (MAPZ));
//    testNode32->eulerAngles = vec3(6.4565671215818614e-06f, -(-55.150000453241944f), 0.0f);
//    Engine::main->addNode(testNode32);
//    Node* testNode33 = new Node();
//    testNode33->loadUnitCube();
//    testNode33->geometries[0]->setShader(cubeShader);
//    testNode33->scale = vec3(-1.1910244226455688f, -12.506986618041992f, -5.992878437042236f);
//    testNode33->position = vec3(-72.85975646972656f + (MAPX), 117.81483459472656f + (MAPY), 29.247861862182617f + (MAPZ));
//    testNode33->eulerAngles = vec3(6.4433470061039515e-06f, -(-55.172509341651725f), 0.0f);
//    Engine::main->addNode(testNode33);
//    Node* testNode34 = new Node();
//    testNode34->loadUnitCube();
//    testNode34->geometries[0]->setShader(cubeShader);
//    testNode34->scale = vec3(-4.1447649002075195f, -12.506986618041992f, -5.992878437042236f);
//    testNode34->position = vec3(-77.22274780273438f + (MAPX), 117.81483459472656f + (MAPY), 35.518924713134766f + (MAPZ));
//    testNode34->eulerAngles = vec3(6.4433470061039515e-06f, -(-55.172509341651725f), 0.0f);
//    Engine::main->addNode(testNode34);
//    Node* testNode35 = new Node();
//    testNode35->loadUnitCube();
//    testNode35->geometries[0]->setShader(cubeShader);
//    testNode35->scale = vec3(-5.111246585845947f, -3.9193332195281982f, -5.992946147918701f);
//    testNode35->position = vec3(-74.62297821044922f + (MAPX), 122.23399353027344f + (MAPY), 31.74716567993164f + (MAPZ));
//    testNode35->eulerAngles = vec3(5.837744968093344e-06f, -(-53.60293870057196f), 0.0f);
//    Engine::main->addNode(testNode35);
//    Node* testNode36 = new Node();
//    testNode36->loadUnitCube();
//    testNode36->geometries[0]->setShader(cubeShader);
//    testNode36->scale = vec3(-3.301877021789551f, -2.5867772102355957f, -5.9929280281066895f);
//    testNode36->position = vec3(-75.95060729980469f + (MAPX), 120.79544067382812f + (MAPY), 33.548133850097656f + (MAPZ));
//    testNode36->eulerAngles = vec3(-39.758169158618216f, -39.47763621393286f, -127.38769987013009f);
//    Engine::main->addNode(testNode36);
//    Node* testNode37 = new Node();
//    testNode37->loadUnitCube();
//    testNode37->geometries[0]->setShader(cubeShader);
//    testNode37->scale = vec3(-3.3018226623535156f, -2.5867462158203125f, -5.992837905883789f);
//    testNode37->position = vec3(-73.07401275634766f + (MAPX), 120.39566040039062f + (MAPY), 29.54353904724121f + (MAPZ));
//    testNode37->eulerAngles = vec3(-45.99573013510564f, 31.335709213819165f, -63.3304087391395f);
//    Engine::main->addNode(testNode37);
//    Node* testNode38 = new Node();
//    testNode38->loadUnitCube();
//    testNode38->geometries[0]->setShader(cubeShader);
//    testNode38->scale = vec3(-5.747694969177246f, -4.002236366271973f, -5.992878437042236f);
//    testNode38->position = vec3(-80.0619888305664f + (MAPX), 114.01215362548828f + (MAPY), 39.465274810791016f + (MAPZ));
//    testNode38->eulerAngles = vec3(6.4433470061039515e-06f, -(-55.172509341651725f), 0.0f);
//    Engine::main->addNode(testNode38);
//    Node* testNode39 = new Node();
//    testNode39->loadUnitCube();
//    testNode39->geometries[0]->setShader(cubeShader);
//    testNode39->scale = vec3(-5.747664451599121f, -4.002203941345215f, -5.992835521697998f);
//    testNode39->position = vec3(-79.5380859375f + (MAPX), 115.35032653808594f + (MAPY), 38.699913024902344f + (MAPZ));
//    testNode39->eulerAngles = vec3(-39.97134960789806f, -41.82238551448488f, -128.50214085586606f);
//    Engine::main->addNode(testNode39);
//    Node* testNode40 = new Node();
//    testNode40->loadUnitCube();
//    testNode40->geometries[0]->setShader(cubeShader);
//    testNode40->scale = vec3(-6.437243938446045f, -4.002139568328857f, -5.992730617523193f);
//    testNode40->position = vec3(-77.87712097167969f + (MAPX), 120.43452453613281f + (MAPY), 36.31254196166992f + (MAPZ));
//    testNode40->eulerAngles = vec3(-54.37014311418823f, -11.373211803044924f, -98.04467444100005f);
//    Engine::main->addNode(testNode40);
//    Node* testNode41 = new Node();
//    testNode41->loadUnitCube();
//    testNode41->geometries[0]->setShader(cubeShader);
//    testNode41->scale = vec3(-7.753487586975098f, -1.9051213264465332f, -0.8989477157592773f);
//    testNode41->position = vec3(-72.32882690429688f + (MAPX), 123.94265747070312f + (MAPY), 33.6116828918457f + (MAPZ));
//    testNode41->eulerAngles = vec3(6.305221979175104e-06f, -(-54.82502005253274f), 0.0f);
//    Engine::main->addNode(testNode41);
//    Node* testNode42 = new Node();
//    testNode42->loadUnitCube();
//    testNode42->geometries[0]->setShader(cubeShader);
//    testNode42->scale = vec3(-1.8768984079360962f, -1.228798270225525f, -0.898947536945343f);
//    testNode42->position = vec3(-73.74040222167969f + (MAPX), 125.2599105834961f + (MAPY), 35.61079788208008f + (MAPZ));
//    testNode42->eulerAngles = vec3(6.51958383315226e-06f, -(-55.36177046845819f), 0.0f);
//    Engine::main->addNode(testNode42);
//    Node* testNode43 = new Node();
//    testNode43->loadUnitCube();
//    testNode43->geometries[0]->setShader(cubeShader);
//    testNode43->scale = vec3(-1.8768978118896484f, -1.228797435760498f, -0.8989469408988953f);
//    testNode43->position = vec3(-72.21380615234375f + (MAPX), 125.2599105834961f + (MAPY), 33.46361541748047f + (MAPZ));
//    testNode43->eulerAngles = vec3(5.524545927056776e-06f, -(-52.74247829912293f), 0.0f);
//    Engine::main->addNode(testNode43);
//    Node* testNode44 = new Node();
//    testNode44->loadUnitCube();
//    testNode44->geometries[0]->setShader(cubeShader);
//    testNode44->scale = vec3(-1.8768985271453857f, -1.2287980318069458f, -0.8989474177360535f);
//    testNode44->position = vec3(-70.71154022216797f + (MAPX), 125.2599105834961f + (MAPY), 31.30318832397461f + (MAPZ));
//    testNode44->eulerAngles = vec3(5.907588116898787e-06f, -(-53.79012344987075f), 0.0f);
//    Engine::main->addNode(testNode44);
//    Node* testNode45 = new Node();
//    testNode45->loadUnitCube();
//    testNode45->geometries[0]->setShader(cubeShader);
//    testNode45->scale = vec3(-7.753486156463623f, -1.905120849609375f, -0.8989476561546326f);
//    testNode45->position = vec3(-77.24722290039062f + (MAPX), 123.94265747070312f + (MAPY), 30.132204055786133f + (MAPZ));
//    testNode45->eulerAngles = vec3(6.305223200508102e-06f, -(-54.825023467627325f), 0.0f);
//    Engine::main->addNode(testNode45);
//    Node* testNode46 = new Node();
//    testNode46->loadUnitCube();
//    testNode46->geometries[0]->setShader(cubeShader);
//    testNode46->scale = vec3(-1.8768986463546753f, -1.228798508644104f, -0.898947536945343f);
//    testNode46->position = vec3(-78.65879821777344f + (MAPX), 125.2599105834961f + (MAPY), 32.131317138671875f + (MAPZ));
//    testNode46->eulerAngles = vec3(6.519582611819262e-06f, -(-55.36177046845819f), 0.0f);
//    Engine::main->addNode(testNode46);
//    Node* testNode47 = new Node();
//    testNode47->loadUnitCube();
//    testNode47->geometries[0]->setShader(cubeShader);
//    testNode47->scale = vec3(-1.8768975734710693f, -1.2287973165512085f, -0.8989469408988953f);
//    testNode47->position = vec3(-77.1322021484375f + (MAPX), 125.2599105834961f + (MAPY), 29.9841365814209f + (MAPZ));
//    testNode47->eulerAngles = vec3(5.524545927056776e-06f, -(-52.74247829912293f), 0.0f);
//    Engine::main->addNode(testNode47);
//    Node* testNode48 = new Node();
//    testNode48->loadUnitCube();
//    testNode48->geometries[0]->setShader(cubeShader);
//    testNode48->scale = vec3(-1.8768984079360962f, -1.2287979125976562f, -0.8989474177360535f);
//    testNode48->position = vec3(-75.62993621826172f + (MAPX), 125.2599105834961f + (MAPY), 27.82370948791504f + (MAPZ));
//    testNode48->eulerAngles = vec3(5.907589338231785e-06f, -(-53.79012344987075f), 0.0f);
//    Engine::main->addNode(testNode48);
//    Node* testNode49 = new Node();
//    testNode49->loadUnitCube();
//    testNode49->geometries[0]->setShader(cubeShader);
//    testNode49->scale = vec3(-2.042255401611328f, -0.8438174724578857f, -1.3134886026382446f);
//    testNode49->position = vec3(-75.691162109375f + (MAPX), 124.4269790649414f + (MAPY), 36.6179313659668f + (MAPZ));
//    testNode49->eulerAngles = vec3(6.519575283821276e-06f, -(-55.36177046845819f), 0.0f);
//    Engine::main->addNode(testNode49);
//    Node* testNode50 = new Node();
//    testNode50->loadUnitCube();
//    testNode50->geometries[0]->setShader(cubeShader);
//    testNode50->scale = vec3(-3.938777208328247f, -1.4260528087615967f, -1.3134886026382446f);
//    testNode50->position = vec3(-80.68180084228516f + (MAPX), 123.51990509033203f + (MAPY), 35.03047561645508f + (MAPZ));
//    testNode50->eulerAngles = vec3(6.519570398489285e-06f, -(-55.36177046845819f), 0.0f);
//    Engine::main->addNode(testNode50);
//    Node* testNode51 = new Node();
//    testNode51->loadUnitCube();
//    testNode51->geometries[0]->setShader(cubeShader);
//    testNode51->scale = vec3(-3.2817745208740234f, -0.49640941619873047f, -1.3134887218475342f);
//    testNode51->position = vec3(-80.5099868774414f + (MAPX), 124.4751968383789f + (MAPY), 34.78175735473633f + (MAPZ));
//    testNode51->eulerAngles = vec3(6.519565920268294e-06f, -(-55.36178412883653f), 0.0f);
//    Engine::main->addNode(testNode51);
//    Node* testNode52 = new Node();
//    testNode52->loadUnitCube();
//    testNode52->geometries[0]->setShader(cubeShader);
//    testNode52->scale = vec3(-1.571313738822937f, -0.49640941619873047f, -1.3134887218475342f);
//    testNode52->position = vec3(-80.141845703125f + (MAPX), 124.91292572021484f + (MAPY), 34.24888229370117f + (MAPZ));
//    testNode52->eulerAngles = vec3(6.5195667344902915e-06f, -(-55.361787543931115f), 0.0f);
//    Engine::main->addNode(testNode52);
//    Node* testNode53 = new Node();
//    testNode53->loadUnitCube();
//    testNode53->geometries[0]->setShader(cubeShader);
//    testNode53->scale = vec3(-16.152935028076172f, -13.926281929016113f, -5.99288272857666f);
//    testNode53->position = vec3(-32.42966842651367f + (MAPX), 105.05148315429688f + (MAPY), 24.36405372619629f + (MAPZ));
//    testNode53->eulerAngles = vec3(7.033169014673508e-06f, -(29.863181900466945f), 0.0f);
//    Engine::main->addNode(testNode53);
//    Node* testNode54 = new Node();
//    testNode54->loadUnitCube();
//    testNode54->geometries[0]->setShader(cubeShader);
//    testNode54->scale = vec3(-9.207172393798828f, -13.090703010559082f, -5.99288272857666f);
//    testNode54->position = vec3(-35.701236724853516f + (MAPX), 117.48953247070312f + (MAPY), 22.485612869262695f + (MAPZ));
//    testNode54->eulerAngles = vec3(7.03316820045151e-06f, -(29.863192145750702f), 0.0f);
//    Engine::main->addNode(testNode54);
//    Node* testNode55 = new Node();
//    testNode55->loadUnitCube();
//    testNode55->geometries[0]->setShader(cubeShader);
//    testNode55->scale = vec3(-1.5468051433563232f, -13.090703010559082f, -5.99288272857666f);
//    testNode55->position = vec3(-26.693540573120117f + (MAPX), 117.54330444335938f + (MAPY), 27.657590866088867f + (MAPZ));
//    testNode55->eulerAngles = vec3(7.03316820045151e-06f, -(29.863192145750702f), 0.0f);
//    Engine::main->addNode(testNode55);
//    Node* testNode56 = new Node();
//    testNode56->loadUnitCube();
//    testNode56->geometries[0]->setShader(cubeShader);
//    testNode56->scale = vec3(-5.243000030517578f, -3.8400790691375732f, -5.99288272857666f);
//    testNode56->position = vec3(-29.460006713867188f + (MAPX), 122.21344757080078f + (MAPY), 26.06914520263672f + (MAPZ));
//    testNode56->eulerAngles = vec3(7.033167386229512e-06f, -(29.86319897593987f), 0.0f);
//    Engine::main->addNode(testNode56);
//    Node* testNode57 = new Node();
//    testNode57->loadUnitCube();
//    testNode57->geometries[0]->setShader(cubeShader);
//    testNode57->scale = vec3(-5.242997646331787f, -3.8400704860687256f, -5.992867469787598f);
//    testNode57->position = vec3(-32.100013732910156f + (MAPX), 121.05671691894531f + (MAPY), 24.553327560424805f + (MAPZ));
//    testNode57->eulerAngles = vec3(22.150393978357855f, 20.557616062025684f, -130.7810334724408f);
//    Engine::main->addNode(testNode57);
//    Node* testNode58 = new Node();
//    testNode58->loadUnitCube();
//    testNode58->geometries[0]->setShader(cubeShader);
//    testNode58->scale = vec3(-5.2428812980651855f, -3.839973211288452f, -5.992798805236816f);
//    testNode58->position = vec3(-27.336458206176758f + (MAPX), 121.42704010009766f + (MAPY), 27.288414001464844f + (MAPZ));
//    testNode58->eulerAngles = vec3(-19.31657410492895f, 23.227122074591588f, 138.36949658373004f);
//    Engine::main->addNode(testNode58);
//    Node* testNode59 = new Node();
//    testNode59->loadUnitCube();
//    testNode59->geometries[0]->setShader(cubeShader);
//    testNode59->scale = vec3(-16.15282440185547f, -1.905092477798462f, -0.8989410996437073f);
//    testNode59->position = vec3(-34.412269592285156f + (MAPX), 123.94264221191406f + (MAPY), 26.659175872802734f + (MAPZ));
//    testNode59->eulerAngles = vec3(-8.647566053665489e-06f, -(29.977877852104385f), 0.0f);
//    Engine::main->addNode(testNode59);
//    Node* testNode60 = new Node();
//    testNode60->loadUnitCube();
//    testNode60->geometries[0]->setShader(cubeShader);
//    testNode60->scale = vec3(-1.8768917322158813f, -1.2287896871566772f, -0.8989421725273132f);
//    testNode60->position = vec3(-40.259525299072266f + (MAPX), 125.20430755615234f + (MAPY), 23.26726722717285f + (MAPZ));
//    testNode60->eulerAngles = vec3(-8.697710729662318e-06f, -(30.264776533096185f), 0.0f);
//    Engine::main->addNode(testNode60);
//    Node* testNode61 = new Node();
//    testNode61->loadUnitCube();
//    testNode61->geometries[0]->setShader(cubeShader);
//    testNode61->scale = vec3(-1.8768917322158813f, -1.2287896871566772f, -0.8989421725273132f);
//    testNode61->position = vec3(-37.960693359375f + (MAPX), 125.20430755615234f + (MAPY), 24.608701705932617f + (MAPZ));
//    testNode61->eulerAngles = vec3(-8.697710729662318e-06f, -(30.264776533096185f), 0.0f);
//    Engine::main->addNode(testNode61);
//    Node* testNode62 = new Node();
//    testNode62->loadUnitCube();
//    testNode62->geometries[0]->setShader(cubeShader);
//    testNode62->scale = vec3(-1.876891851425171f, -1.2287896871566772f, -0.8989421725273132f);
//    testNode62->position = vec3(-35.63922119140625f + (MAPX), 125.20430755615234f + (MAPY), 25.963346481323242f + (MAPZ));
//    testNode62->eulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
//    Engine::main->addNode(testNode62);
//    Node* testNode63 = new Node();
//    testNode63->loadUnitCube();
//    testNode63->geometries[0]->setShader(cubeShader);
//    testNode63->scale = vec3(-1.8768919706344604f, -1.2287896871566772f, -0.8989421725273132f);
//    testNode63->position = vec3(-33.33761215209961f + (MAPX), 125.20430755615234f + (MAPY), 27.306400299072266f + (MAPZ));
//    testNode63->eulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
//    Engine::main->addNode(testNode63);
//    Node* testNode64 = new Node();
//    testNode64->loadUnitCube();
//    testNode64->geometries[0]->setShader(cubeShader);
//    testNode64->scale = vec3(-1.8768922090530396f, -1.2287896871566772f, -0.8989421725273132f);
//    testNode64->position = vec3(-31.02751922607422f + (MAPX), 125.20430755615234f + (MAPY), 28.65440559387207f + (MAPZ));
//    testNode64->eulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
//    Engine::main->addNode(testNode64);
//    Node* testNode65 = new Node();
//    testNode65->loadUnitCube();
//    testNode65->geometries[0]->setShader(cubeShader);
//    testNode65->scale = vec3(-1.876892328262329f, -1.2287896871566772f, -0.8989421725273132f);
//    testNode65->position = vec3(-28.749771118164062f + (MAPX), 125.20430755615234f + (MAPY), 29.983535766601562f + (MAPZ));
//    testNode65->eulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
//    Engine::main->addNode(testNode65);
//    Node* testNode66 = new Node();
//    testNode66->loadUnitCube();
//    testNode66->geometries[0]->setShader(cubeShader);
//    testNode66->scale = vec3(-16.15282440185547f, -1.9050922393798828f, -0.8989410996437073f);
//    testNode66->position = vec3(-31.458450317382812f + (MAPX), 123.94264221191406f + (MAPY), 21.46540069580078f + (MAPZ));
//    testNode66->eulerAngles = vec3(-8.647565239443491e-06f, -(29.977877852104385f), 0.0f);
//    Engine::main->addNode(testNode66);
//    Node* testNode67 = new Node();
//    testNode67->loadUnitCube();
//    testNode67->geometries[0]->setShader(cubeShader);
//    testNode67->scale = vec3(-1.8768919706344604f, -1.2287896871566772f, -0.8989421725273132f);
//    testNode67->position = vec3(-37.305702209472656f + (MAPX), 125.20430755615234f + (MAPY), 18.0734920501709f + (MAPZ));
//    testNode67->eulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
//    Engine::main->addNode(testNode67);
//    Node* testNode68 = new Node();
//    testNode68->loadUnitCube();
//    testNode68->geometries[0]->setShader(cubeShader);
//    testNode68->scale = vec3(-1.8768922090530396f, -1.2287896871566772f, -0.8989421725273132f);
//    testNode68->position = vec3(-35.006874084472656f + (MAPX), 125.20430755615234f + (MAPY), 19.414926528930664f + (MAPZ));
//    testNode68->eulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
//    Engine::main->addNode(testNode68);
//    Node* testNode69 = new Node();
//    testNode69->loadUnitCube();
//    testNode69->geometries[0]->setShader(cubeShader);
//    testNode69->scale = vec3(-1.876892328262329f, -1.2287896871566772f, -0.8989421725273132f);
//    testNode69->position = vec3(-32.685401916503906f + (MAPX), 125.20430755615234f + (MAPY), 20.76957130432129f + (MAPZ));
//    testNode69->eulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
//    Engine::main->addNode(testNode69);
//    Node* testNode70 = new Node();
//    testNode70->loadUnitCube();
//    testNode70->geometries[0]->setShader(cubeShader);
//    testNode70->scale = vec3(-1.8768924474716187f, -1.2287896871566772f, -0.8989421725273132f);
//    testNode70->position = vec3(-30.383792877197266f + (MAPX), 125.20430755615234f + (MAPY), 22.112625122070312f + (MAPZ));
//    testNode70->eulerAngles = vec3(-8.69770991544032e-06f, -(30.264776533096185f), 0.0f);
//    Engine::main->addNode(testNode70);
//    Node* testNode71 = new Node();
//    testNode71->loadUnitCube();
//    testNode71->geometries[0]->setShader(cubeShader);
//    testNode71->scale = vec3(-1.8768925666809082f, -1.2287896871566772f, -0.8989421725273132f);
//    testNode71->position = vec3(-28.073699951171875f + (MAPX), 125.20430755615234f + (MAPY), 23.460630416870117f + (MAPZ));
//    testNode71->eulerAngles = vec3(-8.69770910121832e-06f, -(30.264776533096185f), 0.0f);
//    Engine::main->addNode(testNode71);
//    Node* testNode72 = new Node();
//    testNode72->loadUnitCube();
//    testNode72->geometries[0]->setShader(cubeShader);
//    testNode72->scale = vec3(-1.8768926858901978f, -1.2287896871566772f, -0.8989421725273132f);
//    testNode72->position = vec3(-25.79595184326172f + (MAPX), 125.20430755615234f + (MAPY), 24.78976058959961f + (MAPZ));
//    testNode72->eulerAngles = vec3(-8.69770910121832e-06f, -(30.264776533096185f), 0.0f);
//    Engine::main->addNode(testNode72);
//    Node* testNode73 = new Node();
//    testNode73->loadUnitCube();
//    testNode73->geometries[0]->setShader(cubeShader);
//    testNode73->scale = vec3(-16.15269660949707f, -13.926040649414062f, -5.992833137512207f);
//    testNode73->position = vec3(-20.970481872558594f + (MAPX), 105.05144500732422f + (MAPY), 35.088497161865234f + (MAPZ));
//    testNode73->eulerAngles = vec3(1.1931123074821515e-05f, -(54.84077388385337f), 0.0f);
//    Engine::main->addNode(testNode73);
//    Node* testNode74 = new Node();
//    testNode74->loadUnitCube();
//    testNode74->geometries[0]->setShader(cubeShader);
//    testNode74->scale = vec3(-4.358596324920654f, -13.18424129486084f, -5.992829322814941f);
//    testNode74->position = vec3(-24.285057067871094f + (MAPX), 117.4466323852539f + (MAPY), 30.333099365234375f + (MAPZ));
//    testNode74->eulerAngles = vec3(1.1886087641864988e-05f, -(55.102697978145024f), 0.0f);
//    Engine::main->addNode(testNode74);
//    Node* testNode75 = new Node();
//    testNode75->loadUnitCube();
//    testNode75->geometries[0]->setShader(cubeShader);
//    testNode75->scale = vec3(-2.9781434535980225f, -5.405541896820068f, -5.992829322814941f);
//    testNode75->position = vec3(-22.173316955566406f + (MAPX), 113.34149932861328f + (MAPY), 33.36051559448242f + (MAPZ));
//    testNode75->eulerAngles = vec3(1.188609741252897e-05f, -(55.102697978145024f), 0.0f);
//    Engine::main->addNode(testNode75);
//    Node* testNode76 = new Node();
//    testNode76->loadUnitCube();
//    testNode76->geometries[0]->setShader(cubeShader);
//    testNode76->scale = vec3(-2.9781463146209717f, -5.405553340911865f, -5.992827415466309f);
//    testNode76->position = vec3(-23.187902450561523f + (MAPX), 117.18025970458984f + (MAPY), 31.90598487854004f + (MAPZ));
//    testNode76->eulerAngles = vec3(22.69194260217524f, 51.67595450550919f, -151.94258510616277f);
//    Engine::main->addNode(testNode76);
//    Node* testNode77 = new Node();
//    testNode77->loadUnitCube();
//    testNode77->geometries[0]->setShader(cubeShader);
//    testNode77->scale = vec3(-3.5737740993499756f, -9.297536849975586f, -5.992829322814941f);
//    testNode77->position = vec3(-17.46780014038086f + (MAPX), 115.95350646972656f + (MAPY), 40.106407165527344f + (MAPZ));
//    testNode77->eulerAngles = vec3(1.1886107183192952e-05f, -(55.102697978145024f), 0.0f);
//    Engine::main->addNode(testNode77);
//    Node* testNode78 = new Node();
//    testNode78->loadUnitCube();
//    testNode78->geometries[0]->setShader(cubeShader);
//    testNode78->scale = vec3(-3.5737757682800293f, -9.297525405883789f, -5.992823600769043f);
//    testNode78->position = vec3(-18.447582244873047f + (MAPX), 115.21334838867188f + (MAPY), 38.701759338378906f + (MAPZ));
//    testNode78->eulerAngles = vec3(-30.44728943300268f, 48.42315546046608f, 141.840858267119f);
//    Engine::main->addNode(testNode78);
//    Node* testNode79 = new Node();
//    testNode79->loadUnitCube();
//    testNode79->geometries[0]->setShader(cubeShader);
//    testNode79->scale = vec3(-1.372329831123352f, -3.254133462905884f, -5.992823600769043f);
//    testNode79->position = vec3(-19.205615997314453f + (MAPX), 116.29552459716797f + (MAPY), 37.61503982543945f + (MAPZ));
//    testNode79->eulerAngles = vec3(-30.44728943300268f, 48.42315546046608f, 141.840858267119f);
//    Engine::main->addNode(testNode79);
//    Node* testNode80 = new Node();
//    testNode80->loadUnitCube();
//    testNode80->geometries[0]->setShader(cubeShader);
//    testNode80->scale = vec3(1.4394783973693848f, 19.950000762939453f, 13.462162017822266f);
//    testNode80->position = vec3(-79.91456604003906f + (MAPX), 114.09693145751953f + (MAPY), 48.98015213012695f + (MAPZ));
//    testNode80->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode80);
//    Node* testNode81 = new Node();
//    testNode81->loadUnitCube();
//    testNode81->geometries[0]->setShader(cubeShader);
//    testNode81->scale = vec3(1.4394729137420654f, 25.057615280151367f, 13.462119102478027f);
//    testNode81->position = vec3(-86.04442596435547f + (MAPX), 111.6244125366211f + (MAPY), 55.00763702392578f + (MAPZ));
//    testNode81->eulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    Engine::main->addNode(testNode81);
//    Node* testNode82 = new Node();
//    testNode82->loadUnitCube();
//    testNode82->geometries[0]->setShader(cubeShader);
//    testNode82->scale = vec3(1.4394726753234863f, 25.057615280151367f, 13.462117195129395f);
//    testNode82->position = vec3(-86.04442596435547f + (MAPX), 111.6244125366211f + (MAPY), 42.98772430419922f + (MAPZ));
//    testNode82->eulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    Engine::main->addNode(testNode82);
//    Node* testNode83 = new Node();
//    testNode83->loadUnitCube();
//    testNode83->geometries[0]->setShader(cubeShader);
//    testNode83->scale = vec3(1.4394729137420654f, 25.057615280151367f, 13.462119102478027f);
//    testNode83->position = vec3(-92.04331970214844f + (MAPX), 111.6244125366211f + (MAPY), 48.99794387817383f + (MAPZ));
//    testNode83->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode83);
//    Node* testNode84 = new Node();
//    testNode84->loadUnitCube();
//    testNode84->geometries[0]->setShader(cubeShader);
//    testNode84->scale = vec3(1.4394783973693848f, 4.222418308258057f, 5.713043689727783f);
//    testNode84->position = vec3(-79.91456604003906f + (MAPX), 102.138427734375f + (MAPY), 52.874794006347656f + (MAPZ));
//    testNode84->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode84);
//    Node* testNode85 = new Node();
//    testNode85->loadUnitCube();
//    testNode85->geometries[0]->setShader(cubeShader);
//    testNode85->scale = vec3(1.4394783973693848f, 4.222418308258057f, 5.713043689727783f);
//    testNode85->position = vec3(-79.91456604003906f + (MAPX), 102.138427734375f + (MAPY), 45.13015365600586f + (MAPZ));
//    testNode85->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode85);
//    Node* testNode86 = new Node();
//    testNode86->loadUnitCube();
//    testNode86->geometries[0]->setShader(cubeShader);
//    testNode86->scale = vec3(1.4394702911376953f, 0.905704140663147f, 1.542514443397522f);
//    testNode86->position = vec3(-79.91455078125f + (MAPX), 104.0869369506836f + (MAPY), 50.05832290649414f + (MAPZ));
//    testNode86->eulerAngles = vec3(44.970935382226095f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode86);
//    Node* testNode87 = new Node();
//    testNode87->loadUnitCube();
//    testNode87->geometries[0]->setShader(cubeShader);
//    testNode87->scale = vec3(1.4394702911376953f, 0.905704140663147f, 1.5425145626068115f);
//    testNode87->position = vec3(-79.91455078125f + (MAPX), 104.00344848632812f + (MAPY), 47.8505973815918f + (MAPZ));
//    testNode87->eulerAngles = vec3(-44.97100026902321f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode87);
//    Node* testNode88 = new Node();
//    testNode88->loadUnitCube();
//    testNode88->geometries[0]->setShader(cubeShader);
//    testNode88->scale = vec3(1.4394783973693848f, 19.950000762939453f, 13.462162017822266f);
//    testNode88->position = vec3(-18.01214599609375f + (MAPX), 114.09693145751953f + (MAPY), 48.99785614013672f + (MAPZ));
//    testNode88->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode88);
//    Node* testNode89 = new Node();
//    testNode89->loadUnitCube();
//    testNode89->geometries[0]->setShader(cubeShader);
//    testNode89->scale = vec3(1.4394783973693848f, 4.222418308258057f, 5.713043689727783f);
//    testNode89->position = vec3(-18.01214599609375f + (MAPX), 102.138427734375f + (MAPY), 52.89249801635742f + (MAPZ));
//    testNode89->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode89);
//    Node* testNode90 = new Node();
//    testNode90->loadUnitCube();
//    testNode90->geometries[0]->setShader(cubeShader);
//    testNode90->scale = vec3(1.4394783973693848f, 4.222418308258057f, 5.713043689727783f);
//    testNode90->position = vec3(-18.01214599609375f + (MAPX), 102.138427734375f + (MAPY), 45.147857666015625f + (MAPZ));
//    testNode90->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode90);
//    Node* testNode91 = new Node();
//    testNode91->loadUnitCube();
//    testNode91->geometries[0]->setShader(cubeShader);
//    testNode91->scale = vec3(1.4394702911376953f, 0.9057040214538574f, 1.542514443397522f);
//    testNode91->position = vec3(-18.012130737304688f + (MAPX), 104.0869369506836f + (MAPY), 50.076026916503906f + (MAPZ));
//    testNode91->eulerAngles = vec3(44.970935382226095f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode91);
//    Node* testNode92 = new Node();
//    testNode92->loadUnitCube();
//    testNode92->geometries[0]->setShader(cubeShader);
//    testNode92->scale = vec3(1.4394702911376953f, 0.905704140663147f, 1.5425145626068115f);
//    testNode92->position = vec3(-18.012130737304688f + (MAPX), 104.00344848632812f + (MAPY), 47.86830139160156f + (MAPZ));
//    testNode92->eulerAngles = vec3(-44.97100026902321f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode92);
//    Node* testNode93 = new Node();
//    testNode93->loadUnitCube();
//    testNode93->geometries[0]->setShader(cubeShader);
//    testNode93->scale = vec3(1.4394729137420654f, 25.057615280151367f, 13.462119102478027f);
//    testNode93->position = vec3(-5.975827217102051f + (MAPX), 111.6244125366211f + (MAPY), 48.99794387817383f + (MAPZ));
//    testNode93->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode93);
//    Node* testNode94 = new Node();
//    testNode94->loadUnitCube();
//    testNode94->geometries[0]->setShader(cubeShader);
//    testNode94->scale = vec3(1.4394724369049072f, 25.057615280151367f, 13.462115287780762f);
//    testNode94->position = vec3(-11.971139907836914f + (MAPX), 111.6244125366211f + (MAPY), 55.081886291503906f + (MAPZ));
//    testNode94->eulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    Engine::main->addNode(testNode94);
//    Node* testNode95 = new Node();
//    testNode95->loadUnitCube();
//    testNode95->geometries[0]->setShader(cubeShader);
//    testNode95->scale = vec3(1.4394721984863281f, 25.057615280151367f, 13.462113380432129f);
//    testNode95->position = vec3(-11.971131324768066f + (MAPX), 111.6244125366211f + (MAPY), 43.012451171875f + (MAPZ));
//    testNode95->eulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    Engine::main->addNode(testNode95);
//    Node* testNode96 = new Node();
//    testNode96->loadUnitCube();
//    testNode96->geometries[0]->setShader(cubeShader);
//    testNode96->scale = vec3(1.9647095203399658f, 0.4559999704360962f, 12.95934009552002f);
//    testNode96->position = vec3(-90.49871063232422f + (MAPX), 123.78119659423828f + (MAPY), 49.13040542602539f + (MAPZ));
//    testNode96->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode96);
//    Node* testNode97 = new Node();
//    testNode97->loadUnitCube();
//    testNode97->geometries[0]->setShader(cubeShader);
//    testNode97->scale = vec3(2.0432980060577393f, 0.4559999704360962f, 12.95934009552002f);
//    testNode97->position = vec3(-81.58023834228516f + (MAPX), 123.78119659423828f + (MAPY), 49.13040542602539f + (MAPZ));
//    testNode97->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode97);
//    Node* testNode98 = new Node();
//    testNode98->loadUnitCube();
//    testNode98->geometries[0]->setShader(cubeShader);
//    testNode98->scale = vec3(6.926779270172119f, 0.4559999704360962f, 2.3326807022094727f);
//    testNode98->position = vec3(-86.03443145751953f + (MAPX), 123.78119659423828f + (MAPY), 53.55587387084961f + (MAPZ));
//    testNode98->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode98);
//    Node* testNode99 = new Node();
//    testNode99->loadUnitCube();
//    testNode99->geometries[0]->setShader(cubeShader);
//    testNode99->scale = vec3(6.926779270172119f, 0.4559999704360962f, 2.3326807022094727f);
//    testNode99->position = vec3(-86.03443145751953f + (MAPX), 123.78119659423828f + (MAPY), 44.36404800415039f + (MAPZ));
//    testNode99->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode99);
//    Node* testNode100 = new Node();
//    testNode100->loadUnitCube();
//    testNode100->geometries[0]->setShader(cubeShader);
//    testNode100->scale = vec3(1.9647095203399658f, 0.4559999704360962f, 12.95934009552002f);
//    testNode100->position = vec3(-90.48426055908203f + (MAPX), 123.78119659423828f + (MAPY), 49.11735153198242f + (MAPZ));
//    testNode100->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode100);
//    Node* testNode101 = new Node();
//    testNode101->loadUnitCube();
//    testNode101->geometries[0]->setShader(cubeShader);
//    testNode101->scale = vec3(2.0432980060577393f, 0.4559999704360962f, 12.95934009552002f);
//    testNode101->position = vec3(-81.56578826904297f + (MAPX), 123.78119659423828f + (MAPY), 49.11735153198242f + (MAPZ));
//    testNode101->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode101);
//    Node* testNode102 = new Node();
//    testNode102->loadUnitCube();
//    testNode102->geometries[0]->setShader(cubeShader);
//    testNode102->scale = vec3(6.926779270172119f, 0.4559999704360962f, 2.3326807022094727f);
//    testNode102->position = vec3(-86.01998138427734f + (MAPX), 123.78119659423828f + (MAPY), 53.54281997680664f + (MAPZ));
//    testNode102->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode102);
//    Node* testNode103 = new Node();
//    testNode103->loadUnitCube();
//    testNode103->geometries[0]->setShader(cubeShader);
//    testNode103->scale = vec3(6.926779270172119f, 0.4559999704360962f, 2.3326807022094727f);
//    testNode103->position = vec3(-86.01998138427734f + (MAPX), 123.78119659423828f + (MAPY), 44.35099411010742f + (MAPZ));
//    testNode103->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode103);
//    Node* testNode104 = new Node();
//    testNode104->loadUnitCube();
//    testNode104->geometries[0]->setShader(cubeShader);
//    testNode104->scale = vec3(1.9647095203399658f, 0.4559999704360962f, 12.95934009552002f);
//    testNode104->position = vec3(-16.640254974365234f + (MAPX), 123.78119659423828f + (MAPY), 49.11735153198242f + (MAPZ));
//    testNode104->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode104);
//    Node* testNode105 = new Node();
//    testNode105->loadUnitCube();
//    testNode105->geometries[0]->setShader(cubeShader);
//    testNode105->scale = vec3(2.0432980060577393f, 0.4559999704360962f, 12.95934009552002f);
//    testNode105->position = vec3(-7.721782684326172f + (MAPX), 123.78119659423828f + (MAPY), 49.11735153198242f + (MAPZ));
//    testNode105->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode105);
//    Node* testNode106 = new Node();
//    testNode106->loadUnitCube();
//    testNode106->geometries[0]->setShader(cubeShader);
//    testNode106->scale = vec3(6.926779270172119f, 0.4559999704360962f, 2.3326807022094727f);
//    testNode106->position = vec3(-12.175975799560547f + (MAPX), 123.78119659423828f + (MAPY), 53.54281997680664f + (MAPZ));
//    testNode106->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode106);
//    Node* testNode107 = new Node();
//    testNode107->loadUnitCube();
//    testNode107->geometries[0]->setShader(cubeShader);
//    testNode107->scale = vec3(6.926779270172119f, 0.4559999704360962f, 2.3326807022094727f);
//    testNode107->position = vec3(-12.175975799560547f + (MAPX), 123.78119659423828f + (MAPY), 44.35099411010742f + (MAPZ));
//    testNode107->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode107);
//    Node* testNode108 = new Node();
//    testNode108->loadUnitCube();
//    testNode108->geometries[0]->setShader(cubeShader);
//    testNode108->scale = vec3(3.916860580444336f, 0.09999994933605194f, 1.2791105508804321f);
//    testNode108->position = vec3(-83.79002380371094f + (MAPX), 99.6512222290039f + (MAPY), 56.3434944152832f + (MAPZ));
//    testNode108->eulerAngles = vec3(0.2943439340326583f, 0.6262366195840501f, 10.133630652656928f);
//    Engine::main->addNode(testNode108);
//    Node* testNode109 = new Node();
//    testNode109->loadUnitCube();
//    testNode109->geometries[0]->setShader(cubeShader);
//    testNode109->scale = vec3(2.0759334564208984f, 0.09999962896108627f, 1.2790982723236084f);
//    testNode109->position = vec3(-82.83871459960938f + (MAPX), 99.71932983398438f + (MAPY), 57.615867614746094f + (MAPZ));
//    testNode109->eulerAngles = vec3(7.486777816247016f, 0.6262363527797856f, 10.133636629072452f);
//    Engine::main->addNode(testNode109);
//    Node* testNode110 = new Node();
//    testNode110->loadUnitCube();
//    testNode110->geometries[0]->setShader(cubeShader);
//    testNode110->scale = vec3(3.745666265487671f, 0.4999956786632538f, 3.9620554447174072f);
//    testNode110->position = vec3(-80.36149597167969f + (MAPX), 99.57840728759766f + (MAPY), 64.78752136230469f + (MAPZ));
//    testNode110->eulerAngles = vec3(6.660267723841174f, -0.2902905102449466f, 1.5386186783604954f);
//    Engine::main->addNode(testNode110);
//    Node* testNode111 = new Node();
//    testNode111->loadUnitCube();
//    testNode111->geometries[0]->setShader(cubeShader);
//    testNode111->scale = vec3(11.772867202758789f, 1.9999829530715942f, 11.181173324584961f);
//    testNode111->position = vec3(-67.03697204589844f + (MAPX), 99.03250885009766f + (MAPY), 68.33628845214844f + (MAPZ));
//    testNode111->eulerAngles = vec3(-0.23631139183220362f, 0.0f, 0.0f);
//    Engine::main->addNode(testNode111);
//    Node* testNode112 = new Node();
//    testNode112->loadUnitCube();
//    testNode112->geometries[0]->setShader(cubeShader);
//    testNode112->scale = vec3(11.772867202758789f, 1.9999829530715942f, 11.181173324584961f);
//    testNode112->position = vec3(-55.36033248901367f + (MAPX), 99.03250885009766f + (MAPY), 68.33628845214844f + (MAPZ));
//    testNode112->eulerAngles = vec3(-0.23631139183220362f, 0.0f, 0.0f);
//    Engine::main->addNode(testNode112);
//    Node* testNode113 = new Node();
//    testNode113->loadUnitCube();
//    testNode113->geometries[0]->setShader(cubeShader);
//    testNode113->scale = vec3(11.772867202758789f, 1.9999828338623047f, 11.181173324584961f);
//    testNode113->position = vec3(-43.62922668457031f + (MAPX), 99.03250885009766f + (MAPY), 68.33628845214844f + (MAPZ));
//    testNode113->eulerAngles = vec3(-0.23631144519305652f, 0.0f, 0.0f);
//    Engine::main->addNode(testNode113);
//    Node* testNode114 = new Node();
//    testNode114->loadUnitCube();
//    testNode114->geometries[0]->setShader(cubeShader);
//    testNode114->scale = vec3(11.772867202758789f, 1.9999827146530151f, 11.181173324584961f);
//    testNode114->position = vec3(-31.914894104003906f + (MAPX), 99.03250885009766f + (MAPY), 68.33628845214844f + (MAPZ));
//    testNode114->eulerAngles = vec3(-0.2363114985539094f, 0.0f, 0.0f);
//    Engine::main->addNode(testNode114);
//    Node* testNode115 = new Node();
//    testNode115->loadUnitCube();
//    testNode115->geometries[0]->setShader(cubeShader);
//    testNode115->scale = vec3(2.590973377227783f, 1.999982237815857f, 6.420229434967041f);
//    testNode115->position = vec3(-24.80545425415039f + (MAPX), 99.02281951904297f + (MAPY), 65.9909439086914f + (MAPZ));
//    testNode115->eulerAngles = vec3(-0.23631163195604163f, 0.0f, 0.0f);
//    Engine::main->addNode(testNode115);
//    Node* testNode116 = new Node();
//    testNode116->loadUnitCube();
//    testNode116->geometries[0]->setShader(cubeShader);
//    testNode116->scale = vec3(11.772809028625488f, 1.9999712705612183f, 11.181106567382812f);
//    testNode116->position = vec3(-56.57715606689453f + (MAPX), 97.44789123535156f + (MAPY), 78.8705825805664f + (MAPZ));
//    testNode116->eulerAngles = vec3(17.6807881949405f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode116);
//    Node* testNode117 = new Node();
//    testNode117->loadUnitCube();
//    testNode117->geometries[0]->setShader(cubeShader);
//    testNode117->scale = vec3(14.58283805847168f, 1.9999710321426392f, 8.385830879211426f);
//    testNode117->position = vec3(-69.62022399902344f + (MAPX), 97.86380004882812f + (MAPY), 77.56586456298828f + (MAPZ));
//    testNode117->eulerAngles = vec3(17.680795025129672f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode117);
//    Node* testNode118 = new Node();
//    testNode118->loadUnitCube();
//    testNode118->geometries[0]->setShader(cubeShader);
//    testNode118->scale = vec3(6.710501194000244f, 1.9999712705612183f, 11.181107521057129f);
//    testNode118->position = vec3(-47.57149124145508f + (MAPX), 97.44789123535156f + (MAPY), 78.8705825805664f + (MAPZ));
//    testNode118->eulerAngles = vec3(17.680789902487795f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode118);
//    Node* testNode119 = new Node();
//    testNode119->loadUnitCube();
//    testNode119->geometries[0]->setShader(cubeShader);
//    testNode119->scale = vec3(6.538704872131348f, 1.9999678134918213f, 11.181087493896484f);
//    testNode119->position = vec3(-48.46910095214844f + (MAPX), 96.72219848632812f + (MAPY), 81.1694107055664f + (MAPZ));
//    testNode119->eulerAngles = vec3(12.966062290137026f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode119);
//    Node* testNode120 = new Node();
//    testNode120->loadUnitCube();
//    testNode120->geometries[0]->setShader(cubeShader);
//    testNode120->scale = vec3(9.023391723632812f, 1.9999639987945557f, 11.181075096130371f);
//    testNode120->position = vec3(-56.14405822753906f + (MAPX), 96.33374786376953f + (MAPY), 82.67776489257812f + (MAPZ));
//    testNode120->eulerAngles = vec3(15.847287091500402f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode120);
//    Node* testNode121 = new Node();
//    testNode121->loadUnitCube();
//    testNode121->geometries[0]->setShader(cubeShader);
//    testNode121->scale = vec3(3.7898244857788086f, 1.9999638795852661f, 4.360619068145752f);
//    testNode121->position = vec3(-61.498497009277344f + (MAPX), 95.49950408935547f + (MAPY), 85.21045684814453f + (MAPZ));
//    testNode121->eulerAngles = vec3(15.847287091500402f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode121);
//    Node* testNode122 = new Node();
//    testNode122->loadUnitCube();
//    testNode122->geometries[0]->setShader(cubeShader);
//    testNode122->scale = vec3(5.411869525909424f, 1.9999638795852661f, 4.360619068145752f);
//    testNode122->position = vec3(-65.01434326171875f + (MAPX), 96.2917709350586f + (MAPY), 82.66045379638672f + (MAPZ));
//    testNode122->eulerAngles = vec3(15.847287091500402f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode122);
//    Node* testNode123 = new Node();
//    testNode123->loadUnitCube();
//    testNode123->geometries[0]->setShader(cubeShader);
//    testNode123->scale = vec3(6.7104597091674805f, 1.9999582767486572f, 6.373169898986816f);
//    testNode123->position = vec3(-39.454898834228516f + (MAPX), 98.59320068359375f + (MAPY), 76.85437774658203f + (MAPZ));
//    testNode123->eulerAngles = vec3(8.153667241523305f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode123);
//    Node* testNode124 = new Node();
//    testNode124->loadUnitCube();
//    testNode124->geometries[0]->setShader(cubeShader);
//    testNode124->scale = vec3(5.502553462982178f, 1.9999486207962036f, 5.162247657775879f);
//    testNode124->position = vec3(-33.56798553466797f + (MAPX), 98.6267318725586f + (MAPY), 76.06134796142578f + (MAPZ));
//    testNode124->eulerAngles = vec3(12.591641565120682f, 0.4948286891514707f, -3.4558358096318553f);
//    Engine::main->addNode(testNode124);
//    Node* testNode125 = new Node();
//    testNode125->loadUnitCube();
//    testNode125->geometries[0]->setShader(cubeShader);
//    testNode125->scale = vec3(4.630179405212402f, 1.9999428987503052f, 6.373124599456787f);
//    testNode125->position = vec3(-43.25553512573242f + (MAPX), 97.03315734863281f + (MAPY), 83.28518676757812f + (MAPZ));
//    testNode125->eulerAngles = vec3(7.789539611586171f, -2.4169036323874438f, 17.132919938593563f);
//    Engine::main->addNode(testNode125);
//    Node* testNode126 = new Node();
//    testNode126->loadUnitCube();
//    testNode126->geometries[0]->setShader(cubeShader);
//    testNode126->scale = vec3(4.629972457885742f, 1.9998725652694702f, 4.9708967208862305f);
//    testNode126->position = vec3(-39.33913803100586f + (MAPX), 97.4089126586914f + (MAPY), 81.73054504394531f + (MAPZ));
//    testNode126->eulerAngles = vec3(4.148453703737937f, 3.324068440494204f, -7.273587121683407f);
//    Engine::main->addNode(testNode126);
//    Node* testNode127 = new Node();
//    testNode127->loadUnitCube();
//    testNode127->geometries[0]->setShader(cubeShader);
//    testNode127->scale = vec3(6.710443496704102f, 1.9999520778656006f, 7.329125881195068f);
//    testNode127->position = vec3(-43.395599365234375f + (MAPX), 98.22145080566406f + (MAPY), 77.150146484375f + (MAPZ));
//    testNode127->eulerAngles = vec3(15.926119427353397f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode127);
//    Node* testNode128 = new Node();
//    testNode128->loadUnitCube();
//    testNode128->geometries[0]->setShader(cubeShader);
//    testNode128->scale = vec3(6.475058555603027f, 1.9999746084213257f, 11.299928665161133f);
//    testNode128->position = vec3(-75.75047302246094f + (MAPX), 98.95337677001953f + (MAPY), 68.34326171875f + (MAPZ));
//    testNode128->eulerAngles = vec3(1.8591602031611343f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode128);
//    Node* testNode129 = new Node();
//    testNode129->loadUnitCube();
//    testNode129->geometries[0]->setShader(cubeShader);
//    testNode129->scale = vec3(2.3363354206085205f, 6.2919206619262695f, 2.3797647953033447f);
//    testNode129->position = vec3(-69.98931884765625f + (MAPX), 107.17994689941406f + (MAPY), 65.02070617675781f + (MAPZ));
//    testNode129->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode129);
//    Node* testNode130 = new Node();
//    testNode130->loadUnitCube();
//    testNode130->geometries[0]->setShader(cubeShader);
//    testNode130->scale = vec3(2.3363354206085205f, 3.1459603309631348f, 2.3797647953033447f);
//    testNode130->position = vec3(-69.98931884765625f + (MAPX), 102.58721923828125f + (MAPY), 65.09889221191406f + (MAPZ));
//    testNode130->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode130);
//    Node* testNode131 = new Node();
//    testNode131->loadUnitCube();
//    testNode131->geometries[0]->setShader(cubeShader);
//    testNode131->scale = vec3(3.0198159217834473f, 1.7342653274536133f, 3.970447063446045f);
//    testNode131->position = vec3(-70.0486068725586f + (MAPX), 100.36532592773438f + (MAPY), 65.02467346191406f + (MAPZ));
//    testNode131->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode131);
//    Node* testNode132 = new Node();
//    testNode132->loadUnitCube();
//    testNode132->geometries[0]->setShader(cubeShader);
//    testNode132->scale = vec3(3.349531650543213f, 1.6822375059127808f, 3.4145846366882324f);
//    testNode132->position = vec3(-69.98355102539062f + (MAPX), 111.2369155883789f + (MAPY), 65.0127182006836f + (MAPZ));
//    testNode132->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode132);
//    Node* testNode133 = new Node();
//    testNode133->loadUnitCube();
//    testNode133->geometries[0]->setShader(cubeShader);
//    testNode133->scale = vec3(3.1049747467041016f, 1.7342653274536133f, 3.374880075454712f);
//    testNode133->position = vec3(-29.01679039001465f + (MAPX), 100.32316589355469f + (MAPY), 65.03975677490234f + (MAPZ));
//    testNode133->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode133);
//    Node* testNode134 = new Node();
//    testNode134->loadUnitCube();
//    testNode134->geometries[0]->setShader(cubeShader);
//    testNode134->scale = vec3(2.3349409103393555f, 7.202520847320557f, 2.4636623859405518f);
//    testNode134->position = vec3(-29.01588249206543f + (MAPX), 104.40106964111328f + (MAPY), 65.03975677490234f + (MAPZ));
//    testNode134->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode134);
//    Node* testNode135 = new Node();
//    testNode135->loadUnitCube();
//    testNode135->geometries[0]->setShader(cubeShader);
//    testNode135->scale = vec3(1.4429469108581543f, 0.6173641681671143f, 1.5085103511810303f);
//    testNode135->position = vec3(-29.145505905151367f + (MAPX), 108.03313446044922f + (MAPY), 64.80118560791016f + (MAPZ));
//    testNode135->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode135);
//    Node* testNode136 = new Node();
//    testNode136->loadUnitCube();
//    testNode136->geometries[0]->setShader(cubeShader);
//    testNode136->scale = vec3(3.0733039379119873f, 1.7342653274536133f, 3.2061359882354736f);
//    testNode136->position = vec3(-37.011207580566406f + (MAPX), 100.32316589355469f + (MAPY), 71.00804901123047f + (MAPZ));
//    testNode136->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode136);
//    Node* testNode137 = new Node();
//    testNode137->loadUnitCube();
//    testNode137->geometries[0]->setShader(cubeShader);
//    testNode137->scale = vec3(2.3049778938293457f, 3.1910481452941895f, 2.3404793739318848f);
//    testNode137->position = vec3(-37.011207580566406f + (MAPX), 102.8109130859375f + (MAPY), 71.00169372558594f + (MAPZ));
//    testNode137->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode137);
//    Node* testNode138 = new Node();
//    testNode138->loadUnitCube();
//    testNode138->geometries[0]->setShader(cubeShader);
//    testNode138->scale = vec3(1.6595813035964966f, 0.7339404225349426f, 1.4979040622711182f);
//    testNode138->position = vec3(-36.96181869506836f + (MAPX), 104.37153625488281f + (MAPY), 71.08525085449219f + (MAPZ));
//    testNode138->eulerAngles = vec3(0.0f, 0.0f, -3.8108468445743156f);
//    Engine::main->addNode(testNode138);
//    Node* testNode139 = new Node();
//    testNode139->loadUnitCube();
//    testNode139->geometries[0]->setShader(cubeShader);
//    testNode139->scale = vec3(2.304943323135376f, 7.0840744972229f, 2.3872461318969727f);
//    testNode139->position = vec3(-39.80268859863281f + (MAPX), 103.1633071899414f + (MAPY), 72.8375244140625f + (MAPZ));
//    testNode139->eulerAngles = vec3(-34.21402947723799f, 18.293013908741887f, -74.61004268168702f);
//    Engine::main->addNode(testNode139);
//    Node* testNode140 = new Node();
//    testNode140->loadUnitCube();
//    testNode140->geometries[0]->setShader(cubeShader);
//    testNode140->scale = vec3(3.073212146759033f, 1.7342132329940796f, 3.2060868740081787f);
//    testNode140->position = vec3(-42.80894470214844f + (MAPX), 101.6016616821289f + (MAPY), 74.84982299804688f + (MAPZ));
//    testNode140->eulerAngles = vec3(-34.11354714926335f, 18.789355217990252f, -73.51506090489642f);
//    Engine::main->addNode(testNode140);
//    Node* testNode141 = new Node();
//    testNode141->loadUnitCube();
//    testNode141->geometries[0]->setShader(cubeShader);
//    testNode141->scale = vec3(1.8828964233398438f, 6.240264415740967f, 1.8231102228164673f);
//    testNode141->position = vec3(-14.966094017028809f + (MAPX), 126.97420501708984f + (MAPY), 55.02255630493164f + (MAPZ));
//    testNode141->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode141);
//    Node* testNode142 = new Node();
//    testNode142->loadUnitCube();
//    testNode142->geometries[0]->setShader(cubeShader);
//    testNode142->scale = vec3(1.7699226140975952f, 4.51545524597168f, 1.567874789237976f);
//    testNode142->position = vec3(-10.996423721313477f + (MAPX), 126.2566146850586f + (MAPY), 55.02255630493164f + (MAPZ));
//    testNode142->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode142);
//    Node* testNode143 = new Node();
//    testNode143->loadUnitCube();
//    testNode143->geometries[0]->setShader(cubeShader);
//    testNode143->scale = vec3(1.8828964233398438f, 6.240264415740967f, 1.8231102228164673f);
//    testNode143->position = vec3(-6.05708646774292f + (MAPX), 126.97420501708984f + (MAPY), 55.02255630493164f + (MAPZ));
//    testNode143->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode143);
//    Node* testNode144 = new Node();
//    testNode144->loadUnitCube();
//    testNode144->geometries[0]->setShader(cubeShader);
//    testNode144->scale = vec3(1.5251461267471313f, 3.432145357131958f, 1.8231102228164673f);
//    testNode144->position = vec3(-6.0570855140686035f + (MAPX), 125.39830017089844f + (MAPY), 43.62656784057617f + (MAPZ));
//    testNode144->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode144);
//    Node* testNode145 = new Node();
//    testNode145->loadUnitCube();
//    testNode145->geometries[0]->setShader(cubeShader);
//    testNode145->scale = vec3(1.7510936260223389f, 6.240264415740967f, 1.8231102228164673f);
//    testNode145->position = vec3(-10.981622695922852f + (MAPX), 126.97669982910156f + (MAPY), 43.020286560058594f + (MAPZ));
//    testNode145->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode145);
//    Node* testNode146 = new Node();
//    testNode146->loadUnitCube();
//    testNode146->geometries[0]->setShader(cubeShader);
//    testNode146->scale = vec3(1.5251461267471313f, 3.432145357131958f, 1.8231102228164673f);
//    testNode146->position = vec3(-14.993782997131348f + (MAPX), 125.6747055053711f + (MAPY), 42.98314666748047f + (MAPZ));
//    testNode146->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode146);
//    Node* testNode147 = new Node();
//    testNode147->loadUnitCube();
//    testNode147->geometries[0]->setShader(cubeShader);
//    testNode147->scale = vec3(1.8828964233398438f, 6.240264415740967f, 1.8231102228164673f);
//    testNode147->position = vec3(-83.0040512084961f + (MAPX), 126.97420501708984f + (MAPY), 43.011138916015625f + (MAPZ));
//    testNode147->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode147);
//    Node* testNode148 = new Node();
//    testNode148->loadUnitCube();
//    testNode148->geometries[0]->setShader(cubeShader);
//    testNode148->scale = vec3(1.6319063901901245f, 3.432145357131958f, 1.8231102228164673f);
//    testNode148->position = vec3(-83.00118255615234f + (MAPX), 125.6747055053711f + (MAPY), 54.85859298706055f + (MAPZ));
//    testNode148->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode148);
//    Node* testNode149 = new Node();
//    testNode149->loadUnitCube();
//    testNode149->geometries[0]->setShader(cubeShader);
//    testNode149->scale = vec3(1.8828964233398438f, 6.240264415740967f, 1.8231102228164673f);
//    testNode149->position = vec3(-87.02174377441406f + (MAPX), 126.97420501708984f + (MAPY), 54.986114501953125f + (MAPZ));
//    testNode149->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode149);
//    Node* testNode150 = new Node();
//    testNode150->loadUnitCube();
//    testNode150->geometries[0]->setShader(cubeShader);
//    testNode150->scale = vec3(1.8828964233398438f, 6.240264415740967f, 1.8231102228164673f);
//    testNode150->position = vec3(-91.85603332519531f + (MAPX), 126.92522430419922f + (MAPY), 43.12936782836914f + (MAPZ));
//    testNode150->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode150);
//    Node* testNode151 = new Node();
//    testNode151->loadUnitCube();
//    testNode151->geometries[0]->setShader(cubeShader);
//    testNode151->scale = vec3(1.6319063901901245f, 3.432145357131958f, 1.8231102228164673f);
//    testNode151->position = vec3(-91.99224853515625f + (MAPX), 125.43270111083984f + (MAPY), 54.543453216552734f + (MAPZ));
//    testNode151->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode151);
//    Node* testNode152 = new Node();
//    testNode152->loadUnitCube();
//    testNode152->geometries[0]->setShader(cubeShader);
//    testNode152->scale = vec3(1.6319063901901245f, 3.878324270248413f, 1.8231102228164673f);
//    testNode152->position = vec3(-86.99781036376953f + (MAPX), 125.98971557617188f + (MAPY), 43.12692642211914f + (MAPZ));
//    testNode152->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode152);
//    Node* testNode153 = new Node();
//    testNode153->loadUnitCube();
//    testNode153->geometries[0]->setShader(cubeShader);
//    testNode153->scale = vec3(1.1617982387542725f, 3.800711154937744f, 1.1962753534317017f);
//    testNode153->position = vec3(-76.06031799316406f + (MAPX), 100.74909210205078f + (MAPY), 40.02192306518555f + (MAPZ));
//    testNode153->eulerAngles = vec3(-8.423854157163378f, -20.949791863789475f, -7.656492594480482e-06f);
//    Engine::main->addNode(testNode153);
//    Node* testNode154 = new Node();
//    testNode154->loadUnitCube();
//    testNode154->geometries[0]->setShader(cubeShader);
//    testNode154->scale = vec3(3.19757080078125f, 2.4122378826141357f, 0.7932929992675781f);
//    testNode154->position = vec3(-77.75029754638672f + (MAPX), 100.59754943847656f + (MAPY), 43.8182487487793f + (MAPZ));
//    testNode154->eulerAngles = vec3(4.867968455908706f, -1.6541867449457125e-06f, 16.217022306746117f);
//    Engine::main->addNode(testNode154);
//    Node* testNode155 = new Node();
//    testNode155->loadUnitCube();
//    testNode155->geometries[0]->setShader(cubeShader);
//    testNode155->scale = vec3(2.227097988128662f, 1.2978501319885254f, 1.6353298425674438f);
//    testNode155->position = vec3(-76.26378631591797f + (MAPX), 100.48469543457031f + (MAPY), 42.52497100830078f + (MAPZ));
//    testNode155->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode155);
//    Node* testNode156 = new Node();
//    testNode156->loadUnitCube();
//    testNode156->geometries[0]->setShader(cubeShader);
//    testNode156->scale = vec3(3.0199317932128906f, 0.06489215791225433f, 4.153727054595947f);
//    testNode156->position = vec3(-75.21691131591797f + (MAPX), 100.06875610351562f + (MAPY), 40.61332321166992f + (MAPZ));
//    testNode156->eulerAngles = vec3(0.0f, 0.0f, -3.667080327168833f);
//    Engine::main->addNode(testNode156);
//    Node* testNode157 = new Node();
//    testNode157->loadUnitCube();
//    testNode157->geometries[0]->setShader(cubeShader);
//    testNode157->scale = vec3(1.0244650840759277f, 0.6359465718269348f, 1.097306251525879f);
//    testNode157->position = vec3(-73.04967498779297f + (MAPX), 100.17463684082031f + (MAPY), 34.74942398071289f + (MAPZ));
//    testNode157->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode157);
//    Node* testNode158 = new Node();
//    testNode158->loadUnitCube();
//    testNode158->geometries[0]->setShader(cubeShader);
//    testNode158->scale = vec3(1.161790370941162f, 3.0443596839904785f, 1.196270227432251f);
//    testNode158->position = vec3(-75.42894744873047f + (MAPX), 100.86859130859375f + (MAPY), 40.30752182006836f + (MAPZ));
//    testNode158->eulerAngles = vec3(-12.56606079913169f, -17.165742412650058f, 13.120413466321912f);
//    Engine::main->addNode(testNode158);
//    Node* testNode159 = new Node();
//    testNode159->loadUnitCube();
//    testNode159->geometries[0]->setShader(cubeShader);
//    testNode159->scale = vec3(2.0214884281158447f, 3.5345864295959473f, 1.1842758655548096f);
//    testNode159->position = vec3(-76.42626953125f + (MAPX), 100.8612060546875f + (MAPY), 40.903621673583984f + (MAPZ));
//    testNode159->eulerAngles = vec3(-42.0142318678922f, -2.4366341279089063f, -11.59954036647705f);
//    Engine::main->addNode(testNode159);
//    Node* testNode160 = new Node();
//    testNode160->loadUnitCube();
//    testNode160->geometries[0]->setShader(cubeShader);
//    testNode160->scale = vec3(0.8248710632324219f, 0.8828644752502441f, 0.9211280941963196f);
//    testNode160->position = vec3(-75.48004913330078f + (MAPX), 100.59532165527344f + (MAPY), 41.0806999206543f + (MAPZ));
//    testNode160->eulerAngles = vec3(-12.566055676489814f, -17.16573729000818f, 13.120408343680035f);
//    Engine::main->addNode(testNode160);
//    Node* testNode161 = new Node();
//    testNode161->loadUnitCube();
//    testNode161->geometries[0]->setShader(cubeShader);
//    testNode161->scale = vec3(0.824999988079071f, 0.8828644752502441f, 0.9211280941963196f);
//    testNode161->position = vec3(-77.35387420654297f + (MAPX), 101.1469955444336f + (MAPY), 41.309059143066406f + (MAPZ));
//    testNode161->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode161);
//    Node* testNode162 = new Node();
//    testNode162->loadUnitCube();
//    testNode162->geometries[0]->setShader(cubeShader);
//    testNode162->scale = vec3(3.6004562377929688f, 1.2155393362045288f, 1.6353203058242798f);
//    testNode162->position = vec3(-77.74472045898438f + (MAPX), 100.75554656982422f + (MAPY), 42.7237548828125f + (MAPZ));
//    testNode162->eulerAngles = vec3(57.447867335331f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode162);
//    Node* testNode163 = new Node();
//    testNode163->loadUnitCube();
//    testNode163->geometries[0]->setShader(cubeShader);
//    testNode163->scale = vec3(3.19757080078125f, 2.0504021644592285f, 0.7932929992675781f);
//    testNode163->position = vec3(-77.70169067382812f + (MAPX), 100.43040466308594f + (MAPY), 43.13095474243164f + (MAPZ));
//    testNode163->eulerAngles = vec3(4.867967602135059f, -1.5474650391642633e-06f, 16.217020599198825f);
//    Engine::main->addNode(testNode163);
//    Node* testNode164 = new Node();
//    testNode164->loadUnitCube();
//    testNode164->geometries[0]->setShader(cubeShader);
//    testNode164->scale = vec3(3.197549819946289f, 0.8710060715675354f, 0.7932868599891663f);
//    testNode164->position = vec3(-77.92670440673828f + (MAPX), 101.52191925048828f + (MAPY), 43.25148010253906f + (MAPZ));
//    testNode164->eulerAngles = vec3(45.785073440724105f, -4.861744019140708f, 11.238791118858133f);
//    Engine::main->addNode(testNode164);
//    Node* testNode165 = new Node();
//    testNode165->loadUnitCube();
//    testNode165->geometries[0]->setShader(cubeShader);
//    testNode165->scale = vec3(2.6502342224121094f, 0.5061595439910889f, 1.1937869787216187f);
//    testNode165->position = vec3(-63.9312744140625f + (MAPX), 100.13201141357422f + (MAPY), 45.73871612548828f + (MAPZ));
//    testNode165->eulerAngles = vec3(0.0f, 43.705653083764986f, 0.0f);
//    Engine::main->addNode(testNode165);
//    Node* testNode166 = new Node();
//    testNode166->loadUnitCube();
//    testNode166->geometries[0]->setShader(cubeShader);
//    testNode166->scale = vec3(2.7297306060791016f, 0.506156861782074f, 6.517556190490723f);
//    testNode166->position = vec3(-46.55611801147461f + (MAPX), 99.95452117919922f + (MAPY), 24.650171279907227f + (MAPZ));
//    testNode166->eulerAngles = vec3(7.904074200004469f, 43.127641495063486f, 11.479775560701816f);
//    Engine::main->addNode(testNode166);
//    Node* testNode167 = new Node();
//    testNode167->loadUnitCube();
//    testNode167->geometries[0]->setShader(cubeShader);
//    testNode167->scale = vec3(6.517524719238281f, 0.5061544179916382f, 4.6);
//    testNode167->position = vec3(-41.971 + (MAPX), 99.933 + (MAPY), 28.542 + (MAPZ));
//    testNode167->eulerAngles = vec3(-10, 140, 0);
//    Engine::main->addNode(testNode167);
//    Node* testNode168 = new Node();
//    testNode168->loadUnitCube();
//    testNode168->geometries[0]->setShader(cubeShader);
//    testNode168->scale = vec3(3.3032939434051514f, 0.6175018548965454f, 3.9104771614074707f);
//    testNode168->position = vec3(-43.27030944824219f + (MAPX), 100.60518646240234f + (MAPY), 24.61647605895996f + (MAPZ));
//    testNode168->eulerAngles = vec3(8.073687433889749f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode168);
//    Node* testNode169 = new Node();
//    testNode169->loadUnitCube();
//    testNode169->geometries[0]->setShader(cubeShader);
//    testNode169->scale = vec3(2.7747550010681152f, 0.617497980594635f, 3.910478115081787f);
//    testNode169->position = vec3(-40.348876953125f + (MAPX), 100.26519775390625f + (MAPY), 24.803071975708008f + (MAPZ));
//    testNode169->eulerAngles = vec3(7.929977692431741f, 1.5214013722884798f, -10.79151105841797f);
//    Engine::main->addNode(testNode169);
//    Node* testNode170 = new Node();
//    testNode170->loadUnitCube();
//    testNode170->geometries[0]->setShader(cubeShader);
//    testNode170->scale = vec3(2.4444267749786377f, 0.617498517036438f, 3.910470724105835f);
//    testNode170->position = vec3(-45.70943069458008f + (MAPX), 100.63699340820312f + (MAPY), 23.689605712890625f + (MAPZ));
//    testNode170->eulerAngles = vec3(7.952978354461759f, -1.395372535992403f, 9.88779165386066f);
//    Engine::main->addNode(testNode170);
//    Node* testNode171 = new Node();
//    testNode171->loadUnitCube();
//    testNode171->geometries[0]->setShader(cubeShader);
//    testNode171->scale = vec3(4.5710625648498535f, 0.6174969673156738f, 3.9104578495025635f);
//    testNode171->position = vec3(-37.560611724853516f + (MAPX), 100.33831787109375f + (MAPY), 27.739652633666992f + (MAPZ));
//    testNode171->eulerAngles = vec3(-0.11929571051747247f, -1.3898941906695237f, 14.794070213937143f);
//    Engine::main->addNode(testNode171);
//    Node* testNode172 = new Node();
//    testNode172->loadUnitCube();
//    testNode172->geometries[0]->setShader(cubeShader);
//    testNode172->scale = vec3(4.570981979370117f, 0.6174842715263367f, 3.4411532878875732f);
//    testNode172->position = vec3(-33.84784698486328f + (MAPX), 100.49056243896484f + (MAPY), 29.19207763671875f + (MAPZ));
//    testNode172->eulerAngles = vec3(10.067675784710346f, -24.70581021857516f, -12.513392356668078f);
//    Engine::main->addNode(testNode172);
//    Node* testNode173 = new Node();
//    testNode173->loadUnitCube();
//    testNode173->geometries[0]->setShader(cubeShader);
//    testNode173->scale = vec3(4.570917129516602f, 0.6174736618995667f, 3.441112518310547f);
//    testNode173->position = vec3(-36.70840835571289f + (MAPX), 100.08808135986328f + (MAPY), 30.102859497070312f + (MAPZ));
//    testNode173->eulerAngles = vec3(13.974030018222596f, -23.249943444155896f, -6.272339216656513e-06f);
//    Engine::main->addNode(testNode173);
//    Node* testNode174 = new Node();
//    testNode174->loadUnitCube();
//    testNode174->geometries[0]->setShader(cubeShader);
//    testNode174->scale = vec3(1.1371562480926514f, 1.227376937866211f, 1.821528434753418f);
//    testNode174->position = vec3(-20.46408462524414f + (MAPX), 100.39659881591797f + (MAPY), 41.6118278503418f + (MAPZ));
//    testNode174->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode174);
//    Node* testNode175 = new Node();
//    testNode175->loadUnitCube();
//    testNode175->geometries[0]->setShader(cubeShader);
//    testNode175->scale = vec3(0.42302215099334717f, 0.270022988319397f, 0.7195037603378296f);
//    testNode175->position = vec3(-21.194692611694336f + (MAPX), 100.19007873535156f + (MAPY), 42.074790954589844f + (MAPZ));
//    testNode175->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode175);
//    Node* testNode176 = new Node();
//    testNode176->loadUnitCube();
//    testNode176->geometries[0]->setShader(cubeShader);
//    testNode176->scale = vec3(1.64073646068573f, 0.2700205147266388f, 2.4155006408691406f);
//    testNode176->position = vec3(-20.173702239990234f + (MAPX), 100.12782287597656f + (MAPY), 43.585540771484375f + (MAPZ));
//    testNode176->eulerAngles = vec3(4.872282147256392f, 25.844510328695712f, 14.616603116279995f);
//    Engine::main->addNode(testNode176);
//    Node* testNode177 = new Node();
//    testNode177->loadUnitCube();
//    testNode177->geometries[0]->setShader(cubeShader);
//    testNode177->scale = vec3(1.6407318115234375f, 0.27001962065696716f, 2.415491819381714f);
//    testNode177->position = vec3(-19.43890953063965f + (MAPX), 100.15076446533203f + (MAPY), 44.18009948730469f + (MAPZ));
//    testNode177->eulerAngles = vec3(13.4793475911689f, 8.461187971166668f, 10.046144467125528f);
//    Engine::main->addNode(testNode177);
//    Node* testNode178 = new Node();
//    testNode178->loadUnitCube();
//    testNode178->geometries[0]->setShader(cubeShader);
//    testNode178->scale = vec3(0.9579792618751526f, 0.35642877221107483f, 0.7464099526405334f);
//    testNode178->position = vec3(-19.488296508789062f + (MAPX), 100.38102722167969f + (MAPY), 42.73700714111328f + (MAPZ));
//    testNode178->eulerAngles = vec3(-8.256094465864109f, 1.1534183140082845f, 7.89815413354136f);
//    Engine::main->addNode(testNode178);
//    Node* testNode179 = new Node();
//    testNode179->loadUnitCube();
//    testNode179->geometries[0]->setShader(cubeShader);
//    testNode179->scale = vec3(0.9893259406089783f, 0.47867703437805176f, 1.0668045282363892f);
//    testNode179->position = vec3(-19.103288650512695f + (MAPX), 100.21629333496094f + (MAPY), 54.49107360839844f + (MAPZ));
//    testNode179->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode179);
//    Node* testNode180 = new Node();
//    testNode180->loadUnitCube();
//    testNode180->geometries[0]->setShader(cubeShader);
//    testNode180->scale = vec3(0.9893237352371216f, 0.4786757826805115f, 1.0667997598648071f);
//    testNode180->position = vec3(-19.015531539916992f + (MAPX), 100.2162857055664f + (MAPY), 54.012451171875f + (MAPZ));
//    testNode180->eulerAngles = vec3(0.0f, 28.17137990154793f, 0.0f);
//    Engine::main->addNode(testNode180);
//    Node* testNode181 = new Node();
//    testNode181->loadUnitCube();
//    testNode181->geometries[0]->setShader(cubeShader);
//    testNode181->scale = vec3(0.9893259406089783f, 0.47867703437805176f, 1.0668045282363892f);
//    testNode181->position = vec3(-7.078795433044434f + (MAPX), 100.21629333496094f + (MAPY), 55.771881103515625f + (MAPZ));
//    testNode181->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode181);
//    Node* testNode182 = new Node();
//    testNode182->loadUnitCube();
//    testNode182->geometries[0]->setShader(cubeShader);
//    testNode182->scale = vec3(1.2854312658309937f, 1.301044225692749f, 0.786234974861145f);
//    testNode182->position = vec3(-7.15847110748291f + (MAPX), 100.21804809570312f + (MAPY), 56.24834060668945f + (MAPZ));
//    testNode182->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode182);
//    Node* testNode183 = new Node();
//    testNode183->loadUnitCube();
//    testNode183->geometries[0]->setShader(cubeShader);
//    testNode183->scale = vec3(1.400498390197754f, 0.5403918623924255f, 1.2003716230392456f);
//    testNode183->position = vec3(-35.81951141357422f + (MAPX), 100.14787292480469f + (MAPY), 72.19966888427734f + (MAPZ));
//    testNode183->eulerAngles = vec3(0.0f, -25.005870674097576f, 0.0f);
//    Engine::main->addNode(testNode183);
//    Node* testNode184 = new Node();
//    testNode184->loadUnitCube();
//    testNode184->geometries[0]->setShader(cubeShader);
//    testNode184->scale = vec3(1.8797130584716797f, 0.47867512702941895f, 1.0667979717254639f);
//    testNode184->position = vec3(-46.30879592895508f + (MAPX), 100.11913299560547f + (MAPY), 76.7021713256836f + (MAPZ));
//    testNode184->eulerAngles = vec3(0.0f, -0.0f, 29.869335900909128f);
//    Engine::main->addNode(testNode184);
//    Node* testNode185 = new Node();
//    testNode185->loadUnitCube();
//    testNode185->geometries[0]->setShader(cubeShader);
//    testNode185->scale = vec3(1.6650418043136597f, 0.558131992816925f, 1.066979169845581f);
//    testNode185->position = vec3(-46.33772277832031f + (MAPX), 100.08332061767578f + (MAPY), 76.13661193847656f + (MAPZ));
//    testNode185->eulerAngles = vec3(-6.073886364884964e-05f, -9.080844930785027f, 29.869349561287468f);
//    Engine::main->addNode(testNode185);
//    Node* testNode186 = new Node();
//    testNode186->loadUnitCube();
//    testNode186->geometries[0]->setShader(cubeShader);
//    testNode186->scale = vec3(1.6105358600616455f, 0.6184462904930115f, 1.0667928457260132f);
//    testNode186->position = vec3(-46.338932037353516f + (MAPX), 99.96936798095703f + (MAPY), 76.99179077148438f + (MAPZ));
//    testNode186->eulerAngles = vec3(4.659847864251916e-05f, 23.638140660728155f, 29.869346146192882f);
//    Engine::main->addNode(testNode186);
//    Node* testNode187 = new Node();
//    testNode187->loadUnitCube();
//    testNode187->geometries[0]->setShader(cubeShader);
//    testNode187->scale = vec3(1.6105307340621948f, 0.8410839438438416f, 1.0667918920516968f);
//    testNode187->position = vec3(-45.917198181152344f + (MAPX), 99.65918731689453f + (MAPY), 76.97357177734375f + (MAPZ));
//    testNode187->eulerAngles = vec3(-9.33001535434897f, 21.816754605328363f, 6.019853819335146f);
//    Engine::main->addNode(testNode187);
//    Node* testNode188 = new Node();
//    testNode188->loadUnitCube();
//    testNode188->geometries[0]->setShader(cubeShader);
//    testNode188->scale = vec3(1.0822665691375732f, 0.5456820726394653f, 0.874915599822998f);
//    testNode188->position = vec3(-45.241573333740234f + (MAPX), 100.31649017333984f + (MAPY), 76.50729370117188f + (MAPZ));
//    testNode188->eulerAngles = vec3(-1.2627842634938806f, 5.965700237613876f, -13.107611984270017f);
//    Engine::main->addNode(testNode188);
//    Node* testNode189 = new Node();
//    testNode189->loadUnitCube();
//    testNode189->geometries[0]->setShader(cubeShader);
//    testNode189->scale = vec3(1.1255348920822144f, 0.27862152457237244f, 0.8311588168144226f);
//    testNode189->position = vec3(-45.56191635131836f + (MAPX), 100.208740234375f + (MAPY), 76.0946273803711f + (MAPZ));
//    testNode189->eulerAngles = vec3(-45.22926679701432f, -14.404377185936651f, -0.676554196312711f);
//    Engine::main->addNode(testNode189);
//    Node* testNode190 = new Node();
//    testNode190->loadUnitCube();
//    testNode190->geometries[0]->setShader(cubeShader);
//    testNode190->scale = vec3(1.6816788911819458f, 0.5637115836143494f, 1.088313341140747f);
//    testNode190->position = vec3(-44.376583099365234f + (MAPX), 100.8388671875f + (MAPY), 76.6834945678711f + (MAPZ));
//    testNode190->eulerAngles = vec3(-12.561622029944829f, -11.891285920458621f, 18.128348293136636f);
//    Engine::main->addNode(testNode190);
//    Node* testNode191 = new Node();
//    testNode191->loadUnitCube();
//    testNode191->geometries[0]->setShader(cubeShader);
//    testNode191->scale = vec3(1.6816788911819458f, 1.037229299545288f, 1.0883134603500366f);
//    testNode191->position = vec3(-44.230098724365234f + (MAPX), 100.81695556640625f + (MAPY), 77.45632934570312f + (MAPZ));
//    testNode191->eulerAngles = vec3(-12.561622029944829f, -11.891285920458621f, 18.12835170823122f);
//    Engine::main->addNode(testNode191);
//    Node* testNode192 = new Node();
//    testNode192->loadUnitCube();
//    testNode192->geometries[0]->setShader(cubeShader);
//    testNode192->scale = vec3(1.244404911994934f, 1.1386659145355225f, 1.0882747173309326f);
//    testNode192->position = vec3(-44.6690788269043f + (MAPX), 100.24158477783203f + (MAPY), 77.19627380371094f + (MAPZ));
//    testNode192->eulerAngles = vec3(54.26487282360541f, -75.50755685938337f, -67.51022496399884f);
//    Engine::main->addNode(testNode192);
//    Node* testNode193 = new Node();
//    testNode193->loadUnitCube();
//    testNode193->geometries[0]->setShader(cubeShader);
//    testNode193->scale = vec3(0.6951248049736023f, 1.5162369012832642f, 1.9588944911956787f);
//    testNode193->position = vec3(-44.0681037902832f + (MAPX), 100.29679107666016f + (MAPY), 77.83768463134766f + (MAPZ));
//    testNode193->eulerAngles = vec3(54.2648762387f, -75.5075295386267f, -67.51022496399884f);
//    Engine::main->addNode(testNode193);
//    Node* testNode194 = new Node();
//    testNode194->loadUnitCube();
//    testNode194->geometries[0]->setShader(cubeShader);
//    testNode194->scale = vec3(1.5703728199005127f, 1.6072033643722534f, 1.1557502746582031f);
//    testNode194->position = vec3(-43.45943069458008f + (MAPX), 100.52117156982422f + (MAPY), 77.1209487915039f + (MAPZ));
//    testNode194->eulerAngles = vec3(-90.95473317685172f, -54.737737065129146f, 65.56701565456271f);
//    Engine::main->addNode(testNode194);
//    Node* testNode195 = new Node();
//    testNode195->loadUnitCube();
//    testNode195->geometries[0]->setShader(cubeShader);
//    testNode195->scale = vec3(0.5339264869689941f, 0.9112842679023743f, 1.1557499170303345f);
//    testNode195->position = vec3(-43.366268157958984f + (MAPX), 101.20550537109375f + (MAPY), 77.76778411865234f + (MAPZ));
//    testNode195->eulerAngles = vec3(-90.954623893825f, -54.73774389531832f, 65.5669268621035f);
//    Engine::main->addNode(testNode195);
//    Node* testNode196 = new Node();
//    testNode196->loadUnitCube();
//    testNode196->geometries[0]->setShader(cubeShader);
//    testNode196->scale = vec3(1.114264965057373f, 0.5501925349235535f, 1.3187836408615112f);
//    testNode196->position = vec3(-43.707115173339844f + (MAPX), 100.58856201171875f + (MAPY), 75.94579315185547f + (MAPZ));
//    testNode196->eulerAngles = vec3(-33.930662004047086f, -22.41235051604806f, -12.336537414715291f);
//    Engine::main->addNode(testNode196);
//    Node* testNode197 = new Node();
//    testNode197->loadUnitCube();
//    testNode197->geometries[0]->setShader(cubeShader);
//    testNode197->scale = vec3(0.7909379601478577f, 0.8252865672111511f, 0.6593897342681885f);
//    testNode197->position = vec3(-44.33345031738281f + (MAPX), 100.5409164428711f + (MAPY), 75.96971893310547f + (MAPZ));
//    testNode197->eulerAngles = vec3(0.0f, 34.647357168751114f, 0.0f);
//    Engine::main->addNode(testNode197);
//    Node* testNode198 = new Node();
//    testNode198->loadUnitCube();
//    testNode198->geometries[0]->setShader(cubeShader);
//    testNode198->scale = vec3(1.8450971841812134f, 1.121996521949768f, 1.1474974155426025f);
//    testNode198->position = vec3(-42.66917037963867f + (MAPX), 99.7457046508789f + (MAPY), 78.0596923828125f + (MAPZ));
//    testNode198->eulerAngles = vec3(120.11884863086244f, -75.5075295386267f, -67.51046402061979f);
//    Engine::main->addNode(testNode198);
//    Node* testNode199 = new Node();
//    testNode199->loadUnitCube();
//    testNode199->geometries[0]->setShader(cubeShader);
//    testNode199->scale = vec3(1.7528423070907593f, 1.3652454614639282f, 1.065106987953186f);
//    testNode199->position = vec3(-42.07681655883789f + (MAPX), 99.7665786743164f + (MAPY), 78.006103515625f + (MAPZ));
//    testNode199->eulerAngles = vec3(120.11884863086244f, -75.5075295386267f, -67.51046402061979f);
//    Engine::main->addNode(testNode199);
//    Node* testNode200 = new Node();
//    testNode200->loadUnitCube();
//    testNode200->geometries[0]->setShader(cubeShader);
//    testNode200->scale = vec3(0.3511553108692169f, 1.6241815090179443f, 1.147481918334961f);
//    testNode200->position = vec3(-42.115264892578125f + (MAPX), 99.24984741210938f + (MAPY), 79.01890563964844f + (MAPZ));
//    testNode200->eulerAngles = vec3(176.46452150963933f, -75.50750221787001f, -67.51077820932161f);
//    Engine::main->addNode(testNode200);
//    Node* testNode201 = new Node();
//    testNode201->loadUnitCube();
//    testNode201->geometries[0]->setShader(cubeShader);
//    testNode201->scale = vec3(0.42138636112213135f, 1.0992460250854492f, 1.5491007566452026f);
//    testNode201->position = vec3(-41.9118537902832f + (MAPX), 99.84220123291016f + (MAPY), 77.1347885131836f + (MAPZ));
//    testNode201->eulerAngles = vec3(176.46452150963933f, -75.50750221787001f, -67.51077820932161f);
//    Engine::main->addNode(testNode201);
//    Node* testNode202 = new Node();
//    testNode202->loadUnitCube();
//    testNode202->geometries[0]->setShader(cubeShader);
//    testNode202->scale = vec3(1.1217873096466064f, 0.6083914041519165f, 1.8561211824417114f);
//    testNode202->position = vec3(-66.78717041015625f + (MAPX), 99.73412322998047f + (MAPY), 75.27947235107422f + (MAPZ));
//    testNode202->eulerAngles = vec3(17.68080697796072f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode202);
//    Node* testNode203 = new Node();
//    testNode203->loadUnitCube();
//    testNode203->geometries[0]->setShader(cubeShader);
//    testNode203->scale = vec3(2.0353643894195557f, 1.631704568862915f, 1.5777019262313843f);
//    testNode203->position = vec3(-64.58651733398438f + (MAPX), 99.30984497070312f + (MAPY), 76.46227264404297f + (MAPZ));
//    testNode203->eulerAngles = vec3(17.684582365024443f, -1.1637468406938132f, -0.37102094499611726f);
//    Engine::main->addNode(testNode203);
//    Node* testNode204 = new Node();
//    testNode204->loadUnitCube();
//    testNode204->geometries[0]->setShader(cubeShader);
//    testNode204->scale = vec3(1.3840434551239014f, 1.6317036151885986f, 1.5776997804641724f);
//    testNode204->position = vec3(-64.33647155761719f + (MAPX), 99.57342529296875f + (MAPY), 75.6353988647461f + (MAPZ));
//    testNode204->eulerAngles = vec3(19.118387628424568f, -21.98046911709169f, -7.392553649099397f);
//    Engine::main->addNode(testNode204);
//    Node* testNode205 = new Node();
//    testNode205->loadUnitCube();
//    testNode205->geometries[0]->setShader(cubeShader);
//    testNode205->scale = vec3(2.0353643894195557f, 1.631704568862915f, 1.5777021646499634f);
//    testNode205->position = vec3(-64.64596557617188f + (MAPX), 99.83838653564453f + (MAPY), 76.24405670166016f + (MAPZ));
//    testNode205->eulerAngles = vec3(17.684582365024443f, -1.1637468406938132f, -0.37102094499611726f);
//    Engine::main->addNode(testNode205);
//    Node* testNode206 = new Node();
//    testNode206->loadUnitCube();
//    testNode206->geometries[0]->setShader(cubeShader);
//    testNode206->scale = vec3(2.8990232944488525f, 2.1851742267608643f, 2.564908742904663f);
//    testNode206->position = vec3(-75.92134857177734f + (MAPX), 100.36532592773438f + (MAPY), 62.609107971191406f + (MAPZ));
//    testNode206->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode206);
//    Node* testNode207 = new Node();
//    testNode207->loadUnitCube();
//    testNode207->geometries[0]->setShader(cubeShader);
//    testNode207->scale = vec3(3.768714666366577f, 2.7719271183013916f, 1.9929255247116089f);
//    testNode207->position = vec3(-75.48342895507812f + (MAPX), 100.36531829833984f + (MAPY), 62.979713439941406f + (MAPZ));
//    testNode207->eulerAngles = vec3(0.0f, 22.84948262292888f, 0.0f);
//    Engine::main->addNode(testNode207);
//    Node* testNode208 = new Node();
//    testNode208->loadUnitCube();
//    testNode208->geometries[0]->setShader(cubeShader);
//    testNode208->scale = vec3(2.8253557682037354f, 0.3321402370929718f, 1.6034952402114868f);
//    testNode208->position = vec3(-75.84029388427734f + (MAPX), 101.84427642822266f + (MAPY), 63.03424835205078f + (MAPZ));
//    testNode208->eulerAngles = vec3(12.245058129840372f, 20.834766355524582f, 7.005017253329336f);
//    Engine::main->addNode(testNode208);
//    Node* testNode209 = new Node();
//    testNode209->loadUnitCube();
//    testNode209->geometries[0]->setShader(cubeShader);
//    testNode209->scale = vec3(1.7517120838165283f, 0.6626157760620117f, 1.6034883260726929f);
//    testNode209->position = vec3(-76.39762878417969f + (MAPX), 101.62838745117188f + (MAPY), 62.189762115478516f + (MAPZ));
//    testNode209->eulerAngles = vec3(11.693423024166169f, -12.028948383180229f, 0.12120505521539517f);
//    Engine::main->addNode(testNode209);
//    Node* testNode210 = new Node();
//    testNode210->loadUnitCube();
//    testNode210->geometries[0]->setShader(cubeShader);
//    testNode210->scale = vec3(1.1168081760406494f, 0.5934932231903076f, 1.4876470565795898f);
//    testNode210->position = vec3(-75.54895782470703f + (MAPX), 100.37399291992188f + (MAPY), 66.80155944824219f + (MAPZ));
//    testNode210->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode210);
//    Node* testNode211 = new Node();
//    testNode211->loadUnitCube();
//    testNode211->geometries[0]->setShader(cubeShader);
//    testNode211->scale = vec3(1.9574413299560547f, 1.3841447830200195f, 1.4876470565795898f);
//    testNode211->position = vec3(-77.38719940185547f + (MAPX), 100.37399291992188f + (MAPY), 61.3284912109375f + (MAPZ));
//    testNode211->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode211);
//    Node* testNode212 = new Node();
//    testNode212->loadUnitCube();
//    testNode212->geometries[0]->setShader(cubeShader);
//    testNode212->scale = vec3(1.4680771827697754f, 1.3841394186019897f, 1.487642765045166f);
//    testNode212->position = vec3(-77.14984130859375f + (MAPX), 100.37398529052734f + (MAPY), 60.486331939697266f + (MAPZ));
//    testNode212->eulerAngles = vec3(0.0f, 46.437838034796805f, 0.0f);
//    Engine::main->addNode(testNode212);
//    Node* testNode213 = new Node();
//    testNode213->loadUnitCube();
//    testNode213->geometries[0]->setShader(cubeShader);
//    testNode213->scale = vec3(1.8722339868545532f, 0.8858473896980286f, 1.487638235092163f);
//    testNode213->position = vec3(-77.32471466064453f + (MAPX), 101.1423568725586f + (MAPY), 60.79917526245117f + (MAPZ));
//    testNode213->eulerAngles = vec3(19.453246190220906f, 46.437838034796805f, -1.7344535841309212e-05f);
//    Engine::main->addNode(testNode213);
//    Node* testNode214 = new Node();
//    testNode214->loadUnitCube();
//    testNode214->geometries[0]->setShader(cubeShader);
//    testNode214->scale = vec3(0.4991462826728821f, 1.3841394186019897f, 0.7140685319900513f);
//    testNode214->position = vec3(-76.30138397216797f + (MAPX), 100.37398529052734f + (MAPY), 61.2760124206543f + (MAPZ));
//    testNode214->eulerAngles = vec3(0.0f, 46.437838034796805f, 0.0f);
//    Engine::main->addNode(testNode214);
//    Node* testNode215 = new Node();
//    testNode215->loadUnitCube();
//    testNode215->geometries[0]->setShader(cubeShader);
//    testNode215->scale = vec3(3.045966386795044f, 2.5606579780578613f, 2.605754852294922f);
//    testNode215->position = vec3(-81.76553344726562f + (MAPX), 100.38604736328125f + (MAPY), 56.356571197509766f + (MAPZ));
//    testNode215->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode215);
//    Node* testNode216 = new Node();
//    testNode216->loadUnitCube();
//    testNode216->geometries[0]->setShader(cubeShader);
//    testNode216->scale = vec3(1.6218743324279785f, 0.947441816329956f, 0.9713861346244812f);
//    testNode216->position = vec3(-79.50634765625f + (MAPX), 100.38603973388672f + (MAPY), 56.055606842041016f + (MAPZ));
//    testNode216->eulerAngles = vec3(0.0f, 13.66454902428744f, 0.0f);
//    Engine::main->addNode(testNode216);
//    Node* testNode217 = new Node();
//    testNode217->loadUnitCube();
//    testNode217->geometries[0]->setShader(cubeShader);
//    testNode217->scale = vec3(2.055711269378662f, 1.3053615093231201f, 3.545872926712036f);
//    testNode217->position = vec3(-64.4777603149414f + (MAPX), 98.57506561279297f + (MAPY), 78.7672348022461f + (MAPZ));
//    testNode217->eulerAngles = vec3(19.21524141840264f, 22.659395043232838f, 7.647507535343048f);
//    Engine::main->addNode(testNode217);
//    Node* testNode218 = new Node();
//    testNode218->loadUnitCube();
//    testNode218->geometries[0]->setShader(cubeShader);
//    testNode218->scale = vec3(1.1833491325378418f, 1.999954342842102f, 4.248776435852051f);
//    testNode218->position = vec3(-47.677337646484375f + (MAPX), 97.99266052246094f + (MAPY), 78.55644226074219f + (MAPZ));
//    testNode218->eulerAngles = vec3(20.285714768903937f, -28.835340883217576f, -10.10793974986757f);
//    Engine::main->addNode(testNode218);
//    Node* testNode219 = new Node();
//    testNode219->loadUnitCube();
//    testNode219->geometries[0]->setShader(cubeShader);
//    testNode219->scale = vec3(2.289754629135132f, 1.8223292827606201f, 4.503650665283203f);
//    testNode219->position = vec3(-49.460941314697266f + (MAPX), 97.80448913574219f + (MAPY), 80.72434997558594f + (MAPZ));
//    testNode219->eulerAngles = vec3(19.069358823014923f, -37.997602522682804f, -13.686672007009113f);
//    Engine::main->addNode(testNode219);
//    Node* testNode220 = new Node();
//    testNode220->loadUnitCube();
//    testNode220->geometries[0]->setShader(cubeShader);
//    testNode220->scale = vec3(1.5265110731124878f, 2.679922103881836f, 4.5036845207214355f);
//    testNode220->position = vec3(-47.48369216918945f + (MAPX), 97.74949645996094f + (MAPY), 80.28510284423828f + (MAPZ));
//    testNode220->eulerAngles = vec3(3.276960625788626f, -11.48887166512898f, -8.991245655479153f);
//    Engine::main->addNode(testNode220);
//    Node* testNode221 = new Node();
//    testNode221->loadUnitCube();
//    testNode221->geometries[0]->setShader(cubeShader);
//    testNode221->scale = vec3(1.5265110731124878f, 2.679922103881836f, 1.711400032043457f);
//    testNode221->position = vec3(-48.36045455932617f + (MAPX), 97.71595001220703f + (MAPY), 83.14300537109375f + (MAPZ));
//    testNode221->eulerAngles = vec3(3.2769608392320375f, -11.488870811355334f, -8.991245655479153f);
//    Engine::main->addNode(testNode221);
//    Node* testNode222 = new Node();
//    testNode222->loadUnitCube();
//    testNode222->geometries[0]->setShader(cubeShader);
//    testNode222->scale = vec3(4.629956245422363f, 1.9998663663864136f, 4.970881938934326f);
//    testNode222->position = vec3(-40.98076248168945f + (MAPX), 98.816650390625f + (MAPY), 81.67090606689453f + (MAPZ));
//    testNode222->eulerAngles = vec3(4.777880395190353f, -29.882477184872233f, -9.899205753737396f);
//    Engine::main->addNode(testNode222);
//    Node* testNode223 = new Node();
//    testNode223->loadUnitCube();
//    testNode223->geometries[0]->setShader(cubeShader);
//    testNode223->scale = vec3(2.1108453273773193f, 4.276276588439941f, 4.208272457122803f);
//    testNode223->position = vec3(-65.1513442993164f + (MAPX), 100.0163345336914f + (MAPY), 54.71626663208008f + (MAPZ));
//    testNode223->eulerAngles = vec3(0.0f, 23.6740947765191f, 0.0f);
//    Engine::main->addNode(testNode223);
//    Node* testNode224 = new Node();
//    testNode224->loadUnitCube();
//    testNode224->geometries[0]->setShader(cubeShader);
//    testNode224->scale = vec3(2.116755962371826f, 2.2664268016815186f, 1.809557318687439f);
//    testNode224->position = vec3(-64.7252197265625f + (MAPX), 102.90035247802734f + (MAPY), 55.788299560546875f + (MAPZ));
//    testNode224->eulerAngles = vec3(0.0f, 23.6740947765191f, 0.0f);
//    Engine::main->addNode(testNode224);
//    Node* testNode225 = new Node();
//    testNode225->loadUnitCube();
//    testNode225->geometries[0]->setShader(cubeShader);
//    testNode225->scale = vec3(1.0288915634155273f, 1.0854145288467407f, 1.0667879581451416f);
//    testNode225->position = vec3(-24.496538162231445f + (MAPX), 100.5317153930664f + (MAPY), 59.94657516479492f + (MAPZ));
//    testNode225->eulerAngles = vec3(0.0f, -18.79608807696459f, 0.0f);
//    Engine::main->addNode(testNode225);
//    Node* testNode226 = new Node();
//    testNode226->loadUnitCube();
//    testNode226->geometries[0]->setShader(cubeShader);
//    testNode226->scale = vec3(1.0288883447647095f, 1.085411787033081f, 1.0987902879714966f);
//    testNode226->position = vec3(-23.422000885009766f + (MAPX), 100.48589324951172f + (MAPY), 60.09714126586914f + (MAPZ));
//    testNode226->eulerAngles = vec3(0.9747312805323479f, -18.7717145469114f, -3.026506553547544f);
//    Engine::main->addNode(testNode226);
//    Node* testNode227 = new Node();
//    testNode227->loadUnitCube();
//    testNode227->geometries[0]->setShader(cubeShader);
//    testNode227->scale = vec3(1.0288915634155273f, 1.0854145288467407f, 1.0667879581451416f);
//    testNode227->position = vec3(-23.952796936035156f + (MAPX), 101.51490020751953f + (MAPY), 59.96515655517578f + (MAPZ));
//    testNode227->eulerAngles = vec3(0.0f, -18.79608807696459f, 0.0f);
//    Engine::main->addNode(testNode227);
//    Node* testNode228 = new Node();
//    testNode228->loadUnitCube();
//    testNode228->geometries[0]->setShader(cubeShader);
//    testNode228->scale = vec3(1.0288889408111572f, 1.0854082107543945f, 1.0667831897735596f);
//    testNode228->position = vec3(-22.37727928161621f + (MAPX), 100.70132446289062f + (MAPY), 60.50138473510742f + (MAPZ));
//    testNode228->eulerAngles = vec3(-1.6802891814644305f, -18.72353951514801f, 5.221528075652539f);
//    Engine::main->addNode(testNode228);
//    Node* testNode229 = new Node();
//    testNode229->loadUnitCube();
//    testNode229->geometries[0]->setShader(cubeShader);
//    testNode229->scale = vec3(1.131768822669983f, 1.0854010581970215f, 1.3725931644439697f);
//    testNode229->position = vec3(-23.662965774536133f + (MAPX), 100.57051849365234f + (MAPY), 61.51395034790039f + (MAPZ));
//    testNode229->eulerAngles = vec3(-1.5919626692217066f, 1.6102327849212559f, 4.637237408669682f);
//    Engine::main->addNode(testNode229);
//    Node* testNode230 = new Node();
//    testNode230->loadUnitCube();
//    testNode230->geometries[0]->setShader(cubeShader);
//    testNode230->scale = vec3(3.432934045791626f, 9.042978286743164f, 4.1511101722717285f);
//    testNode230->position = vec3(-65.18487548828125f + (MAPX), 101.84440612792969f + (MAPY), 29.633747100830078f + (MAPZ));
//    testNode230->eulerAngles = vec3(0.0f, 31.89699025414872f, 0.0f);
//    Engine::main->addNode(testNode230);
//    Node* testNode231 = new Node();
//    testNode231->loadUnitCube();
//    testNode231->geometries[0]->setShader(cubeShader);
//    testNode231->scale = vec3(7.906647682189941f, 6.342826843261719f, 4.1511101722717285f);
//    testNode231->position = vec3(-60.799381256103516f + (MAPX), 107.45794677734375f + (MAPY), 26.904338836669922f + (MAPZ));
//    testNode231->eulerAngles = vec3(0.0f, 31.89699025414872f, 0.0f);
//    Engine::main->addNode(testNode231);
//    Node* testNode232 = new Node();
//    testNode232->loadUnitCube();
//    testNode232->geometries[0]->setShader(cubeShader);
//    testNode232->scale = vec3(0.6309500932693481f, 5.7085442543029785f, 4.1511101722717285f);
//    testNode232->position = vec3(-63.555904388427734f + (MAPX), 102.73540496826172f + (MAPY), 28.61992645263672f + (MAPZ));
//    testNode232->eulerAngles = vec3(0.0f, 31.89699025414872f, 0.0f);
//    Engine::main->addNode(testNode232);
//    Node* testNode233 = new Node();
//    testNode233->loadUnitCube();
//    testNode233->geometries[0]->setShader(cubeShader);
//    testNode233->scale = vec3(0.68773353099823f, 5.708541393280029f, 4.151106834411621f);
//    testNode233->position = vec3(-58.21347427368164f + (MAPX), 102.73653411865234f + (MAPY), 25.16110610961914f + (MAPZ));
//    testNode233->eulerAngles = vec3(0.8597104680225102f, 31.886625442083222f, 1.6271840337807582f);
//    Engine::main->addNode(testNode233);
//    Node* testNode234 = new Node();
//    testNode234->loadUnitCube();
//    testNode234->geometries[0]->setShader(cubeShader);
//    testNode234->scale = vec3(2.3244683742523193f, 2.808577299118042f, 1.9094921350479126f);
//    testNode234->position = vec3(-62.70801544189453f + (MAPX), 100.01632690429688f + (MAPY), 27.0463809967041f + (MAPZ));
//    testNode234->eulerAngles = vec3(0.0f, 34.113209054899436f, 0.0f);
//    Engine::main->addNode(testNode234);
//    Node* testNode235 = new Node();
//    testNode235->loadUnitCube();
//    testNode235->geometries[0]->setShader(cubeShader);
//    testNode235->scale = vec3(2.742863416671753f, 2.808567762374878f, 1.9094847440719604f);
//    testNode235->position = vec3(-61.182647705078125f + (MAPX), 100.01631927490234f + (MAPY), 26.5772762298584f + (MAPZ));
//    testNode235->eulerAngles = vec3(0.0f, 57.449028467489896f, 0.0f);
//    Engine::main->addNode(testNode235);
//    Node* testNode236 = new Node();
//    testNode236->loadUnitCube();
//    testNode236->geometries[0]->setShader(cubeShader);
//    testNode236->scale = vec3(1.3330776691436768f, 1.6357016563415527f, 0.8634673953056335f);
//    testNode236->position = vec3(-58.55326843261719f + (MAPX), 100.01631164550781f + (MAPY), 26.047744750976562f + (MAPZ));
//    testNode236->eulerAngles = vec3(-0.0f, -90.00000250447816f, 0.0f);
//    Engine::main->addNode(testNode236);
//    Node* testNode237 = new Node();
//    testNode237->loadUnitCube();
//    testNode237->geometries[0]->setShader(cubeShader);
//    testNode237->scale = vec3(3.3027400970458984f, 0.7708060145378113f, 3.8798422813415527f);
//    testNode237->position = vec3(-24.49850845336914f + (MAPX), 105.7392578125f + (MAPY), 38.11702346801758f + (MAPZ));
//    testNode237->eulerAngles = vec3(0.0f, 35.30097553647007f, 0.0f);
//    Engine::main->addNode(testNode237);
//    Node* testNode238 = new Node();
//    testNode238->loadUnitCube();
//    testNode238->geometries[0]->setShader(cubeShader);
//    testNode238->scale = vec3(3.3027400970458984f, 0.7708060145378113f, 3.8798422813415527f);
//    testNode238->position = vec3(-24.49850845336914f + (MAPX), 102.82872009277344f + (MAPY), 38.11702346801758f + (MAPZ));
//    testNode238->eulerAngles = vec3(0.0f, 35.30097553647007f, 0.0f);
//    Engine::main->addNode(testNode238);
//    Node* testNode239 = new Node();
//    testNode239->loadUnitCube();
//    testNode239->geometries[0]->setShader(cubeShader);
//    testNode239->scale = vec3(3.3027400970458984f, 6.181863784790039f, 0.5276586413383484f);
//    testNode239->position = vec3(-25.4595890045166f + (MAPX), 102.82872009277344f + (MAPY), 36.75968933105469f + (MAPZ));
//    testNode239->eulerAngles = vec3(0.0f, 35.30097553647007f, 0.0f);
//    Engine::main->addNode(testNode239);
//    Node* testNode240 = new Node();
//    testNode240->loadUnitCube();
//    testNode240->geometries[0]->setShader(cubeShader);
//    testNode240->scale = vec3(3.3027400970458984f, 6.181863784790039f, 0.5276586413383484f);
//    testNode240->position = vec3(-23.595863342285156f + (MAPX), 102.82872009277344f + (MAPY), 39.391841888427734f + (MAPZ));
//    testNode240->eulerAngles = vec3(0.0f, 35.30097553647007f, 0.0f);
//    Engine::main->addNode(testNode240);
//    Node* testNode241 = new Node();
//    testNode241->loadUnitCube();
//    testNode241->geometries[0]->setShader(cubeShader);
//    testNode241->scale = vec3(1.2099288702011108f, 2.172447443008423f, 2.3497653007507324f);
//    testNode241->position = vec3(-24.373140335083008f + (MAPX), 100.39659118652344f + (MAPY), 38.33529281616211f + (MAPZ));
//    testNode241->eulerAngles = vec3(0.0f, 19.48352954145345f, 0.0f);
//    Engine::main->addNode(testNode241);
//    Node* testNode242 = new Node();
//    testNode242->loadUnitCube();
//    testNode242->geometries[0]->setShader(cubeShader);
//    testNode242->scale = vec3(2.8312058448791504f, 2.1724252700805664f, 3.6186177730560303f);
//    testNode242->position = vec3(-26.115230560302734f + (MAPX), 100.08478546142578f + (MAPY), 34.44472122192383f + (MAPZ));
//    testNode242->eulerAngles = vec3(0.0f, -3.188667410718106f, 0.0f);
//    Engine::main->addNode(testNode242);
//    Node* testNode243 = new Node();
//    testNode243->loadUnitCube();
//    testNode243->geometries[0]->setShader(cubeShader);
//    testNode243->scale = vec3(1.849534511566162f, 1.4568233489990234f, 2.2503085136413574f);
//    testNode243->position = vec3(-24.445858001708984f + (MAPX), 106.50621795654297f + (MAPY), 37.16318130493164f + (MAPZ));
//    testNode243->eulerAngles = vec3(0.0f, 35.30097553647007f, 0.0f);
//    Engine::main->addNode(testNode243);
//    Node* testNode244 = new Node();
//    testNode244->loadUnitCube();
//    testNode244->geometries[0]->setShader(cubeShader);
//    testNode244->scale = vec3(1.3509410619735718f, 4.276251316070557f, 5.5145182609558105f);
//    testNode244->position = vec3(-57.3437385559082f + (MAPX), 100.20632934570312f + (MAPY), 56.64642333984375f + (MAPZ));
//    testNode244->eulerAngles = vec3(0.0f, 17.788167306429564f, 0.0f);
//    Engine::main->addNode(testNode244);
//    Node* testNode245 = new Node();
//    testNode245->loadUnitCube();
//    testNode245->geometries[0]->setShader(cubeShader);
//    testNode245->scale = vec3(1.3509371280670166f, 4.276229381561279f, 2.8123979568481445f);
//    testNode245->position = vec3(-63.13749694824219f + (MAPX), 102.05230712890625f + (MAPY), 41.383949279785156f + (MAPZ));
//    testNode245->eulerAngles = vec3(0.0f, -1.0896361932697072f, 0.0f);
//    Engine::main->addNode(testNode245);
//    Node* testNode246 = new Node();
//    testNode246->loadUnitCube();
//    testNode246->geometries[0]->setShader(cubeShader);
//    testNode246->scale = vec3(1.3509324789047241f, 2.7795376777648926f, 2.8123879432678223f);
//    testNode246->position = vec3(-56.93417739868164f + (MAPX), 100.74541473388672f + (MAPY), 35.11125564575195f + (MAPZ));
//    testNode246->eulerAngles = vec3(0.0f, -23.885209093575025f, 0.0f);
//    Engine::main->addNode(testNode246);
//    Node* testNode247 = new Node();
//    testNode247->loadUnitCube();
//    testNode247->geometries[0]->setShader(cubeShader);
//    testNode247->scale = vec3(1.3509324789047241f, 4.2762064933776855f, 5.514500141143799f);
//    testNode247->position = vec3(-38.96821594238281f + (MAPX), 100.20631408691406f + (MAPY), 48.01899337768555f + (MAPZ));
//    testNode247->eulerAngles = vec3(0.0f, 6.5528625722559f, 0.0f);
//    Engine::main->addNode(testNode247);
//    Node* testNode248 = new Node();
//    testNode248->loadUnitCube();
//    testNode248->geometries[0]->setShader(cubeShader);
//    testNode248->scale = vec3(1.350921392440796f, 4.276169300079346f, 2.686642646789551f);
//    testNode248->position = vec3(-35.004669189453125f + (MAPX), 100.206298828125f + (MAPY), 41.2084846496582f + (MAPZ));
//    testNode248->eulerAngles = vec3(0.0f, 23.370209415061478f, 0.0f);
//    Engine::main->addNode(testNode248);
//    Node* testNode249 = new Node();
//    testNode249->loadUnitCube();
//    testNode249->geometries[0]->setShader(cubeShader);
//    testNode249->scale = vec3(1.3508974313735962f, 4.276102542877197f, 2.8746590614318848f);
//    testNode249->position = vec3(-33.034629821777344f + (MAPX), 100.20629119873047f + (MAPY), 57.30351638793945f + (MAPZ));
//    testNode249->eulerAngles = vec3(179.999991348578f, -(21.904616451264115f), 0.0f);
//    Engine::main->addNode(testNode249);
//    Node* testNode250 = new Node();
//    testNode250->loadUnitCube();
//    testNode250->geometries[0]->setShader(cubeShader);
//    testNode250->scale = vec3(2.6502342224121094f, 0.5061594247817993f, 1.1937867403030396f);
//    testNode250->position = vec3(-65.95882415771484f + (MAPX), 100.53648376464844f + (MAPY), 47.136268615722656f + (MAPZ));
//    testNode250->eulerAngles = vec3(-89.99998884409983f, 0.0f, 0.0f);
//    Engine::main->addNode(testNode250);
//    Node* testNode251 = new Node();
//    testNode251->loadUnitCube();
//    testNode251->geometries[0]->setShader(cubeShader);
//    testNode251->scale = vec3(2.650203227996826f, 0.5061525106430054f, 1.1937720775604248f);
//    testNode251->position = vec3(-47.533782958984375f + (MAPX), 100.22769165039062f + (MAPY), 66.69246673583984f + (MAPZ));
//    testNode251->eulerAngles = vec3(173.2816943375484f, -(45.54360917809123f), 0.0f);
//    Engine::main->addNode(testNode251);
//    Node* testNode252 = new Node();
//    testNode252->loadUnitCube();
//    testNode252->geometries[0]->setShader(cubeShader);
//    testNode252->scale = vec3(2.6499550342559814f, 0.5061374306678772f, 1.1937456130981445f);
//    testNode252->position = vec3(-49.26051712036133f + (MAPX), 100.55846405029297f + (MAPY), 66.35468292236328f + (MAPZ));
//    testNode252->eulerAngles = vec3(-70.58603673217401f, 108.856, 20.426);
//    Engine::main->addNode(testNode252);
//    Node* testNode253 = new Node();
//    testNode253->loadUnitCube();
//    testNode253->geometries[0]->setShader(cubeShader);
//    testNode253->scale = vec3(4.07969331741333f, 0.5061299204826355f, 1.1937311887741089f);
//    testNode253->position = vec3(-41.01167678833008f + (MAPX), 100.47013092041016f + (MAPY), 58.2442626953125f + (MAPZ));
//    testNode253->eulerAngles = vec3(-90.00015276863991f, 66.62704735337034f, -0.00013773504390357996f);
//    Engine::main->addNode(testNode253);
//    Node* testNode254 = new Node();
//    testNode254->loadUnitCube();
//    testNode254->geometries[0]->setShader(cubeShader);
//    testNode254->scale = vec3(4.0796942710876465f, 0.506130039691925f, 1.193731427192688f);
//    testNode254->position = vec3(-29.214153289794922f + (MAPX), 100.47013854980469f + (MAPY), 43.1866455078125f + (MAPZ));
//    testNode254->eulerAngles = vec3(90.00019374977492f, -90.00000250447816f, 0.0f);
//    Engine::main->addNode(testNode254);
//    Node* testNode255 = new Node();
//    testNode255->loadUnitCube();
//    testNode255->geometries[0]->setShader(cubeShader);
//    testNode255->scale = vec3(2.651801109313965f, 0.506130039691925f, 1.193731427192688f);
//    testNode255->position = vec3(-26.996849060058594f + (MAPX), 100.47014617919922f + (MAPY), 52.97856903076172f + (MAPZ));
//    testNode255->eulerAngles = vec3(90.00019374977492f, 0.0f, 0.0f);
//    Engine::main->addNode(testNode255);
//    Node* testNode256 = new Node();
//    testNode256->loadUnitCube();
//    testNode256->geometries[0]->setShader(cubeShader);
//    testNode256->scale = vec3(1.0974222421646118f, 7.202520847320557f, 1.406652808189392f);
//    testNode256->position = vec3(-24.998699188232422f + (MAPX), 103.33746337890625f + (MAPY), 63.16604995727539f + (MAPZ));
//    testNode256->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode256);
//    Node* testNode257 = new Node();
//    testNode257->loadUnitCube();
//    testNode257->geometries[0]->setShader(cubeShader);
//    testNode257->scale = vec3(1.262032389640808f, 7.202511310577393f, 1.4066494703292847f);
//    testNode257->position = vec3(-68.37962341308594f + (MAPX), 102.8046875f + (MAPY), 76.13838958740234f + (MAPZ));
//    testNode257->eulerAngles = vec3(8.85952033469358f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode257);
//    Node* testNode258 = new Node();
//    testNode258->loadUnitCube();
//    testNode258->geometries[0]->setShader(cubeShader);
//    testNode258->scale = vec3(0.49063050746917725f, 3.1459603309631348f, 0.4283576011657715f);
//    testNode258->position = vec3(-69.54641723632812f + (MAPX), 101.47850799560547f + (MAPY), 73.10081481933594f + (MAPZ));
//    testNode258->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode258);
//    Node* testNode259 = new Node();
//    testNode259->loadUnitCube();
//    testNode259->geometries[0]->setShader(cubeShader);
//    testNode259->scale = vec3(0.5664000511169434f, 7.945343494415283f, 2.413800001144409f);
//    testNode259->position = vec3(-79.71293640136719f + (MAPX), 100.41064453125f + (MAPY), 49.08203125f + (MAPZ));
//    testNode259->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode259);
//    Node* testNode260 = new Node();
//    testNode260->loadUnitCube();
//    testNode260->geometries[0]->setShader(cubeShader);
//    testNode260->scale = vec3(0.5664000511169434f, 7.945343494415283f, 2.413800001144409f);
//    testNode260->position = vec3(-18.24441909790039f + (MAPX), 100.41064453125f + (MAPY), 49.08203125f + (MAPZ));
//    testNode260->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode260);
//    Node* testNode261 = new Node();
//    testNode261->loadUnitCube();
//    testNode261->geometries[0]->setShader(cubeShader);
//    testNode261->scale = vec3(7.02209997177124f, 1.0f, 7.021727561950684f);
//    testNode261->position = vec3(-12.227217674255371f + (MAPX), 123.5608139038086f + (MAPY), 49.0118522644043f + (MAPZ));
//    testNode261->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode261);
//    Node* testNode262 = new Node();
//    testNode262->loadUnitCube();
//    testNode262->geometries[0]->setShader(cubeShader);
//    testNode262->scale = vec3(7.02209997177124f, 1.0f, 7.021727561950684f);
//    testNode262->position = vec3(-86.04368591308594f + (MAPX), 123.5608139038086f + (MAPY), 49.0118522644043f + (MAPZ));
//    testNode262->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode262);
//    Node* testNode263 = new Node();
//    testNode263->loadUnitCube();
//    testNode263->geometries[0]->setShader(cubeShader);
//    testNode263->scale = vec3(22.118587493896484f, 34.160240173339844f, 0.9999827742576599f);
//    testNode263->position = vec3(-77.25244903564453f + (MAPX), 100.03518676757812f + (MAPY), 65.96394348144531f + (MAPZ));
//    testNode263->eulerAngles = vec3(0.0f, -73.81431881319136f, 0.0f);
//    Engine::main->addNode(testNode263);
//    Node* testNode264 = new Node();
//    testNode264->loadUnitCube();
//    testNode264->geometries[0]->setShader(cubeShader);
//    testNode264->scale = vec3(22.11847686767578f, 34.160064697265625f, 0.9999775886535645f);
//    testNode264->position = vec3(-24.610084533691406f + (MAPX), 100.0351791381836f + (MAPY), 64.84906768798828f + (MAPZ));
//    testNode264->eulerAngles = vec3(0.0f, 54.58096714820443f, 0.0f);
//    Engine::main->addNode(testNode264);
//    Node* testNode265 = new Node();
//    testNode265->loadUnitCube();
//    testNode265->geometries[0]->setShader(cubeShader);
//    testNode265->scale = vec3(18.13706398010254f, 34.15998458862305f, 0.999973714351654f);
//    testNode265->position = vec3(-68.18663787841797f + (MAPX), 98.04540252685547f + (MAPY), 80.27544403076172f + (MAPZ));
//    testNode265->eulerAngles = vec3(0.0f, -34.62470826146335f, 0.0f);
//    Engine::main->addNode(testNode265);
//    Node* testNode266 = new Node();
//    testNode266->loadUnitCube();
//    testNode266->geometries[0]->setShader(cubeShader);
//    testNode266->scale = vec3(18.137014389038086f, 34.159786224365234f, 0.9999696016311646f);
//    testNode266->position = vec3(-36.88357925415039f + (MAPX), 98.0453872680664f + (MAPY), 78.03290557861328f + (MAPZ));
//    testNode266->eulerAngles = vec3(0.0f, 36.56689987271316f, 0.0f);
//    Engine::main->addNode(testNode266);
//    Node* testNode267 = new Node();
//    testNode267->loadUnitCube();
//    testNode267->geometries[0]->setShader(cubeShader);
//    testNode267->scale = vec3(20.132038116455078f, 34.159706115722656f, 0.9999676942825317f);
//    testNode267->position = vec3(-52.44977951049805f + (MAPX), 98.04537963867188f + (MAPY), 84.4310302734375f + (MAPZ));
//    testNode267->eulerAngles = vec3(0.0f, 7.596097555234008f, 0.0f);
//    Engine::main->addNode(testNode267);
//    Node* testNode271 = new Node();
//    testNode271->loadUnitCube();
//    testNode271->geometries[0]->setShader(cubeShader);
//    testNode271->scale = vec3(4, 0.506, 1);
//    testNode271->position = vec3(-39.882 + (MAPX), 100.2 + (MAPY), 26.585 + (MAPZ));
//    testNode271->eulerAngles = vec3(-10, -40, 0);
//    Engine::main->addNode(testNode271);
//    Node* testNode272 = new Node();
//    testNode272->loadUnitCube();
//    testNode272->geometries[0]->setShader(cubeShader);
//    testNode272->scale = vec3(2, 0.506, 3);
//    testNode272->position = vec3(-37.824 + (MAPX), 100.3 + (MAPY), 25.255 + (MAPZ));
//    testNode272->eulerAngles = vec3(-15, 50, 0);
//    Engine::main->addNode(testNode272);
    
}


void importMapModel() {
    Node* newMap = new Node();
    newMap->loadModelFile("/Resources/Game/Map/newBase.dae");
    newMap->position.x = MAPX;
    newMap->position.z = MAPZ;
//    newMap->scale = vec3(5);
    newMap->position.y = MAPY;
    
    
    PBRShader* wallShader = new PBRShader(0.3f, 0.7f);
    wallShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Wall_01_Albedo.png", 2, true));
    wallShader->setNormalMap(new Texture("/Resources/Game/Map/T_Wall_01_Normal.png", 1, true));
    wallShader->alphaCutThreshold = 0.0f;
    newMap->geometries[2]->setDoubleSided();
    newMap->geometries[2]->setShader(wallShader);
    PBRShader* wallShader2 = new PBRShader(0.3f, 0.7f);
    wallShader2->setDiffuseMap(new Texture("/Resources/Game/Map/T_Wall_03_Albedo.png", 2, true));
    wallShader2->setNormalMap(new Texture("/Resources/Game/Map/T_Wall_03_Normal.png", 1, true));
    wallShader2->alphaCutThreshold = 0.0f;
    newMap->geometries[3]->setDoubleSided();
    newMap->geometries[3]->setShader(wallShader2);
    PBRShader* wallShader3 = new PBRShader(0.3f, 0.7f);
    wallShader3->setDiffuseMap(new Texture("/Resources/Game/Map/T_Bricks_01_Albedo.png", 2, true));
    wallShader3->setNormalMap(new Texture("/Resources/Game/Map/T_Bricks_01_Normal.png", 1, true));
    wallShader3->alphaCutThreshold = 0.0f;
    newMap->geometries[4]->setDoubleSided();
    newMap->geometries[4]->setShader(wallShader3);
    PBRShader* wallShader4 = new PBRShader(0.3f, 0.7f);
    wallShader4->setDiffuseMap(new Texture("/Resources/Game/Map/T_Floor_01_Albedo.png", 2, true));
    wallShader4->setNormalMap(new Texture("/Resources/Game/Map/T_Floor_01_Normal.png", 1, true));
    wallShader4->alphaCutThreshold = 0.0f;
    newMap->geometries[0]->setDoubleSided();
    newMap->geometries[0]->setShader(wallShader4);
    PBRShader* wallShader5 = new PBRShader(0.3f, 0.7f);
    wallShader5->setDiffuseMap(new Texture("/Resources/Game/Map/T_Floor_Bricks_01_Albedo.png", 2, true));
    wallShader5->setNormalMap(new Texture("/Resources/Game/Map/T_Floor_Bricks_01_Normal.png", 1, true));
    wallShader5->alphaCutThreshold = 0.0f;
    newMap->geometries[5]->setDoubleSided();
    newMap->geometries[5]->setShader(wallShader5);
    PBRShader* wallShader6 = new PBRShader(0.3f, 0.7f);
    wallShader6->setDiffuseMap(new Texture("/Resources/Game/Map/T_Trim_01_Albedo.png", 2, true));
    wallShader6->setNormalMap(new Texture("/Resources/Game/Map/T_Trim_01_Normal.png", 1, true));
    wallShader6->alphaCutThreshold = 0.0f;
    newMap->geometries[7]->setDoubleSided();
    newMap->geometries[7]->setShader(wallShader6);
    PBRShader* wallShader7 = new PBRShader(0.3f, 0.7f);
    wallShader7->setDiffuseMap(new Texture("/Resources/Game/Map/T_Battlement_01_Albedo.png", 2, true));
    wallShader7->setNormalMap(new Texture("/Resources/Game/Map/T_Battlement_01_Normal.png", 1, true));
    wallShader7->alphaCutThreshold = 0.0f;
    newMap->geometries[8]->setDoubleSided();
    newMap->geometries[8]->setShader(wallShader7);
    PBRShader* wallShader8 = new PBRShader(0.85f, 0.2f);
    wallShader8->setDiffuseMap(new Texture("/Resources/Game/Map/T_Metal_Surface_01_Albedo.png", 2, true));
    wallShader8->setNormalMap(new Texture("/Resources/Game/Map/T_Metal_Surface_01_Normal.png", 1, true));
    wallShader8->alphaCutThreshold = 0.0f;
    newMap->geometries[1]->setDoubleSided();
    newMap->geometries[1]->setShader(wallShader8);
    PBRShader* wallShader9 = new PBRShader("/Resources/Game/Map/Terrain", 0.1f, 0.9f);
    wallShader9->setDiffuseMap(new Texture("/Resources/Game/Map/TexturesCom_Rock_Mossy_1K_albedo.png", 2, true));
    wallShader9->setNormalMap(new Texture("/Resources/Game/Map/TexturesCom_Rock_Mossy_1K_normal.png", 1, true));
    wallShader9->alphaCutThreshold = 0.0f;
    newMap->geometries[9]->setDoubleSided();
    newMap->geometries[9]->setShader(wallShader9);
    PBRShader* wallShadera = new PBRShader(0.3f, 0.3f);
    wallShadera->setDiffuseMap(new Texture("/Resources/Game/Map/T_Column_01_Albedo.png", 2, true));
    wallShadera->setNormalMap(new Texture("/Resources/Game/Map/T_Column_01_Normal.png", 1, true));
    wallShadera->alphaCutThreshold = 0.0f;
    newMap->geometries[10]->setDoubleSided();
    newMap->geometries[10]->setShader(wallShadera);
    PBRShader* wallShaderb = new PBRShader(0.3f, 0.7f);
    wallShaderb->setDiffuseMap(new Texture("/Resources/Game/Map/T_Arch_01_Albedo.png", 2, true));
    wallShaderb->setNormalMap(new Texture("/Resources/Game/Map/T_Arch_01_Normal.png", 1, true));
    wallShaderb->alphaCutThreshold = 0.0f;
    newMap->geometries[6]->setDoubleSided();
    newMap->geometries[6]->setShader(wallShaderb);
    
    for (int n = 11; n < newMap->geometries.size(); n++) {
        newMap->geometries[n]->setShader(new PBRShader(0.5, 0.3));
    }
    Engine::main->addNode(newMap);
    PBRShader* plant1Shader = new PBRShader(0.5, 0.4);
    plant1Shader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Plant_01_Albedo.png", 2.0, true));
    plant1Shader->setNormalMap(new Texture("/Resources/Game/Map/T_Plant_01_Normal.png", 2.0, true));
    Node* plant1 = new Node();
    plant1->loadModelFile("/Resources/Game/Map/plant01lod0.dae");
    plant1->geometries[0]->setShader(plant1Shader);
    plant1->geometries[0]->setDoubleSided();
    plant1->position.z = MAPZ;
    plant1->position.x = MAPX;
    plant1->position.y = MAPY;
    Node* plant3 = new Node();
    plant3->loadModelFile("/Resources/Game/Map/plant03lod0.dae");
    plant3->geometries[0]->setShader(plant1Shader);
    plant3->geometries[0]->setDoubleSided();
    plant3->position.z = MAPZ;
    plant3->position.x = MAPX;
    plant3->position.y = MAPY;
    Node* plant1_0 = plant1->copy();
    plant1_0->position += vec3(-57.17582321166992, 100.00218200683594, 23.40212631225586);
    plant1_0->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant1_0->scale = vec3(0.49999996185302736, 0.49999996185302736, 0.49999996185302736);
    Engine::main->addNode(plant1_0);
    Node* plant3_1 = plant3->copy();
    plant3_1->position += vec3(-78.26461791992188, 100.00308990478516, 53.28422546386719);
    plant3_1->eulerAngles = vec3(0.0, -81.39540532017698, 0.0);
    plant3_1->scale = vec3(0.9999913024902344, 0.9999925994873047, 0.9999913024902344);
    Engine::main->addNode(plant3_1);
    Node* plant3_2 = plant3->copy();
    plant3_2->position += vec3(-78.66901397705078, 100.00308227539062, 47.33259201049805);
    plant3_2->eulerAngles = vec3(0.0, -34.65575488633564, 0.0);
    plant3_2->scale = vec3(0.9999915313720703, 0.99998779296875, 0.9999915313720703);
    Engine::main->addNode(plant3_2);
    Node* plant3_3 = plant3->copy();
    plant3_3->position += vec3(-78.36922454833984, 100.00308227539062, 44.6095085144043);
    plant3_3->eulerAngles = vec3(0.0, -34.65575488633564, 0.0);
    plant3_3->scale = vec3(0.9999915313720703, 0.99998779296875, 0.9999915313720703);
    Engine::main->addNode(plant3_3);
    Node* plant3_4 = plant3->copy();
    plant3_4->position += vec3(-78.49551391601562, 100.0030746459961, 44.58934020996094);
    plant3_4->eulerAngles = vec3(0.0, 90.00000250447816, 0.0);
    plant3_4->scale = vec3(0.9999874877929688, 1.9999862670898438, 0.9999874877929688);
    Engine::main->addNode(plant3_4);
    Node* plant3_5 = plant3->copy();
    plant3_5->position += vec3(-81.05696105957031, 123.90168762207031, 47.07577133178711);
    plant3_5->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_5->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(plant3_5);
    Node* plant3_6 = plant3->copy();
    plant3_6->position += vec3(-89.27325439453125, 123.90168762207031, 53.58332061767578);
    plant3_6->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_6->scale = vec3(1.9351551818847657, 1.9351551818847657, 1.9351551818847657);
    Engine::main->addNode(plant3_6);
    Node* plant3_7 = plant3->copy();
    plant3_7->position += vec3(-85.80537414550781, 123.90169525146484, 44.222190856933594);
    plant3_7->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_7->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(plant3_7);
    Node* plant3_8 = plant3->copy();
    plant3_8->position += vec3(-90.85087585449219, 124.26917266845703, 44.35463333129883);
    plant3_8->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_8->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(plant3_8);
    Node* plant3_9 = plant3->copy();
    plant3_9->position += vec3(-7.395681858062744, 123.90169525146484, 46.899330139160156);
    plant3_9->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_9->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(plant3_9);
    Node* plant3_10 = plant3->copy();
    plant3_10->position += vec3(-17.342391967773438, 123.90169525146484, 54.02304458618164);
    plant3_10->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_10->scale = vec3(1.9351553344726562, 1.9351553344726562, 1.9351553344726562);
    Engine::main->addNode(plant3_10);
    Node* plant3_11 = plant3->copy();
    plant3_11->position += vec3(-13.474224090576172, 99.69430541992188, 56.153987884521484);
    plant3_11->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_11->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(plant3_11);
    Node* plant3_12 = plant3->copy();
    plant3_12->position += vec3(-12.140089988708496, 123.90170288085938, 44.04111862182617);
    plant3_12->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_12->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(plant3_12);
    Node* plant3_13 = plant3->copy();
    plant3_13->position += vec3(-17.379087448120117, 124.26918029785156, 43.80323791503906);
    plant3_13->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant3_13->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(plant3_13);
    Node* plant1_14 = plant1->copy();
    plant1_14->position += vec3(-19.5660343170166, 100.00312042236328, 47.27452850341797);
    plant1_14->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant1_14->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(plant1_14);
    Node* plant1_15 = plant1->copy();
    plant1_15->position += vec3(-41.533355712890625, 99.99726867675781, 60.480411529541016);
    plant1_15->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant1_15->scale = vec3(0.6999999237060547, 0.6999999237060547, 0.6999999237060547);
    Engine::main->addNode(plant1_15);
    Node* plant1_16 = plant1->copy();
    plant1_16->position += vec3(-37.544227600097656, 99.99726867675781, 43.63860321044922);
    plant1_16->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant1_16->scale = vec3(0.6999999237060547, 0.6999999237060547, 0.6999999237060547);
    Engine::main->addNode(plant1_16);
    Node* plant1_17 = plant1->copy();
    plant1_17->position += vec3(-44.62746047973633, 99.99726867675781, 43.14806365966797);
    plant1_17->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant1_17->scale = vec3(0.6999999237060547, 0.6999999237060547, 0.6999999237060547);
    Engine::main->addNode(plant1_17);
    Node* plant1_18 = plant1->copy();
    plant1_18->position += vec3(-63.5434684753418, 99.99726867675781, 42.74816131591797);
    plant1_18->eulerAngles = vec3(0.0, -0.0, 0.0);
    plant1_18->scale = vec3(0.6999999237060547, 0.6999999237060547, 0.6999999237060547);
    Engine::main->addNode(plant1_18);
    PBRShader* rocksmShader = new PBRShader(0.3, 0.7);
    rocksmShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Rock_Surface_01_Albedo.png", 2.0, true));
    rocksmShader->setNormalMap(new Texture("/Resources/Game/Map/T_Rock_Surface_01_Normal.png", 2.0, true));
    Node* rocksm1 = new Node();
    rocksm1->loadModelFile("/Resources/Game/Map/rock01lod0.dae");
    rocksm1->geometries[0]->setShader(rocksmShader);
    rocksm1->geometries[0]->setDoubleSided();
    rocksm1->position.x = MAPX;
    rocksm1->position.z = MAPZ;
    rocksm1->position.y  = MAPY;
    Node* rocksm2 = new Node();
    rocksm2->loadModelFile("/Resources/Game/Map/rock02lod0.dae");
    rocksm2->geometries[0]->setShader(rocksmShader);
    rocksm2->geometries[0]->setDoubleSided();
    rocksm2->position.x = MAPX;
    rocksm2->position.z = MAPZ;
    rocksm2->position.y  = MAPY;
    Node* rocksm3 = new Node();
    rocksm3->loadModelFile("/Resources/Game/Map/rock03lod0.dae");
    rocksm3->geometries[0]->setShader(rocksmShader);
    rocksm3->geometries[0]->setDoubleSided();
    rocksm3->position.x = MAPX;
    rocksm3->position.z = MAPZ;
    rocksm3->position.y  = MAPY;
    Node* rocksm4 = new Node();
    rocksm4->loadModelFile("/Resources/Game/Map/rock04lod0.dae");
    rocksm4->geometries[0]->setShader(rocksmShader);
    rocksm4->geometries[0]->setDoubleSided();
    rocksm4->position.x = MAPX;
    rocksm4->position.z = MAPZ;
    rocksm4->position.y  = MAPY;
    Node* rocksm2_19 = rocksm2->copy();
    rocksm2_19->position += vec3(-77.56976318359375, 100.34490966796875, 42.678688049316406);
    rocksm2_19->eulerAngles = vec3(-6.249443798095954, -21.720054494606615, 0.3638770206915335);
    rocksm2_19->scale = vec3(7.266416625976563, 7.266331787109375, 7.266439819335938);
    Engine::main->addNode(rocksm2_19);
    Node* rocksm2_20 = rocksm2->copy();
    rocksm2_20->position += vec3(-76.54000091552734, 100.64935302734375, 40.29208755493164);
    rocksm2_20->eulerAngles = vec3(84.57418219009008, -21.72005620215391, 0.3638779278260327);
    rocksm2_20->scale = vec3(7.266262817382812, 7.266253051757812, 7.266295776367188);
    Engine::main->addNode(rocksm2_20);
    Node* rocksm1_21 = rocksm1->copy();
    rocksm1_21->position += vec3(-77.52787017822266, 100.96206665039062, 41.30534362792969);
    rocksm1_21->eulerAngles = vec3(38.024837901998225, -3.306514427440448, -104.27096560535695);
    rocksm1_21->scale = vec3(3.0086981201171876, 3.008722839355469, 3.0086932373046875);
    Engine::main->addNode(rocksm1_21);
    Node* rocksm1_22 = rocksm1->copy();
    rocksm1_22->position += vec3(-75.90833282470703, 100.45889282226562, 42.54043197631836);
    rocksm1_22->eulerAngles = vec3(97.92957892329616, -51.61705436920158, 158.23573016211577);
    rocksm1_22->scale = vec3(3.6586849975585936, 3.658741760253906, 3.6586984252929686);
    Engine::main->addNode(rocksm1_22);
    Node* rocksm1_24 = rocksm1->copy();
    rocksm1_24->position += vec3(-73.17428588867188, 99.90917205810547, 34.78422927856445);
    rocksm1_24->eulerAngles = vec3(38.02483107180906, -3.306516348431152, -104.27096560535695);
    rocksm1_24->scale = vec3(3.008697814941406, 3.00872314453125, 3.0086935424804686);
    Engine::main->addNode(rocksm1_24);
    Node* rocksm3_25 = rocksm3->copy();
    rocksm3_25->position += vec3(-37.70036315917969, 100.00311279296875, 25.085912704467773);
    rocksm3_25->eulerAngles = vec3(0.0, 20.217117471522208, 0.0);
    rocksm3_25->scale = vec3(1.9999900817871095, 1.9999879455566407, 1.9999900817871095);
    Engine::main->addNode(rocksm3_25);
    Node* rocksm3_26 = rocksm3->copy();
    rocksm3_26->position += vec3(-38.3915901184082, 100.06198120117188, 24.67803955078125);
    rocksm3_26->eulerAngles = vec3(26.482620751904157, 22.527417005447976, 66.09845901350306);
    rocksm3_26->scale = vec3(1.999954833984375, 1.9999502563476563, 1.9999502563476563);
    Engine::main->addNode(rocksm3_26);
    Node* rocksm1_27 = rocksm1->copy();
    rocksm1_27->position += vec3(-13.84401798248291, 99.79943084716797, 55.581417083740234);
    rocksm1_27->eulerAngles = vec3(0.0, -1.0928302427753803e-06, 0.0);
    rocksm1_27->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(rocksm1_27);
    Node* rocksm1_28 = rocksm1->copy();
    rocksm1_28->position += vec3(-51.898746490478516, 114.99073028564453, 22.919652938842773);
    rocksm1_28->eulerAngles = vec3(-5.485881272349408e-07, 1.0240614598968988e-06, -29.05695320102781);
    rocksm1_28->scale = vec3(0.9999961090087891, 0.9999961090087891, 0.9999958038330078);
    Engine::main->addNode(rocksm1_28);
    Node* rocksm1_29 = rocksm1->copy();
    rocksm1_29->position += vec3(-51.63772201538086, 114.54964447021484, 22.911069869995117);
    rocksm1_29->eulerAngles = vec3(0.0, 49.26401663409176, 13.413532742100303);
    rocksm1_29->scale = vec3(0.9999832153320313, 0.9999870300292969, 0.9999838256835938);
    Engine::main->addNode(rocksm1_29);
    Node* rocksm1_30 = rocksm1->copy();
    rocksm1_30->position += vec3(-45.831016540527344, 118.68267059326172, 22.89613151550293);
    rocksm1_30->eulerAngles = vec3(38.02483448690364, -3.306511012345863, -104.27096560535695);
    rocksm1_30->scale = vec3(0.9999417114257813, 0.9999497222900391, 0.9999401092529296);
    Engine::main->addNode(rocksm1_30);
    Node* rocksm4_31 = rocksm4->copy();
    rocksm4_31->position += vec3(-7.868885517120361, 100.17184448242188, 55.920005798339844);
    rocksm4_31->eulerAngles = vec3(0.0, -0.0, 0.0);
    rocksm4_31->scale = vec3(1.0, 1.0, 1.0);
    Engine::main->addNode(rocksm4_31);
    Node* rocksm4_32 = rocksm4->copy();
    rocksm4_32->position += vec3(-20.372102737426758, 100.4203109741211, 41.56875228881836);
    rocksm4_32->eulerAngles = vec3(0.0, -0.0, 0.0);
    rocksm4_32->scale = vec3(3.0, 3.0, 3.0);
    Engine::main->addNode(rocksm4_32);
    Node* rocksm4_33 = rocksm4->copy();
    rocksm4_33->position += vec3(-20.96310806274414, 100.09677124023438, 42.08872604370117);
    rocksm4_33->eulerAngles = vec3(179.999991348578, 37.168929821631004, 179.999991348578);
    rocksm4_33->scale = vec3(1.9999856567382812, 0.9999897766113282, 0.9999928283691406);
    Engine::main->addNode(rocksm4_33);
    Node* rocksm3_34 = rocksm3->copy();
    rocksm3_34->position += vec3(-9.482209205627441, 123.89946746826172, 44.459720611572266);
    rocksm3_34->eulerAngles = vec3(0.0, -0.0, 0.0);
    rocksm3_34->scale = vec3(1.0, 1.0, 1.0);
    Engine::main->addNode(rocksm3_34);
    Node* rocksm2_35 = rocksm2->copy();
    rocksm2_35->position += vec3(-18.898469924926758, 99.94419860839844, 54.16463088989258);
    rocksm2_35->eulerAngles = vec3(26.314507598315338, -0.0, 0.0);
    rocksm2_35->scale = vec3(2.999988708496094, 2.9999884033203124, 2.9999884033203124);
    Engine::main->addNode(rocksm2_35);
    Node* rocksm2_36 = rocksm2->copy();
    rocksm2_36->position += vec3(-7.0379557609558105, 100.297607421875, 55.82749557495117);
    rocksm2_36->eulerAngles = vec3(26.314507598315338, -0.0, 0.0);
    rocksm2_36->scale = vec3(2.9999880981445313, 2.9999868774414065, 2.9999868774414065);
    Engine::main->addNode(rocksm2_36);
    Node* rocksm3_41 = rocksm3->copy();
    rocksm3_41->position += vec3(-83.2619857788086, 123.89945983886719, 44.580101013183594);
    rocksm3_41->eulerAngles = vec3(0.0, -0.0, 0.0);
    rocksm3_41->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(rocksm3_41);
    Node* rocksm3_42 = rocksm3->copy();
    rocksm3_42->position += vec3(-79.69485473632812, 100.0201416015625, 55.974884033203125);
    rocksm3_42->eulerAngles = vec3(0.0, -0.0, 0.0);
    rocksm3_42->scale = vec3(3.2689199829101563, 3.2689199829101563, 3.2689199829101563);
    Engine::main->addNode(rocksm3_42);
    Node* rocksm3_43 = rocksm3->copy();
    rocksm3_43->position += vec3(-80.77550506591797, 100.58219146728516, 56.31489562988281);
    rocksm3_43->eulerAngles = vec3(0.0, -0.0, 95.78175763689397);
    rocksm3_43->scale = vec3(3.2688641357421875, 3.2688641357421875, 3.26888671875);
    Engine::main->addNode(rocksm3_43);
    Node* rocksm2_44 = rocksm2->copy();
    rocksm2_44->position += vec3(-80.081787109375, 100.0705337524414, 57.133636474609375);
    rocksm2_44->eulerAngles = vec3(26.314507598315338, -0.0, 0.0);
    rocksm2_44->scale = vec3(1.495221405029297, 1.4952207946777343, 1.4952207946777343);
    Engine::main->addNode(rocksm2_44);
    Node* rocksm2_45 = rocksm2->copy();
    rocksm2_45->position += vec3(-82.3855209350586, 100.61290740966797, 56.501556396484375);
    rocksm2_45->eulerAngles = vec3(57.87257532811156, -0.0, 0.0);
    rocksm2_45->scale = vec3(4.387901916503906, 4.388034973144531, 4.388034973144531);
    Engine::main->addNode(rocksm2_45);
    Node* rocksm3_46 = rocksm3->copy();
    rocksm3_46->position += vec3(-75.62017059326172, 100.81684112548828, 62.69874572753906);
    rocksm3_46->eulerAngles = vec3(0.0, 0.0, -20.97568852602758);
    rocksm3_46->scale = vec3(6.851716918945312, 6.851716918945312, 6.85171630859375);
    Engine::main->addNode(rocksm3_46);
    Node* rocksm1_47 = rocksm1->copy();
    rocksm1_47->position += vec3(-77.56390380859375, 100.36811065673828, 61.01026916503906);
    rocksm1_47->eulerAngles = vec3(38.0248208265253, -3.3065178425350332, -104.2709587751678);
    rocksm1_47->scale = vec3(6.166126708984375, 6.166181030273438, 6.166121826171875);
    Engine::main->addNode(rocksm1_47);
    Node* rocksm2_48 = rocksm2->copy();
    rocksm2_48->position += vec3(-78.27678680419922, 99.94185638427734, 59.37837600708008);
    rocksm2_48->eulerAngles = vec3(26.314507598315338, -0.0, 0.0);
    rocksm2_48->scale = vec3(0.985615005493164, 0.9856144714355469, 0.9856144714355469);
    Engine::main->addNode(rocksm2_48);
    Node* rocksm1_49 = rocksm1->copy();
    rocksm1_49->position += vec3(-78.75689697265625, 99.942626953125, 59.433597564697266);
    rocksm1_49->eulerAngles = vec3(38.0248208265253, -3.3065195500823257, -104.2709587751678);
    rocksm1_49->scale = vec3(1.1647046661376954, 1.1647149658203124, 1.1647038269042969);
    Engine::main->addNode(rocksm1_49);
    Node* rocksm1_50 = rocksm1->copy();
    rocksm1_50->position += vec3(-68.54923248291016, 100.15362548828125, 66.77737426757812);
    rocksm1_50->eulerAngles = vec3(1.6808466956554327, 38.11522179528501, 164.23252697036025);
    rocksm1_50->scale = vec3(1.1647093200683594, 1.1647138977050782, 1.1647029113769531);
    Engine::main->addNode(rocksm1_50);
    Node* rocksm1_51 = rocksm1->copy();
    rocksm1_51->position += vec3(-68.3082275390625, 100.07266998291016, 66.43902587890625);
    rocksm1_51->eulerAngles = vec3(1.3527289969613687, -12.161384043639483, 162.9098335168306);
    rocksm1_51->scale = vec3(0.8018861389160157, 0.8018857574462891, 0.801883544921875);
    Engine::main->addNode(rocksm1_51);
    Node* rocksm3_52 = rocksm3->copy();
    rocksm3_52->position += vec3(-66.67627716064453, 99.55561065673828, 75.5516586303711);
    rocksm3_52->eulerAngles = vec3(0.0, 25.24322999303927, 0.0);
    rocksm3_52->scale = vec3(1.8490330505371093, 1.8490330505371093, 1.8490330505371093);
    Engine::main->addNode(rocksm3_52);
    Node* rocksm3_53 = rocksm3->copy();
    rocksm3_53->position += vec3(-66.60636138916016, 99.62882995605469, 74.80904388427734);
    rocksm3_53->eulerAngles = vec3(18.927179897704647, -15.18738153465045, -23.66225635114018);
    rocksm3_53->scale = vec3(1.4108084106445313, 1.4108111572265625, 1.41080810546875);
    Engine::main->addNode(rocksm3_53);
    Node* rocksm1_54 = rocksm1->copy();
    rocksm1_54->position += vec3(-64.77035522460938, 99.50146484375, 76.19060516357422);
    rocksm1_54->eulerAngles = vec3(38.0248208265253, -3.306521257629618, -104.2709587751678);
    rocksm1_54->scale = vec3(6.166128540039063, 6.166182250976562, 6.1661224365234375);
    Engine::main->addNode(rocksm1_54);
    Node* rocksm1_55 = rocksm1->copy();
    rocksm1_55->position += vec3(-75.57953643798828, 99.9648666381836, 66.8282699584961);
    rocksm1_55->eulerAngles = vec3(38.0248208265253, -3.3065131467799787, -104.27096560535695);
    rocksm1_55->scale = vec3(3.4372183227539064, 3.4372491455078125, 3.437215576171875);
    Engine::main->addNode(rocksm1_55);
    Node* rocksm3_56 = rocksm3->copy();
    rocksm3_56->position += vec3(-45.826820373535156, 99.66645050048828, 76.59263610839844);
    rocksm3_56->eulerAngles = vec3(-7.22026810370135, 0.0, 0.0);
    rocksm3_56->scale = vec3(4.808630676269531, 4.808633422851562, 4.808633422851562);
    Engine::main->addNode(rocksm3_56);
    Node* rocksm2_57 = rocksm2->copy();
    rocksm2_57->position += vec3(-42.31096267700195, 99.58843231201172, 78.0598373413086);
    rocksm2_57->eulerAngles = vec3(57.872568497922394, -0.0, 0.0);
    rocksm2_57->scale = vec3(4.387901916503906, 4.388034973144531, 4.388034973144531);
    Engine::main->addNode(rocksm2_57);
    Node* rocksm2_58 = rocksm2->copy();
    rocksm2_58->position += vec3(-43.876312255859375, 100.44792175292969, 76.84300994873047);
    rocksm2_58->eulerAngles = vec3(9.926236227377721, -0.0, 0.0);
    rocksm2_58->scale = vec3(5.407929077148437, 5.408075561523438, 5.408075561523438);
    Engine::main->addNode(rocksm2_58);
    Node* rocksm2_59 = rocksm2->copy();
    rocksm2_59->position += vec3(-45.11967468261719, 100.11156463623047, 75.31657409667969);
    rocksm2_59->eulerAngles = vec3(9.926236227377721, -0.0, 0.0);
    rocksm2_59->scale = vec3(1.147039566040039, 1.1470705413818358, 1.1470705413818358);
    Engine::main->addNode(rocksm2_59);
    Node* rocksm2_60 = rocksm2->copy();
    rocksm2_60->position += vec3(-45.65596008300781, 100.16958618164062, 74.98491668701172);
    rocksm2_60->eulerAngles = vec3(15.422609834571105, 49.59396258232757, 11.863463144874576);
    rocksm2_60->scale = vec3(1.147032699584961, 1.1470622253417968, 1.14706298828125);
    Engine::main->addNode(rocksm2_60);
    Node* rocksm1_61 = rocksm1->copy();
    rocksm1_61->position += vec3(-44.84373474121094, 100.14331817626953, 75.01002502441406);
    rocksm1_61->eulerAngles = vec3(38.02482765671447, -3.306522965176911, -104.27097243554613);
    rocksm1_61->scale = vec3(0.8049809265136719, 0.8049881744384766, 0.804980239868164);
    Engine::main->addNode(rocksm1_61);
    Node* rocksm2_64 = rocksm2->copy();
    rocksm2_64->position += vec3(-35.5877799987793, 100.21414184570312, 72.6595687866211);
    rocksm2_64->eulerAngles = vec3(9.926235373604076, -0.0, 0.0);
    rocksm2_64->scale = vec3(0.9942637634277344, 0.9942906188964844, 0.9942906188964844);
    Engine::main->addNode(rocksm2_64);
    Node* rocksm2_65 = rocksm2->copy();
    rocksm2_65->position += vec3(-35.41065216064453, 100.26628875732422, 72.36226654052734);
    rocksm2_65->eulerAngles = vec3(-82.55391468643785, 0.0, 0.0);
    rocksm2_65->scale = vec3(0.9942538452148437, 0.9942722320556641, 0.9942722320556641);
    Engine::main->addNode(rocksm2_65);
    PBRShader* rockPileShader = new PBRShader(0.3, 0.7);
    rockPileShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Rock_Pile_01_Albedo.png", 2.0, true));
    rockPileShader->setNormalMap(new Texture("/Resources/Game/Map/T_Rock_Pile_01_Normal.png", 2.0, true));
    Node* rockpile1 = new Node();
    rockpile1->loadModelFile("/Resources/Game/Map/rockpile01lod0.dae");
    rockpile1->geometries[0]->setShader(rockPileShader);
    rockpile1->geometries[0]->setDoubleSided();
    rockpile1->position.x = MAPX;
    rockpile1->position.z = MAPZ;
    rockpile1->position.y  = MAPY;
    Node* rockpile1_23 = rockpile1->copy();
    rockpile1_23->position += vec3(-75.5518569946289, 100.0305404663086, 40.41579818725586);
    rockpile1_23->eulerAngles = vec3(0.0, 70.24674025496445, 0.0);
    rockpile1_23->scale = vec3(1.0, 0.49999515533447264, 0.9999772644042969);
    Engine::main->addNode(rockpile1_23);
    Node* rockpile1_37 = rockpile1->copy();
    rockpile1_37->position += vec3(-44.32003402709961, 100.03057098388672, 23.46868896484375);
    rockpile1_37->eulerAngles = vec3(0.0, -36.71445244935294, 0.0);
    rockpile1_37->scale = vec3(2.4999845886230467, 1.9999853515625, 1.9999777221679687);
    Engine::main->addNode(rockpile1_37);
    Node* rockpile1_38 = rockpile1->copy();
    rockpile1_38->position += vec3(-19.023115158081055, 100.00312042236328, 43.54102325439453);
    rockpile1_38->eulerAngles = vec3(0.0, -0.0, 0.0);
    rockpile1_38->scale = vec3(1.0, 1.0, 1.0);
    Engine::main->addNode(rockpile1_38);
    Node* rockpile1_39 = rockpile1->copy();
    rockpile1_39->position += vec3(-35.284297943115234, 100.03053283691406, 27.994184494018555);
    rockpile1_39->eulerAngles = vec3(179.999991348578, 39.663454925397645, 179.999991348578);
    rockpile1_39->scale = vec3(2.4999351501464844, 1.9999607849121093, 1.999937744140625);
    Engine::main->addNode(rockpile1_39);
    Node* rockpile1_40 = rockpile1->copy();
    rockpile1_40->position += vec3(-41.51778030395508, 100.03055572509766, 28.32457160949707);
    rockpile1_40->eulerAngles = vec3(0.0, -36.71444903425836, 0.0);
    rockpile1_40->scale = vec3(1.4999996948242187, 0.49999992370605467, 0.9999997711181641);
    Engine::main->addNode(rockpile1_40);
    Node* rockpile1_62 = rockpile1->copy();
    rockpile1_62->position += vec3(-43.38853454589844, 100.0566635131836, 74.31429290771484);
    rockpile1_62->eulerAngles = vec3(0.0, -36.71445244935294, 0.0);
    rockpile1_62->scale = vec3(0.9999999237060547, 0.49999996185302736, 0.9999999237060547);
    Engine::main->addNode(rockpile1_62);
    Node* rockpile1_63 = rockpile1->copy();
    rockpile1_63->position += vec3(-35.64524459838867, 100.05664825439453, 72.06964111328125);
    rockpile1_63->eulerAngles = vec3(0.0, 72.16633077025068, 0.0);
    rockpile1_63->scale = vec3(0.4999984359741211, 0.49999893188476563, 0.4999984359741211);
    Engine::main->addNode(rockpile1_63);
    PBRShader* fernShader = new PBRShader(0.2, 0.8);
    fernShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Fern_01_Albedo.png", 2.0, true));
    fernShader->setNormalMap(new Texture("/Resources/Game/Map/T_Fern_01_Normal.png", 2.0, true));
    Node* fern5 = new Node();
    fern5->loadModelFile("/Resources/Game/Map/Fern05lod0.dae");
    fern5->geometries[0]->setShader(fernShader);
    fern5->geometries[0]->setDoubleSided();
    fern5->position.x = MAPX;
    fern5->position.z = MAPZ;
    fern5->position.y  = MAPY;
    Node* fern8 = new Node();
    fern8->loadModelFile("/Resources/Game/Map/Fern08lod0.dae");
    fern8->geometries[0]->setShader(fernShader);
    fern8->geometries[0]->setDoubleSided();
    fern8->position.x = MAPX;
    fern8->position.z = MAPZ;
    fern8->position.y  = MAPY;
    Node* fern9 = new Node();
    fern9->loadModelFile("/Resources/Game/Map/Fern09lod0.dae");
    fern9->geometries[0]->setShader(fernShader);
    fern9->geometries[0]->setDoubleSided();
    fern9->position.x = MAPX;
    fern9->position.z = MAPZ;
    fern9->position.y  = MAPY;
    Node* fern5_66 = fern5->copy();
    fern5_66->position += vec3(-65.11994934082031, 100.00309753417969, 52.39829635620117);
    fern5_66->eulerAngles = vec3(179.999991348578, 7.24447514789352, 179.999991348578);
    fern5_66->scale = vec3(0.9999999237060547, 0.9999998474121093, 0.9999999237060547);
    Engine::main->addNode(fern5_66);
    Node* fern5_67 = fern5->copy();
    fern5_67->position += vec3(-64.06936645507812, 100.00309753417969, 40.02585983276367);
    fern5_67->eulerAngles = vec3(179.999991348578, 7.24447514789352, 179.999991348578);
    fern5_67->scale = vec3(0.9999999237060547, 0.9999998474121093, 0.9999999237060547);
    Engine::main->addNode(fern5_67);
    Node* fern5_68 = fern5->copy();
    fern5_68->position += vec3(-56.0262451171875, 100.00309753417969, 33.93038558959961);
    fern5_68->eulerAngles = vec3(179.999991348578, 7.24447514789352, 179.999991348578);
    fern5_68->scale = vec3(0.9999999237060547, 1.4999998474121095, 0.9999999237060547);
    Engine::main->addNode(fern5_68);
    Node* fern5_69 = fern5->copy();
    fern5_69->position += vec3(-38.990814208984375, 99.98937225341797, 45.542415618896484);
    fern5_69->eulerAngles = vec3(179.999991348578, 7.244470879025289, 179.999991348578);
    fern5_69->scale = vec3(0.9999999237060547, 1.4999998474121095, 0.9999999237060547);
    Engine::main->addNode(fern5_69);
    Node* fern8_70 = fern8->copy();
    fern8_70->position += vec3(-25.47951316833496, 99.76789855957031, 53.25028610229492);
    fern8_70->eulerAngles = vec3(-144.74781409863309, 50.47134136235073, -145.91270286157877);
    fern8_70->scale = vec3(0.9999515533447265, 1.4999337768554688, 0.9999526214599609);
    Engine::main->addNode(fern8_70);
    Node* fern9_71 = fern9->copy();
    fern9_71->position += vec3(-24.26594352722168, 100.00309753417969, 36.40979766845703);
    fern9_71->eulerAngles = vec3(0.0, 41.540271381006676, 0.0);
    fern9_71->scale = vec3(0.9999922180175781, 0.9999912261962891, 0.9999922180175781);
    Engine::main->addNode(fern9_71);
    Node* fern8_72 = fern8->copy();
    fern8_72->position += vec3(-82.17472839355469, 123.85626983642578, 43.794742584228516);
    fern8_72->eulerAngles = vec3(0.0, 16.681733009948154, 0.0);
    fern8_72->scale = vec3(0.9999980163574219, 0.9999948120117188, 0.9999980163574219);
    Engine::main->addNode(fern8_72);
    Node* fern8_73 = fern8->copy();
    fern8_73->position += vec3(-87.90583038330078, 123.98052215576172, 43.82664108276367);
    fern8_73->eulerAngles = vec3(0.0, 28.916476700368154, 0.0);
    fern8_73->scale = vec3(0.9999955749511719, 0.9999871063232422, 0.9999955749511719);
    Engine::main->addNode(fern8_73);
    Node* fern8_74 = fern8->copy();
    fern8_74->position += vec3(-86.30552673339844, 123.86573028564453, 54.4736328125);
    fern8_74->eulerAngles = vec3(-144.74781409863309, 50.47133794725614, -145.91270286157877);
    fern8_74->scale = vec3(0.9999514770507812, 1.4999337768554688, 0.9999525451660156);
    Engine::main->addNode(fern8_74);
    Node* fern8_75 = fern8->copy();
    fern8_75->position += vec3(-8.482683181762695, 123.85628509521484, 46.6224250793457);
    fern8_75->eulerAngles = vec3(0.0, -6.849894692655061, 0.0);
    fern8_75->scale = vec3(0.9999987030029297, 0.9999978637695313, 0.9999987030029297);
    Engine::main->addNode(fern8_75);
    Node* fern8_76 = fern8->copy();
    fern8_76->position += vec3(-16.194082260131836, 123.98052978515625, 43.935791015625);
    fern8_76->eulerAngles = vec3(0.0, 28.916469870178986, 0.0);
    fern8_76->scale = vec3(0.9999957275390625, 0.9999871826171876, 0.9999957275390625);
    Engine::main->addNode(fern8_76);
    Node* fern8_77 = fern8->copy();
    fern8_77->position += vec3(-11.031933784484863, 124.00096130371094, 54.33218002319336);
    fern8_77->eulerAngles = vec3(-144.74781409863309, 50.47133794725614, -145.91270286157877);
    fern8_77->scale = vec3(0.999951171875, 1.4999337768554688, 0.999952163696289);
    Engine::main->addNode(fern8_77);
    Node* fern8_78 = fern8->copy();
    fern8_78->position += vec3(-11.617449760437012, 127.277099609375, 55.502235412597656);
    fern8_78->eulerAngles = vec3(0.0, -52.28974262508322, 0.0);
    fern8_78->scale = vec3(0.9999998474121093, 0.9999999237060547, 0.7999998474121094);
    Engine::main->addNode(fern8_78);
    Node* fern8_79 = fern8->copy();
    fern8_79->position += vec3(-18.746118545532227, 117.63562774658203, 54.058956146240234);
    fern8_79->eulerAngles = vec3(1.8258480493246608e-05, -55.86639508962249, 88.40734582400376);
    fern8_79->scale = vec3(1.9998854064941407, 1.9998966979980468, 1.99994140625);
    Engine::main->addNode(fern8_79);
    Node* fern8_80 = fern8->copy();
    fern8_80->position += vec3(-18.89352798461914, 112.33396911621094, 44.039894104003906);
    fern8_80->eulerAngles = vec3(5.963598448172483e-06, 30.797206854371606, 88.40738680513878);
    fern8_80->scale = vec3(1.999837646484375, 1.9998529052734375, 1.9999134826660157);
    Engine::main->addNode(fern8_80);
    Node* fern5_81 = fern5->copy();
    fern5_81->position += vec3(-5.337573051452637, 105.82227325439453, 55.59061050415039);
    fern5_81->eulerAngles = vec3(20.879533122892138, 3.4150949921173744e-06, 66.71522509555521);
    fern5_81->scale = vec3(1.9999041748046875, 1.9999046325683594, 1.999943389892578);
    Engine::main->addNode(fern5_81);
    Node* fern9_82 = fern9->copy();
    fern9_82->position += vec3(-38.1777229309082, 100.09014892578125, 25.101539611816406);
    fern9_82->eulerAngles = vec3(0.0, 71.89996705299853, 0.0);
    fern9_82->scale = vec3(0.9999859619140625, 0.9999857330322266, 0.9999859619140625);
    Engine::main->addNode(fern9_82);
    Node* fern8_83 = fern8->copy();
    fern8_83->position += vec3(-30.06181526184082, 100.00310516357422, 29.864980697631836);
    fern8_83->eulerAngles = vec3(4.164655957675757e-06, 16.55002305708821, 1.2989961381160909e-06);
    fern8_83->scale = vec3(0.9999976348876953, 0.99999755859375, 0.9999976348876953);
    Engine::main->addNode(fern8_83);
    Node* fern8_84 = fern8->copy();
    fern8_84->position += vec3(-34.34769821166992, 100.93965148925781, 26.96869468688965);
    fern8_84->eulerAngles = vec3(4.053693376615357e-06, -10.741599451058104, -8.292625107656144e-07);
    fern8_84->scale = vec3(0.9999919128417969, 0.9999934387207031, 0.9999919128417969);
    Engine::main->addNode(fern8_84);
    Node* fern9_85 = fern9->copy();
    fern9_85->position += vec3(-71.11099243164062, 100.00310516357422, 33.38814163208008);
    fern9_85->eulerAngles = vec3(0.0, 71.89996705299853, 0.0);
    fern9_85->scale = vec3(0.9999859619140625, 0.9999857330322266, 0.9999859619140625);
    Engine::main->addNode(fern9_85);
    Node* fern9_86 = fern9->copy();
    fern9_86->position += vec3(-68.9703369140625, 101.14081573486328, 66.14180755615234);
    fern9_86->eulerAngles = vec3(0.0, 70.97032366544643, 0.0);
    fern9_86->scale = vec3(0.9999851989746094, 0.9999829864501953, 0.9999851989746094);
    Engine::main->addNode(fern9_86);
    PBRShader* ivyAtlasShader = new PBRShader(0.1, 0.9);
    ivyAtlasShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Ivy_Atlas_01_Albedo.png", 2.0, true));
    ivyAtlasShader->setNormalMap(new Texture("/Resources/Game/Map/T_Ivy_Atlas_01_Normal.png", 2.0, true));
    PBRShader* ivyTileableShader = new PBRShader(0.1, 0.9);
    ivyTileableShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Ivy_Tileable_01_Albedo.png", 2.0, true));
    ivyTileableShader->setNormalMap(new Texture("/Resources/Game/Map/T_Ivy_Tileable_01_Normal.png", 2.0, true));
    Node* ivy1 = new Node();
    ivy1->loadModelFile("/Resources/Game/Map/ivy01lod0.dae");
    ivy1->geometries[1]->setShader(ivyAtlasShader);
    ivy1->geometries[1]->setDoubleSided();
    ivy1->geometries[0]->setShader(ivyTileableShader);
    ivy1->geometries[0]->setDoubleSided();
    ivy1->position.x = MAPX;
    ivy1->position.z = MAPZ;
    ivy1->position.y  = MAPY;
    Node* ivy3 = new Node();
    ivy3->loadModelFile("/Resources/Game/Map/ivy03lod0.dae");
    ivy3->geometries[1]->setShader(ivyTileableShader);
    ivy3->geometries[1]->setDoubleSided();
    ivy3->geometries[0]->setShader(ivyAtlasShader);
    ivy3->geometries[0]->setDoubleSided();
    ivy3->position.x = MAPX;
    ivy3->position.z = MAPZ;
    ivy3->position.y  = MAPY;
    Node* ivy4 = new Node();
    ivy4->loadModelFile("/Resources/Game/Map/ivy04lod0.dae");
    ivy4->geometries[1]->setShader(ivyAtlasShader);
    ivy4->geometries[1]->setDoubleSided();
    ivy4->geometries[0]->setShader(ivyTileableShader);
    ivy4->geometries[0]->setDoubleSided();
    ivy4->position.x = MAPX;
    ivy4->position.z = MAPZ;
    ivy4->position.y  = MAPY;
    Node* ivy5 = new Node();
    ivy5->loadModelFile("/Resources/Game/Map/ivy05lod0.dae");
    ivy5->geometries[1]->setShader(ivyAtlasShader);
    ivy5->geometries[1]->setDoubleSided();
    ivy5->geometries[0]->setShader(ivyTileableShader);
    ivy5->geometries[0]->setDoubleSided();
    ivy5->position.x = MAPX;
    ivy5->position.z = MAPZ;
    ivy5->position.y  = MAPY;
    Node* ivy7 = new Node();
    ivy7->loadModelFile("/Resources/Game/Map/ivy07lod0.dae");
    ivy7->geometries[1]->setShader(ivyAtlasShader);
    ivy7->geometries[1]->setDoubleSided();
    ivy7->geometries[0]->setShader(ivyTileableShader);
    ivy7->geometries[0]->setDoubleSided();
    ivy7->position.x = MAPX;
    ivy7->position.z = MAPZ;
    ivy7->position.y  = MAPY;
    Node* ivy5_88 = ivy5->copy();
    ivy5_88->position += vec3(-79.29117584228516, 101.04862213134766, 52.570308685302734);
    ivy5_88->eulerAngles = vec3(179.999991348578, -5.008956130975331e-06, 179.999991348578);
    ivy5_88->scale = vec3(0.8253911590576172, 0.8253926849365234, 0.8253799438476562);
    Engine::main->addNode(ivy5_88);
    Node* ivy7_89 = ivy7->copy();
    ivy7_89->position += vec3(-79.61756896972656, 112.11808776855469, 52.20686721801758);
    ivy7_89->eulerAngles = vec3(179.999991348578, -5.008955723864332e-06, 179.999991348578);
    ivy7_89->scale = vec3(0.9999516296386719, 0.9999855041503907, 0.9999516296386719);
    Engine::main->addNode(ivy7_89);
    Node* ivy4_90 = ivy4->copy();
    ivy4_90->position += vec3(-79.37498474121094, 111.22118377685547, 49.53144454956055);
    ivy4_90->eulerAngles = vec3(-9.75279219156093e-13, -90.00000250447816, 0.0);
    ivy4_90->scale = vec3(0.9999996948242188, 0.9999999237060547, 0.9999996948242188);
    Engine::main->addNode(ivy4_90);
    Node* ivy4_91 = ivy4->copy();
    ivy4_91->position += vec3(-79.37498474121094, 110.68834686279297, 52.268470764160156);
    ivy4_91->eulerAngles = vec3(-9.752791220932669e-13, -90.00000250447816, 0.0);
    ivy4_91->scale = vec3(0.9999995422363281, 0.9999999237060547, 0.9999995422363281);
    Engine::main->addNode(ivy4_91);
    Node* ivy4_92 = ivy4->copy();
    ivy4_92->position += vec3(-79.3749771118164, 110.64950561523438, 51.643978118896484);
    ivy4_92->eulerAngles = vec3(89.99992054220813, 66.57366942500668, 89.99993420258646);
    ivy4_92->scale = vec3(0.9999934387207031, 0.9999971771240235, 0.9999938201904297);
    Engine::main->addNode(ivy4_92);
    Node* ivy4_93 = ivy4->copy();
    ivy4_93->position += vec3(-79.37496948242188, 109.9786148071289, 50.99808120727539);
    ivy4_93->eulerAngles = vec3(-89.99987273088394, 85.48186651946058, -89.99987273088394);
    ivy4_93->scale = vec3(0.9999937438964843, 0.9999947357177734, 0.9999979400634765);
    Engine::main->addNode(ivy4_93);
    Node* ivy4_94 = ivy4->copy();
    ivy4_94->position += vec3(-79.37496185302734, 109.99065399169922, 53.20085525512695);
    ivy4_94->eulerAngles = vec3(90.00002299504567, 77.30708630943913, 90.00002299504567);
    ivy4_94->scale = vec3(0.9999955749511719, 0.9999883270263672, 1.000003662109375);
    Engine::main->addNode(ivy4_94);
    Node* ivy4_95 = ivy4->copy();
    ivy4_95->position += vec3(-79.37495422363281, 109.16407012939453, 53.34881591796875);
    ivy4_95->eulerAngles = vec3(1.4393987614435415, -90.00000250447816, 0.0);
    ivy4_95->scale = vec3(0.9999887084960938, 0.9999848937988282, 0.9999958038330078);
    Engine::main->addNode(ivy4_95);
    Node* ivy7_96 = ivy7->copy();
    ivy7_96->position += vec3(-79.6175765991211, 124.12682342529297, 46.39894104003906);
    ivy7_96->eulerAngles = vec3(179.999991348578, -5.008955723864332e-06, 179.999991348578);
    ivy7_96->scale = vec3(0.9999517059326172, 0.9999855804443359, 0.9999517059326172);
    Engine::main->addNode(ivy7_96);
    Node* ivy3_97 = ivy3->copy();
    ivy3_97->position += vec3(-79.72660064697266, 123.70853424072266, 55.90580368041992);
    ivy3_97->eulerAngles = vec3(8.671168491956755e-08, 0.14541040520048734, -89.99988639126228);
    ivy3_97->scale = vec3(1.4999984741210937, 1.9999978637695313, 1.2998922729492188);
    Engine::main->addNode(ivy3_97);
    Node* ivy4_98 = ivy4->copy();
    ivy4_98->position += vec3(-83.89335632324219, 128.86044311523438, 43.681488037109375);
    ivy4_98->eulerAngles = vec3(0.0, 90.00000250447816, 0.0);
    ivy4_98->scale = vec3(0.9999984741210938, 0.9999998474121093, 0.9999984741210938);
    Engine::main->addNode(ivy4_98);
    Node* ivy4_99 = ivy4->copy();
    ivy4_99->position += vec3(-79.56023406982422, 124.0224609375, 51.303104400634766);
    ivy4_99->eulerAngles = vec3(-90.00002982523485, 1.1474905635823596, -1.4944037181912204e-06);
    ivy4_99->scale = vec3(1.3999996948242188, 1.3999996948242188, 1.399998321533203);
    Engine::main->addNode(ivy4_99);
    Node* ivy7_100 = ivy7->copy();
    ivy7_100->position += vec3(-87.56631469726562, 123.96558380126953, 55.5313835144043);
    ivy7_100->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    ivy7_100->scale = vec3(0.9999516296386719, 0.9999855804443359, 0.9999516296386719);
    Engine::main->addNode(ivy7_100);
    Node* ivy5_101 = ivy5->copy();
    ivy5_101->position += vec3(-67.56355285644531, 121.14012145996094, 28.94426918029785);
    ivy5_101->eulerAngles = vec3(175.855, 121.168, 1.766);
    ivy5_101->scale = vec3(1.0000023651123047, 1.0000018310546874, 0.9999864196777344);
    Engine::main->addNode(ivy5_101);
    Node* ivy4_102 = ivy4->copy();
    ivy4_102->position += vec3(-66.17664337158203, 119.48948669433594, 28.184785842895508);
    ivy4_102->eulerAngles = vec3(10.575289467410169, 32.44407133119381, 17.065598179039334);
    ivy4_102->scale = vec3(0.9999894714355468, 0.9999943542480468, 0.999992904663086);
    Engine::main->addNode(ivy4_102);
    Node* ivy4_103 = ivy4->copy();
    ivy4_103->position += vec3(-69.4089126586914, 113.94983673095703, 30.220815658569336);
    ivy4_103->eulerAngles = vec3(-6.404154412985912, 33.40596687200671, -13.64545779178361);
    ivy4_103->scale = vec3(0.9999864959716797, 0.9999892425537109, 0.9999882507324219);
    Engine::main->addNode(ivy4_103);
    Node* ivy4_104 = ivy4->copy();
    ivy4_104->position += vec3(-69.08358764648438, 113.28875732421875, 29.985509872436523);
    ivy4_104->eulerAngles = vec3(7.676014183617743, 33.16672583594867, 11.717137440964454);
    ivy4_104->scale = vec3(0.9999813842773437, 0.9999842071533203, 0.9999819946289062);
    Engine::main->addNode(ivy4_104);
    Node* ivy4_105 = ivy4->copy();
    ivy4_105->position += vec3(-68.86567687988281, 114.33499145507812, 29.865022659301758);
    ivy4_105->eulerAngles = vec3(28.71855147859953, 18.92553894475655, 57.25330256663401);
    ivy4_105->scale = vec3(0.9999734497070313, 0.9999800109863282, 0.9999772644042969);
    Engine::main->addNode(ivy4_105);
    Node* ivy4_106 = ivy4->copy();
    ivy4_106->position += vec3(-74.21525573730469, 112.7181625366211, 36.291263580322266);
    ivy4_106->eulerAngles = vec3(-12.880810430237865, 54.2116451594035, -23.8966035566579);
    ivy4_106->scale = vec3(1.9999980163574218, 1.999996337890625, 1.9999809265136719);
    Engine::main->addNode(ivy4_106);
    Node* ivy4_107 = ivy4->copy();
    ivy4_107->position += vec3(-73.61835479736328, 110.91771697998047, 35.47039031982422);
    ivy4_107->eulerAngles = vec3(15.495450386974705, 51.5243038153674, 21.02906133174935);
    ivy4_107->scale = vec3(1.999954071044922, 1.9999787902832031, 1.9999578857421876);
    Engine::main->addNode(ivy4_107);
    Node* ivy4_108 = ivy4->copy();
    ivy4_108->position += vec3(-73.2579574584961, 111.5736312866211, 34.966148376464844);
    ivy4_108->eulerAngles = vec3(39.051213843670624, 39.460936401412184, 53.45299214262809);
    ivy4_108->scale = vec3(1.0, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(ivy4_108);
    Node* ivy3_109 = ivy3->copy();
    ivy3_109->position += vec3(-18.731203079223633, 123.95829010009766, 42.95719909667969);
    ivy3_109->eulerAngles = vec3(0.0, 90.00000250447816, 0.0);
    ivy3_109->scale = vec3(1.2999992370605469, 1.2999998474121093, 1.2999992370605469);
    Engine::main->addNode(ivy3_109);
    Node* ivy3_110 = ivy3->copy();
    ivy3_110->position += vec3(-13.334854125976562, 115.81239318847656, 55.619903564453125);
    ivy3_110->eulerAngles = vec3(6.670128080084676e-09, 0.14541059196347245, -89.999995674289);
    ivy3_110->scale = vec3(1.2998928833007812, 1.2999378967285156, 1.2998922729492188);
    Engine::main->addNode(ivy3_110);
    Node* ivy3_111 = ivy3->copy();
    ivy3_111->position += vec3(-6.0654296875, 123.71343231201172, 55.785438537597656);
    ivy3_111->eulerAngles = vec3(3.335064437611674e-08, 0.14541049858197988, -89.99995469315398);
    ivy3_111->scale = vec3(1.4999993896484376, 1.9999992370605468, 1.2998922729492188);
    Engine::main->addNode(ivy3_111);
    Node* ivy4_112 = ivy4->copy();
    ivy4_112->position += vec3(-11.772525787353516, 128.86044311523438, 43.56110763549805);
    ivy4_112->eulerAngles = vec3(0.0, 90.00000250447816, 0.0);
    ivy4_112->scale = vec3(0.9999990844726563, 0.9999999237060547, 0.9999990844726563);
    Engine::main->addNode(ivy4_112);
    Node* ivy4_113 = ivy4->copy();
    ivy4_113->position += vec3(-6.971695423126221, 124.02246856689453, 49.58026123046875);
    ivy4_113->eulerAngles = vec3(-90.00002982523485, 1.1474912039125944, -1.3876605373045617e-06);
    ivy4_113->scale = vec3(1.3999998474121094, 1.3999998474121094, 1.399999237060547);
    Engine::main->addNode(ivy4_113);
    Node* ivy4_114 = ivy4->copy();
    ivy4_114->position += vec3(-17.001455307006836, 107.73348236083984, 55.613040924072266);
    ivy4_114->eulerAngles = vec3(0.0, -0.0, -174.9996508383467);
    ivy4_114->scale = vec3(1.4999485778808594, 1.999944305419922, 1.4999603271484374);
    Engine::main->addNode(ivy4_114);
    Node* ivy5_115 = ivy5->copy();
    ivy5_115->position += vec3(-18.838159561157227, 118.68336486816406, 52.8438606262207);
    ivy5_115->eulerAngles = vec3(3.0568443328500363, -0.0, 0.0);
    ivy5_115->scale = vec3(0.9999769592285156, 0.9999753570556641, 0.9999753570556641);
    Engine::main->addNode(ivy5_115);
    Node* ivy7_116 = ivy7->copy();
    ivy7_116->position += vec3(-30.78074836730957, 111.96758270263672, 28.348560333251953);
    ivy7_116->eulerAngles = vec3(0.0, 61.34920308735058, 0.0);
    ivy7_116->scale = vec3(0.9999604797363282, 0.9999726867675781, 0.9999604797363282);
    Engine::main->addNode(ivy7_116);
    Node* ivy7_117 = ivy7->copy();
    ivy7_117->position += vec3(-18.277198791503906, 111.88285064697266, 49.1378288269043);
    ivy7_117->eulerAngles = vec3(0.0, -0.0, 0.0);
    ivy7_117->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(ivy7_117);
    Node* ivy7_118 = ivy7->copy();
    ivy7_118->position += vec3(-13.880724906921387, 123.96559143066406, 55.54964828491211);
    ivy7_118->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    ivy7_118->scale = vec3(0.9999517822265624, 0.9999856567382812, 0.9999517822265624);
    Engine::main->addNode(ivy7_118);
    Node* ivy1_119 = ivy1->copy();
    ivy1_119->position += vec3(-25.523183822631836, 112.03187561035156, 33.95985794067383);
    ivy1_119->eulerAngles = vec3(0.0, 34.323537900200805, 0.0);
    ivy1_119->scale = vec3(0.9999864959716797, 0.9999863433837891, 0.9999864959716797);
    Engine::main->addNode(ivy1_119);
    Node* ivy1_120 = ivy1->copy();
    ivy1_120->position += vec3(-38.82855987548828, 117.23155212402344, 24.035188674926758);
    ivy1_120->eulerAngles = vec3(-152.16300897105742, 58.671502555327955, 3.2840976645629987e-06);
    ivy1_120->scale = vec3(0.9999720001220703, 0.9999440765380859, 0.9999421691894531);
    Engine::main->addNode(ivy1_120);
    Node* ivy5_121 = ivy5->copy();
    ivy5_121->position += vec3(-19.579, 108.75482177734375, 42.255);
    ivy5_121->eulerAngles = vec3(-88.60811923465629, 35.14794173302134, -0.05031372474209276);
    ivy5_121->scale = vec3(0.9999610137939453, 0.9999594879150391, 0.9999606323242187);
    Engine::main->addNode(ivy5_121);
    Node* ivy3_122 = ivy3->copy();
    ivy3_122->position += vec3(-41.34332275390625, 112.246826171875, 22.905677795410156);
    ivy3_122->eulerAngles = vec3(1.3340256160169352e-08, 0.14541048524176667, -89.99996835353231);
    ivy3_122->scale = vec3(1.4999990844726563, 1.9999990844726563, 1.2998922729492188);
    Engine::main->addNode(ivy3_122);
    Node* ivy4_123 = ivy4->copy();
    ivy4_123->position += vec3(-50.172523498535156, 111.99285125732422, 22.900985717773438);
    ivy4_123->eulerAngles = vec3(0.0, -0.0, 90.68429183666505);
    ivy4_123->scale = vec3(1.4999395751953124, 1.9999432373046875, 1.4999507141113282);
    Engine::main->addNode(ivy4_123);
    Node* ivy4_124 = ivy4->copy();
    ivy4_124->position += vec3(-48.57421112060547, 111.25130462646484, 22.900978088378906);
    ivy4_124->eulerAngles = vec3(0.0, 0.0, -2.122764097101783);
    ivy4_124->scale = vec3(1.9999824523925782, 1.9999221801757812, 1.9999847412109375);
    Engine::main->addNode(ivy4_124);
    Node* ivy4_125 = ivy4->copy();
    ivy4_125->position += vec3(-47.5992431640625, 112.03038787841797, 22.900976181030273);
    ivy4_125->eulerAngles = vec3(0.0, -0.0, 21.525942225942146);
    ivy4_125->scale = vec3(1.999979248046875, 1.9999142456054688, 1.9999734497070312);
    Engine::main->addNode(ivy4_125);
    Node* ivy4_126 = ivy4->copy();
    ivy4_126->position += vec3(-46.1629753112793, 112.00387573242188, 22.900983810424805);
    ivy4_126->eulerAngles = vec3(0.0, -0.0, 60.128907829857766);
    ivy4_126->scale = vec3(1.4999295043945313, 1.9999412536621093, 1.4999403381347656);
    Engine::main->addNode(ivy4_126);
    Node* ivy4_127 = ivy4->copy();
    ivy4_127->position += vec3(-42.937442779541016, 112.3630599975586, 22.900981903076172);
    ivy4_127->eulerAngles = vec3(0.0, 0.0, -86.3782468857547);
    ivy4_127->scale = vec3(1.499894256591797, 1.9999018859863282, 1.499922637939453);
    Engine::main->addNode(ivy4_127);
    Node* ivy5_128 = ivy5->copy();
    ivy5_128->position += vec3(-55.899845123291016, 108.11312866210938, 22.929000854492188);
    ivy5_128->eulerAngles = vec3(-88.23422101911146, -90.00000250447816, 0.0);
    ivy5_128->scale = vec3(0.9999549102783203, 0.9999645233154297, 0.9999526214599609);
    Engine::main->addNode(ivy5_128);
    Node* ivy7_129 = ivy7->copy();
    ivy7_129->position += vec3(-53.87495422363281, 123.96278381347656, 22.6284236907959);
    ivy7_129->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    ivy7_129->scale = vec3(0.9999516296386719, 0.9999855804443359, 0.9999516296386719);
    Engine::main->addNode(ivy7_129);
    PBRShader* grassShader = new PBRShader(0.3, 0.5);
    grassShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Grass_03_Albedo.png", 2.0, true));
    grassShader->setNormalMap(new Texture("/Resources/Game/Map/T_Grass_03_Normal.png", 2.0, true));
    Node* grass2 = new Node();
    grass2->loadModelFile("/Resources/Game/Map/grassDungeon02lod2.dae");
    grass2->geometries[0]->setShader(grassShader);
    grass2->geometries[0]->setDoubleSided();
    grass2->position.x = MAPX;
    grass2->position.z = MAPZ;
    grass2->position.y  = MAPY;
    Node* grass3 = new Node();
    grass3->loadModelFile("/Resources/Game/Map/grassLow03lod0.dae");
    grass3->geometries[0]->setShader(grassShader);
    grass3->geometries[0]->setDoubleSided();
    grass3->position.x = MAPX;
    grass3->position.z = MAPZ;
    grass3->position.y  = MAPY;
    Node* grass4 = new Node();
    grass4->loadModelFile("/Resources/Game/Map/grassDungeon04lod0.dae");
    grass4->geometries[0]->setShader(grassShader);
    grass4->geometries[0]->setDoubleSided();
    grass4->position.x = MAPX;
    grass4->position.z = MAPZ;
    grass4->position.y  = MAPY;
    Node* grass5 = new Node();
    grass5->loadModelFile("/Resources/Game/Map/grassPatch05lod0.dae");
    grass5->geometries[0]->setShader(grassShader);
    grass5->geometries[0]->setDoubleSided();
    grass5->position.x = MAPX;
    grass5->position.z = MAPZ;
    grass5->position.y  = MAPY;
    Node* grass10 = new Node();
    grass10->loadModelFile("/Resources/Game/Map/grassPatch10lod0.dae");
    grass10->geometries[0]->setShader(grassShader);
    grass10->geometries[0]->setDoubleSided();
    grass10->position.x = MAPX;
    grass10->position.z = MAPZ;
    grass10->position.y  = MAPY;
    Node* grass11 = new Node();
    grass11->loadModelFile("/Resources/Game/Map/grassPatch11lod0.dae");
    grass11->geometries[0]->setShader(grassShader);
    grass11->geometries[0]->setDoubleSided();
    grass11->position.x = MAPX;
    grass11->position.z = MAPZ;
    grass11->position.y  = MAPY;
    Node* grass11_130 = grass11->copy();
    grass11_130->position += vec3(-63.387237548828125, 100.00638580322266, 56.11091995239258);
    grass11_130->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_130->scale = vec3(1.9999732971191406, 1.999985809326172, 1.9999732971191406);
    Engine::main->addNode(grass11_130);
    Node* grass11_131 = grass11->copy();
    grass11_131->position += vec3(-64.56271362304688, 100.00638580322266, 47.335838317871094);
    grass11_131->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_131->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass11_131);
    Node* grass11_132 = grass11->copy();
    grass11_132->position += vec3(-57.26655960083008, 100.00638580322266, 54.91959762573242);
    grass11_132->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_132->scale = vec3(0.9999997711181641, 0.9999999237060547, 0.9999997711181641);
    Engine::main->addNode(grass11_132);
    Node* grass11_133 = grass11->copy();
    grass11_133->position += vec3(-49.26445007324219, 100.00638580322266, 56.9714241027832);
    grass11_133->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_133->scale = vec3(0.9999997711181641, 0.9999999237060547, 0.9999997711181641);
    Engine::main->addNode(grass11_133);
    Node* grass11_134 = grass11->copy();
    grass11_134->position += vec3(-45.142024993896484, 100.00638580322266, 52.089210510253906);
    grass11_134->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_134->scale = vec3(1.2999998474121093, 1.2999998474121093, 1.2999998474121093);
    Engine::main->addNode(grass11_134);
    Node* grass11_135 = grass11->copy();
    grass11_135->position += vec3(-34.45664978027344, 100.00190734863281, 59.23859405517578);
    grass11_135->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_135->scale = vec3(1.2999996948242187, 1.2999998474121093, 1.2999996948242187);
    Engine::main->addNode(grass11_135);
    Node* grass11_136 = grass11->copy();
    grass11_136->position += vec3(-30.237443923950195, 100.00190734863281, 44.97317886352539);
    grass11_136->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_136->scale = vec3(1.2999995422363282, 1.2999998474121093, 1.2999995422363282);
    Engine::main->addNode(grass11_136);
    Node* grass2_137 = grass2->copy();
    grass2_137->position += vec3(-83.5254898071289, 123.82551574707031, 45.177303314208984);
    grass2_137->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_137->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass2_137);
    Node* grass2_138 = grass2->copy();
    grass2_138->position += vec3(-85.83818054199219, 123.90988159179688, 42.74276351928711);
    grass2_138->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_138->scale = vec3(0.9999998474121093, 1.4999996948242187, 0.9999998474121093);
    Engine::main->addNode(grass2_138);
    Node* grass2_139 = grass2->copy();
    grass2_139->position += vec3(-85.8608169555664, 123.90988159179688, 43.18954086303711);
    grass2_139->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_139->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass2_139);
    Node* grass2_140 = grass2->copy();
    grass2_140->position += vec3(-89.72710418701172, 124.68132019042969, 42.961978912353516);
    grass2_140->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_140->scale = vec3(0.9999998474121093, 0.49999992370605467, 0.9999998474121093);
    Engine::main->addNode(grass2_140);
    Node* grass2_141 = grass2->copy();
    grass2_141->position += vec3(-9.745713233947754, 123.82552337646484, 45.056922912597656);
    grass2_141->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_141->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass2_141);
    Node* grass2_142 = grass2->copy();
    grass2_142->position += vec3(-12.058404922485352, 123.9098892211914, 42.62238311767578);
    grass2_142->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_142->scale = vec3(0.9999999237060547, 1.4999998474121095, 0.9999999237060547);
    Engine::main->addNode(grass2_142);
    Node* grass2_143 = grass2->copy();
    grass2_143->position += vec3(-12.081034660339355, 123.9098892211914, 43.06916046142578);
    grass2_143->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_143->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass2_143);
    Node* grass2_144 = grass2->copy();
    grass2_144->position += vec3(-15.9473237991333, 124.68132781982422, 42.84159851074219);
    grass2_144->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_144->scale = vec3(0.9999999237060547, 0.49999996185302736, 0.9999999237060547);
    Engine::main->addNode(grass2_144);
    Node* grass2_145 = grass2->copy();
    grass2_145->position += vec3(-21.78997230529785, 100.00311279296875, 40.10075759887695);
    grass2_145->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_145->scale = vec3(0.9999998474121093, 1.4999996948242187, 0.9999998474121093);
    Engine::main->addNode(grass2_145);
    Node* grass2_146 = grass2->copy();
    grass2_146->position += vec3(-11.501194953918457, 126.98491668701172, 54.783016204833984);
    grass2_146->eulerAngles = vec3(0.0, -0.0, 15.007303597183064);
    grass2_146->scale = vec3(0.9999978637695313, 0.9999978637695313, 0.9999974822998047);
    Engine::main->addNode(grass2_146);
    Node* grass4_147 = grass4->copy();
    grass4_147->position += vec3(-22.828813552856445, 100.00310516357422, 40.645965576171875);
    grass4_147->eulerAngles = vec3(0.0, 63.738751598668706, 0.0);
    grass4_147->scale = vec3(0.9999850463867187, 0.9999871063232422, 0.9999850463867187);
    Engine::main->addNode(grass4_147);
    Node* grass4_148 = grass4->copy();
    grass4_148->position += vec3(-7.582468509674072, 123.84445190429688, 51.6343879699707);
    grass4_148->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass4_148->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass4_148);
    Node* grass4_149 = grass4->copy();
    grass4_149->position += vec3(-16.990386962890625, 123.85985565185547, 52.83941650390625);
    grass4_149->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass4_149->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass4_149);
    Node* grass4_150 = grass4->copy();
    grass4_150->position += vec3(-81.36224365234375, 123.84444427490234, 51.75476837158203);
    grass4_150->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass4_150->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass4_150);
    Node* grass4_151 = grass4->copy();
    grass4_151->position += vec3(-90.7701644897461, 123.85984802246094, 52.95979690551758);
    grass4_151->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass4_151->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass4_151);
    Node* grass5_152 = grass2->copy();
    grass5_152->position += vec3(-90.6206283569336, 123.92105865478516, 44.372467041015625);
    grass5_152->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass5_152->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass5_152);
    Node* grass5_153 = grass2->copy();
    grass5_153->position += vec3(-16.840848922729492, 123.92106628417969, 44.2520866394043);
    grass5_153->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass5_153->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass5_153);
    Node* grass3_154 = grass3->copy();
    grass3_154->position += vec3(-89.78417205810547, 123.94147491455078, 54.2829475402832);
    grass3_154->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass3_154->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass3_154);
    Node* grass3_155 = grass3->copy();
    grass3_155->position += vec3(-16.004398345947266, 123.94148254394531, 54.162567138671875);
    grass3_155->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass3_155->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass3_155);
    Node* grass11_157 = grass11->copy();
    grass11_157->position += vec3(-18.96771812438965, 100.00312042236328, 54.751712799072266);
    grass11_157->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass11_157->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(grass11_157);
    Node* grass11_158 = grass11->copy();
    grass11_158->position += vec3(-15.942159652709961, 100.00311279296875, 56.49775695800781);
    grass11_158->eulerAngles = vec3(0.0, 40.832622801858335, 0.0);
    grass11_158->scale = vec3(1.9999998474121095, 1.9999998474121095, 1.9999998474121095);
    Engine::main->addNode(grass11_158);
    Node* grass11_159 = grass11->copy();
    grass11_159->position += vec3(-5.512401103973389, 100.00311279296875, 56.64284896850586);
    grass11_159->eulerAngles = vec3(0.0, 40.83261938676375, 0.0);
    grass11_159->scale = vec3(1.9999998474121095, 3.999999694824219, 2.0);
    Engine::main->addNode(grass11_159);
    Node* grass11_160 = grass11->copy();
    grass11_160->position += vec3(-21.643817901611328, 100.00310516357422, 41.203006744384766);
    grass11_160->eulerAngles = vec3(0.0, 40.83263304714209, 0.0);
    grass11_160->scale = vec3(1.9999995422363281, 1.9999996948242187, 1.9999995422363281);
    Engine::main->addNode(grass11_160);
    Node* grass11_161 = grass11->copy();
    grass11_161->position += vec3(-61.79794692993164, 100.44695281982422, 26.338220596313477);
    grass11_161->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass11_161->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass11_161);
    Node* grass5_162 = grass2->copy();
    grass5_162->position += vec3(-25.449129104614258, 99.78058624267578, 36.197357177734375);
    grass5_162->eulerAngles = vec3(0.0, 18.544149719239503, 0.0);
    grass5_162->scale = vec3(0.9999955749511719, 0.9999953460693359, 0.9999955749511719);
    Engine::main->addNode(grass5_162);
    Node* grass10_164 = grass10->copy();
    grass10_164->position += vec3(-38.613380432128906, 99.93116760253906, 24.195659637451172);
    grass10_164->eulerAngles = vec3(0.0, 20.775080747462425, 0.0);
    grass10_164->scale = vec3(0.999989013671875, 0.9999886322021484, 0.999989013671875);
    Engine::main->addNode(grass10_164);
    Node* grass10_165 = grass10->copy();
    grass10_165->position += vec3(-39.16757583618164, 100.26509094238281, 24.7023868560791);
    grass10_165->eulerAngles = vec3(0.0, 77.51820745668421, 0.0);
    grass10_165->scale = vec3(0.9999831390380859, 0.9999818420410156, 0.9999831390380859);
    Engine::main->addNode(grass10_165);
    Node* grass5_166 = grass2->copy();
    grass5_166->position += vec3(-32.15500259399414, 100.01226043701172, 32.10586166381836);
    grass5_166->eulerAngles = vec3(0.0, 18.544149719239503, 0.0);
    grass5_166->scale = vec3(0.9999954986572266, 0.9999953460693359, 0.9999954986572266);
    Engine::main->addNode(grass5_166);
    Node* grass5_167 = grass2->copy();
    grass5_167->position += vec3(-33.379920959472656, 100.01225280761719, 32.66874313354492);
    grass5_167->eulerAngles = vec3(0.0, 70.65213247277222, 0.0);
    grass5_167->scale = vec3(0.9999906158447266, 0.9999907684326171, 0.9999906158447266);
    Engine::main->addNode(grass5_167);
    Node* grass11_168 = grass11->copy();
    grass11_168->position += vec3(-26.81464385986328, 100.00311279296875, 32.4791145324707);
    grass11_168->eulerAngles = vec3(0.0, 40.83262621695292, 0.0);
    grass11_168->scale = vec3(1.9999990844726563, 1.9999993896484376, 1.9999990844726563);
    Engine::main->addNode(grass11_168);
    Node* grass11_169 = grass11->copy();
    grass11_169->position += vec3(-36.10348892211914, 100.364990234375, 26.146657943725586);
    grass11_169->eulerAngles = vec3(0.0, 40.83262621695292, 0.0);
    grass11_169->scale = vec3(1.9999990844726563, 1.9999993896484376, 1.9999990844726563);
    Engine::main->addNode(grass11_169);
    Node* grass11_170 = grass11->copy();
    grass11_170->position += vec3(-35.56925964355469, 100.35533905029297, 27.244781494140625);
    grass11_170->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_170->scale = vec3(1.999977569580078, 2.499988861083984, 1.999977569580078);
    Engine::main->addNode(grass11_170);
    Node* grass10_173 = grass10->copy();
    grass10_173->position += vec3(-56.994503021240234, 100.00296783447266, 26.642885208129883);
    grass10_173->eulerAngles = vec3(0.0, 77.51820745668421, 0.0);
    grass10_173->scale = vec3(0.9999829864501953, 0.9999818420410156, 0.9999829864501953);
    Engine::main->addNode(grass10_173);
    Node* grass10_174 = grass10->copy();
    grass10_174->position += vec3(-56.951194763183594, 100.00210571289062, 23.13821792602539);
    grass10_174->eulerAngles = vec3(179.999991348578, 40.529580968763206, 179.999991348578);
    grass10_174->scale = vec3(0.9999829864501953, 0.9999690246582031, 0.9999829864501953);
    Engine::main->addNode(grass10_174);
    Node* grass3_175 = grass3->copy();
    grass3_175->position += vec3(-56.59413528442383, 100.0021743774414, 23.659265518188477);
    grass3_175->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass3_175->scale = vec3(0.9999997711181641, 0.9999997711181641, 0.9999997711181641);
    Engine::main->addNode(grass3_175);
    Node* grass11_177 = grass11->copy();
    grass11_177->position += vec3(-58.926273345947266, 100.0025863647461, 24.463552474975586);
    grass11_177->eulerAngles = vec3(0.0, 37.737163994535635, 0.0);
    grass11_177->scale = vec3(0.9999957275390625, 0.9999951171875, 0.9999957275390625);
    Engine::main->addNode(grass11_177);
    Node* grass11_178 = grass11->copy();
    grass11_178->position += vec3(-19.932376861572266, 100.00309753417969, 52.64901351928711);
    grass11_178->eulerAngles = vec3(0.0, 40.832622801858335, 0.0);
    grass11_178->scale = vec3(1.9999993896484376, 1.9999995422363281, 1.9999993896484376);
    Engine::main->addNode(grass11_178);
    Node* grass10_179 = grass10->copy();
    grass10_179->position += vec3(-17.627302169799805, 99.67961120605469, 55.84433364868164);
    grass10_179->eulerAngles = vec3(0.0, 20.77509782293535, 0.0);
    grass10_179->scale = vec3(0.9999890899658204, 0.9999887084960938, 0.9999890899658204);
    Engine::main->addNode(grass10_179);
    Node* grass2_180 = grass2->copy();
    grass2_180->position += vec3(-22.68814468383789, 103.09507751464844, 38.547603607177734);
    grass2_180->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_180->scale = vec3(0.999997787475586, 0.999997787475586, 0.9999974060058594);
    Engine::main->addNode(grass2_180);
    Node* grass11_181 = grass11->copy();
    grass11_181->position += vec3(-72.0050277709961, 100.00310516357422, 33.92647171020508);
    grass11_181->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_181->scale = vec3(1.9999774169921876, 2.499988861083984, 1.9999774169921876);
    Engine::main->addNode(grass11_181);
    Node* grass5_182 = grass2->copy();
    grass5_182->position += vec3(-73.06846618652344, 100.00310516357422, 35.848262786865234);
    grass5_182->eulerAngles = vec3(0.0, 18.544149719239503, 0.0);
    grass5_182->scale = vec3(0.9999954986572266, 0.9999953460693359, 0.9999954986572266);
    Engine::main->addNode(grass5_182);
    Node* grass11_183 = grass11->copy();
    grass11_183->position += vec3(-78.207763671875, 100.06587219238281, 51.04287338256836);
    grass11_183->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_183->scale = vec3(1.9999771118164062, 2.499988861083984, 1.9999771118164062);
    Engine::main->addNode(grass11_183);
    Node* grass11_184 = grass11->copy();
    grass11_184->position += vec3(-78.32767486572266, 100.06586456298828, 52.302249908447266);
    grass11_184->eulerAngles = vec3(0.0, 71.19237311536354, 0.0);
    grass11_184->scale = vec3(1.9999839782714843, 0.9999911499023437, 1.9999839782714843);
    Engine::main->addNode(grass11_184);
    Node* grass5_185 = grass2->copy();
    grass5_185->position += vec3(-78.69593811035156, 99.99927520751953, 56.0202522277832);
    grass5_185->eulerAngles = vec3(0.0, 18.544149719239503, 0.0);
    grass5_185->scale = vec3(0.9999953460693359, 0.9999953460693359, 0.9999953460693359);
    Engine::main->addNode(grass5_185);
    Node* grass5_186 = grass2->copy();
    grass5_186->position += vec3(-68.73262786865234, 100.00372314453125, 63.31097412109375);
    grass5_186->eulerAngles = vec3(0.0, 18.54414801169221, 0.0);
    grass5_186->scale = vec3(0.9999953460693359, 1.9999998474121095, 0.9999953460693359);
    Engine::main->addNode(grass5_186);
    Node* grass10_187 = grass10->copy();
    grass10_187->position += vec3(-71.492919921875, 100.00189208984375, 63.271305084228516);
    grass10_187->eulerAngles = vec3(179.999991348578, 40.529580968763206, 179.999991348578);
    grass10_187->scale = vec3(0.9999829864501953, 0.9999690246582031, 0.9999829864501953);
    Engine::main->addNode(grass10_187);
    Node* grass11_188 = grass11->copy();
    grass11_188->position += vec3(-67.52619171142578, 99.76151275634766, 74.44866180419922);
    grass11_188->eulerAngles = vec3(42.18854854079468, 64.20756212292005, 45.19039960554236);
    grass11_188->scale = vec3(1.999973602294922, 0.9999868774414062, 1.9999714660644532);
    Engine::main->addNode(grass11_188);
    Node* grass11_189 = grass11->copy();
    grass11_189->position += vec3(-67.04084014892578, 99.99930572509766, 73.40177917480469);
    grass11_189->eulerAngles = vec3(-12.383558998282597, 70.72690938380552, -13.094126629527471);
    grass11_189->scale = vec3(1.999953155517578, 0.9999779510498047, 1.999951171875);
    Engine::main->addNode(grass11_189);
    Node* grass11_190 = grass11->copy();
    grass11_190->position += vec3(-68.59130859375, 99.72528076171875, 74.12393951416016);
    grass11_190->eulerAngles = vec3(-12.383558144508951, 70.72690938380552, -13.094126629527471);
    grass11_190->scale = vec3(1.999953155517578, 0.9999779510498047, 1.999951171875);
    Engine::main->addNode(grass11_190);
    Node* grass2_191 = grass2->copy();
    grass2_191->position += vec3(-68.40304565429688, 99.916015625, 69.12397003173828);
    grass2_191->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_191->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass2_191);
    Node* grass4_192 = grass4->copy();
    grass4_192->position += vec3(-66.60548400878906, 99.86902618408203, 68.02548217773438);
    grass4_192->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass4_192->scale = vec3(0.9999998474121093, 0.9999998474121093, 0.9999998474121093);
    Engine::main->addNode(grass4_192);
    Node* grass4_193 = grass4->copy();
    grass4_193->position += vec3(-64.88182830810547, 99.8690185546875, 68.25550079345703);
    grass4_193->eulerAngles = vec3(0.0, -57.653046217998174, 0.0);
    grass4_193->scale = vec3(0.9999939727783204, 0.9999945068359375, 0.9999939727783204);
    Engine::main->addNode(grass4_193);
    Node* grass4_194 = grass4->copy();
    grass4_194->position += vec3(-60.508209228515625, 99.8690185546875, 65.79206848144531);
    grass4_194->eulerAngles = vec3(0.0, -57.65303938780902, 0.0);
    grass4_194->scale = vec3(0.9999939727783204, 0.9999945068359375, 0.9999939727783204);
    Engine::main->addNode(grass4_194);
    Node* grass4_195 = grass4->copy();
    grass4_195->position += vec3(-58.50030517578125, 99.8690185546875, 65.91484069824219);
    grass4_195->eulerAngles = vec3(0.0, -57.65303938780902, 0.0);
    grass4_195->scale = vec3(0.9999939727783204, 0.9999945068359375, 0.9999939727783204);
    Engine::main->addNode(grass4_195);
    Node* grass4_196 = grass4->copy();
    grass4_196->position += vec3(-57.23771286010742, 99.86901092529297, 70.07000732421875);
    grass4_196->eulerAngles = vec3(0.0, 6.0862603335405945, 0.0);
    grass4_196->scale = vec3(0.9999909973144532, 0.9999869537353515, 0.9999909973144532);
    Engine::main->addNode(grass4_196);
    Node* grass4_197 = grass4->copy();
    grass4_197->position += vec3(-55.942447662353516, 99.86900329589844, 71.36154174804688);
    grass4_197->eulerAngles = vec3(0.0, 64.03459441237864, 0.0);
    grass4_197->scale = vec3(0.9999828338623047, 0.9999810028076171, 0.9999828338623047);
    Engine::main->addNode(grass4_197);
    Node* grass4_198 = grass4->copy();
    grass4_198->position += vec3(-50.04313659667969, 99.86900329589844, 68.02871704101562);
    grass4_198->eulerAngles = vec3(0.0, 64.03459441237864, 0.0);
    grass4_198->scale = vec3(0.9999828338623047, 0.9999810028076171, 0.9999828338623047);
    Engine::main->addNode(grass4_198);
    Node* grass4_199 = grass4->copy();
    grass4_199->position += vec3(-40.89301681518555, 99.95682525634766, 64.70237731933594);
    grass4_199->eulerAngles = vec3(0.0, 64.03458075200031, 0.0);
    grass4_199->scale = vec3(0.999982681274414, 0.9999810028076171, 0.999982681274414);
    Engine::main->addNode(grass4_199);
    Node* grass4_200 = grass4->copy();
    grass4_200->position += vec3(-39.70751953125, 99.92105865478516, 62.97782897949219);
    grass4_200->eulerAngles = vec3(0.0, 64.03458075200031, 0.0);
    grass4_200->scale = vec3(0.999982681274414, 0.9999810028076171, 0.999982681274414);
    Engine::main->addNode(grass4_200);
    Node* grass4_201 = grass4->copy();
    grass4_201->position += vec3(-32.13686752319336, 100.01161193847656, 65.8199462890625);
    grass4_201->eulerAngles = vec3(0.0, 64.03458075200031, 0.0);
    grass4_201->scale = vec3(0.999982681274414, 0.9999810028076171, 0.999982681274414);
    Engine::main->addNode(grass4_201);
    Node* grass4_202 = grass4->copy();
    grass4_202->position += vec3(-33.318546295166016, 100.03462982177734, 67.44712829589844);
    grass4_202->eulerAngles = vec3(0.0, 64.03459441237864, 0.0);
    grass4_202->scale = vec3(0.999982681274414, 0.9999810028076171, 0.999982681274414);
    Engine::main->addNode(grass4_202);
    Node* grass4_203 = grass4->copy();
    grass4_203->position += vec3(-25.404220581054688, 100.01161193847656, 62.080623626708984);
    grass4_203->eulerAngles = vec3(0.0, 64.03458075200031, 0.0);
    grass4_203->scale = vec3(0.9999826049804688, 0.9999810028076171, 0.9999826049804688);
    Engine::main->addNode(grass4_203);
    Node* grass4_204 = grass4->copy();
    grass4_204->position += vec3(-25.99184799194336, 100.01160430908203, 63.64189910888672);
    grass4_204->eulerAngles = vec3(179.999991348578, 51.64629440903841, 179.999991348578);
    grass4_204->scale = vec3(0.9999800109863282, 0.9999754333496094, 0.9999800109863282);
    Engine::main->addNode(grass4_204);
    Node* grass2_205 = grass2->copy();
    grass2_205->position += vec3(-65.30450439453125, 100.00310516357422, 56.829471588134766);
    grass2_205->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_205->scale = vec3(0.999997787475586, 1.9999998474121095, 0.9999974060058594);
    Engine::main->addNode(grass2_205);
    Node* grass2_206 = grass2->copy();
    grass2_206->position += vec3(-64.86962890625, 100.00310516357422, 56.79600524902344);
    grass2_206->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_206->scale = vec3(0.999997787475586, 0.9999999237060547, 0.9999974060058594);
    Engine::main->addNode(grass2_206);
    Node* grass2_207 = grass2->copy();
    grass2_207->position += vec3(-62.606685638427734, 100.00310516357422, 42.72309875488281);
    grass2_207->eulerAngles = vec3(0.0, -0.0, 0.0);
    grass2_207->scale = vec3(0.999997787475586, 0.9999999237060547, 0.9999974060058594);
    Engine::main->addNode(grass2_207);
    Node* grass2_208 = grass2->copy();
    grass2_208->position += vec3(-62.462364196777344, 100.00309753417969, 41.504913330078125);
    grass2_208->eulerAngles = vec3(0.0, 23.491117423749046, 0.0);
    grass2_208->scale = vec3(0.9999953460693359, 0.9999974822998047, 0.9999947357177734);
    Engine::main->addNode(grass2_208);
    Node* grass2_209 = grass2->copy();
    grass2_209->position += vec3(-65.70083618164062, 100.00309753417969, 32.18511962890625);
    grass2_209->eulerAngles = vec3(0.0, 23.491117423749046, 0.0);
    grass2_209->scale = vec3(0.9999951934814453, 0.9999974822998047, 0.9999947357177734);
    Engine::main->addNode(grass2_209);
    Node* grass4_210 = grass4->copy();
    grass4_210->position += vec3(-43.699668884277344, 99.99565124511719, 44.367828369140625);
    grass4_210->eulerAngles = vec3(179.999991348578, 51.64629440903841, 179.999991348578);
    grass4_210->scale = vec3(0.9999798583984375, 0.9999754333496094, 0.9999798583984375);
    Engine::main->addNode(grass4_210);
    Node* grass4_211 = grass4->copy();
    grass4_211->position += vec3(-46.48033905029297, 99.99565124511719, 46.599327087402344);
    grass4_211->eulerAngles = vec3(179.999991348578, 51.64629440903841, 179.999991348578);
    grass4_211->scale = vec3(0.9999798583984375, 0.9999754333496094, 0.9999798583984375);
    Engine::main->addNode(grass4_211);
    Node* grass4_212 = grass4->copy();
    grass4_212->position += vec3(-45.3099365234375, 99.99565124511719, 50.2840461730957);
    grass4_212->eulerAngles = vec3(179.999991348578, 51.64629440903841, 179.999991348578);
    grass4_212->scale = vec3(0.9999797058105468, 0.9999754333496094, 0.9999797058105468);
    Engine::main->addNode(grass4_212);
    Node* grass4_213 = grass4->copy();
    grass4_213->position += vec3(-49.610713958740234, 99.99565124511719, 56.51579284667969);
    grass4_213->eulerAngles = vec3(179.999991348578, 51.64629440903841, 179.999991348578);
    grass4_213->scale = vec3(0.9999796295166016, 0.9999754333496094, 0.9999796295166016);
    Engine::main->addNode(grass4_213);
    Node* grass11_214 = grass11->copy();
    grass11_214->position += vec3(-64.50089263916016, 99.03285217285156, 77.03083038330078);
    grass11_214->eulerAngles = vec3(0.0, 40.83262621695292, 0.0);
    grass11_214->scale = vec3(1.9999990844726563, 1.9999993896484376, 1.9999990844726563);
    Engine::main->addNode(grass11_214);
    Node* grass11_215 = grass11->copy();
    grass11_215->position += vec3(-63.84961700439453, 98.45808410644531, 78.1153335571289);
    grass11_215->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    grass11_215->scale = vec3(1.9999737548828125, 1.9999859619140625, 1.9999737548828125);
    Engine::main->addNode(grass11_215);
    PBRShader* plankShader = new PBRShader(0.3, 0.7);
    plankShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Wood_01_Albedo.png", 2.0, true));
    plankShader->setNormalMap(new Texture("/Resources/Game/Map/T_Wood_01_Normal.png", 2.0, true));
    Node* plank1 = new Node();
    plank1->loadModelFile("/Resources/Game/Map/plank1.dae");
    plank1->geometries[0]->setShader(plankShader);
    plank1->geometries[0]->setDoubleSided();
    plank1->position.x = MAPX;
    plank1->position.z = MAPZ;
    plank1->position.y  = MAPY;
    Node* plank2 = new Node();
    plank2->loadModelFile("/Resources/Game/Map/plank2.dae");
    plank2->geometries[0]->setShader(plankShader);
    plank2->geometries[0]->setDoubleSided();
    plank2->position.x = MAPX;
    plank2->position.z = MAPZ;
    plank2->position.y  = MAPY;
    Node* plank3 = new Node();
    plank3->loadModelFile("/Resources/Game/Map/plank3.dae");
    plank3->geometries[0]->setShader(plankShader);
    plank3->geometries[0]->setDoubleSided();
    plank3->position.x = MAPX;
    plank3->position.z = MAPZ;
    plank3->position.y  = MAPY;
    Node* plank3_216 = plank3->copy();
    plank3_216->position += vec3(-37.71573257446289, 100.20777893066406, 30.402681350708008);
    plank3_216->eulerAngles = vec3(25.08401145329711, 65.99082206237283, 27.131930977804124);
    plank3_216->scale = vec3(0.4999987030029297, 0.9999718475341797, 0.9999976348876953);
    Engine::main->addNode(plank3_216);
    Node* plank2_217 = plank2->copy();
    plank2_217->position += vec3(-39.8646240234375, 100.14472961425781, 29.915334701538086);
    plank2_217->eulerAngles = vec3(3.7378534666880356, -43.50627986189232, -5.42098454045572);
    plank2_217->scale = vec3(0.9999665069580078, 0.9999600219726562, 0.9999700164794922);
    Engine::main->addNode(plank2_217);
    Node* plank2_218 = plank2->copy();
    plank2_218->position += vec3(-67.09780883789062, 100.03519439697266, 30.353471755981445);
    plank2_218->eulerAngles = vec3(2.7913497571697636, 2.115648960977334, -0.646283491602302);
    plank2_218->scale = vec3(0.9999588012695313, 0.9999536895751953, 0.9999625396728515);
    Engine::main->addNode(plank2_218);
    Node* plank1_219 = plank1->copy();
    plank1_219->position += vec3(-82.24755859375, 123.9820785522461, 45.10414123535156);
    plank1_219->eulerAngles = vec3(-1.7540349473764696, -35.241525569934275, 3.037892905780778);
    plank1_219->scale = vec3(0.9999594116210937, 0.9999716186523437, 0.9999587249755859);
    Engine::main->addNode(plank1_219);
    Node* plank1_220 = plank1->copy();
    plank1_220->position += vec3(-82.11333465576172, 124.09194946289062, 45.1502571105957);
    plank1_220->eulerAngles = vec3(-0.6800147543443802, -7.609061254278692, -3.5977154872791224);
    plank1_220->scale = vec3(0.9999519348144531, 0.9999635314941406, 0.9999530792236329);
    Engine::main->addNode(plank1_220);
    Node* plank1_221 = plank1->copy();
    plank1_221->position += vec3(-14.726137161254883, 123.98208618164062, 53.513099670410156);
    plank1_221->eulerAngles = vec3(-1.7540350540981755, -35.241525569934275, 3.0378933326676014);
    plank1_221->scale = vec3(0.9999594116210937, 0.9999716186523437, 0.9999588012695313);
    Engine::main->addNode(plank1_221);
    Node* plank1_222 = plank1->copy();
    plank1_222->position += vec3(-14.591909408569336, 124.09195709228516, 53.5592155456543);
    plank1_222->eulerAngles = vec3(-0.680014861066086, -7.609061254278692, -3.5977154872791224);
    plank1_222->scale = vec3(0.9999520111083985, 0.9999636077880859, 0.9999531555175781);
    Engine::main->addNode(plank1_222);
    Node* plank2_223 = plank2->copy();
    plank2_223->position += vec3(-21.462772369384766, 100.08348846435547, 44.11054992675781);
    plank2_223->eulerAngles = vec3(-0.7490667395535927, -43.62939060658721, 1.0855502460421584);
    plank2_223->scale = vec3(0.999968032836914, 0.9999617767333985, 0.999970932006836);
    Engine::main->addNode(plank2_223);
    Node* plank3_224 = plank3->copy();
    plank3_224->position += vec3(-20.954912185668945, 100.03620910644531, 46.00153732299805);
    plank3_224->eulerAngles = vec3(0.0, 68.37629978094563, 0.0);
    plank3_224->scale = vec3(0.49999992370605467, 0.9999771118164062, 0.9999998474121093);
    Engine::main->addNode(plank3_224);
    PBRShader* torchShader = new PBRShader(0.6, 0.5);
    torchShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Torch_01_Albedo.png", 2.0, true));
    torchShader->setNormalMap(new Texture("/Resources/Game/Map/T_Torch_01_Normal.png", 2.0, true));
    Node* torch1 = new Node();
    torch1->loadModelFile("/Resources/Game/Map/torch01lod0.dae");
    torch1->geometries[0]->setShader(torchShader);
    torch1->geometries[0]->setDoubleSided();
    torch1->position.x = MAPX;
    torch1->position.z = MAPZ;
    torch1->position.y  = MAPY;
    Node* torch1_225 = torch1->copy();
    torch1_225->position += vec3(-83.11381530761719, 127.62088775634766, 43.743831634521484);
    torch1_225->eulerAngles = vec3(0.0, -0.0, 0.0);
    torch1_225->scale = vec3(1.4999996948242187, 1.4999996948242187, 1.4999996948242187);
    Engine::main->addNode(torch1_225);
    Node* torch1_226 = torch1->copy();
    torch1_226->position += vec3(-87.22014617919922, 127.33155822753906, 54.257423400878906);
    torch1_226->eulerAngles = vec3(179.999991348578, -5.008956130975331e-06, 179.999991348578);
    torch1_226->scale = vec3(1.4999996948242187, 1.4999996948242187, 1.4999996948242187);
    Engine::main->addNode(torch1_226);
    Node* torch1_227 = torch1->copy();
    torch1_227->position += vec3(-10.973664283752441, 127.28768920898438, 43.86478805541992);
    torch1_227->eulerAngles = vec3(0.0, -0.0, 0.0);
    torch1_227->scale = vec3(1.4999998474121095, 1.4999998474121095, 1.4999998474121095);
    Engine::main->addNode(torch1_227);
    Node* torch1_228 = torch1->copy();
    torch1_228->position += vec3(-15.105896949768066, 127.28768920898438, 54.34872817993164);
    torch1_228->eulerAngles = vec3(179.999991348578, -5.008956130975331e-06, 179.999991348578);
    torch1_228->scale = vec3(1.4999998474121095, 1.4999998474121095, 1.4999998474121095);
    Engine::main->addNode(torch1_228);
    PBRShader* rootShader = new PBRShader(0.6, 0.5);
    rootShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Roots_01_Albedo.png", 2.0, true));
    rootShader->setNormalMap(new Texture("/Resources/Game/Map/T_Roots_01_Normal.png", 2.0, true));
    Node* root1 = new Node();
    root1->loadModelFile("/Resources/Game/Map/root01lod0.dae");
    root1->geometries[0]->setShader(rootShader);
    root1->geometries[0]->setDoubleSided();
    root1->position.x = MAPX;
    root1->position.z = MAPZ;
    root1->position.y  = MAPY;
    Node* root2 = new Node();
    root2->loadModelFile("/Resources/Game/Map/root02lod0.dae");
    root2->geometries[0]->setShader(rootShader);
    root2->geometries[0]->setDoubleSided();
    root2->position.x = MAPX;
    root2->position.z = MAPZ;
    root2->position.y  = MAPY;
    Node* root4 = new Node();
    root4->loadModelFile("/Resources/Game/Map/root04lod0.dae");
    root4->geometries[0]->setShader(rootShader);
    root4->geometries[0]->setDoubleSided();
    root4->position.x = MAPX;
    root4->position.z = MAPZ;
    root4->position.y  = MAPY;
    Node* root4_229 = root4->copy();
    root4_229->position += vec3(-18.374248504638672, 99.94685363769531, 55.337928771972656);
    root4_229->eulerAngles = vec3(179.999991348578, -30.9940460760622, 3.5808221447938354e-06);
    root4_229->scale = vec3(1.4999684143066405, 1.0999903106689453, 1.49996826171875);
    Engine::main->addNode(root4_229);
    Node* root1_230 = root1->copy();
    root1_230->position += vec3(-5.482107639312744, 105.82120513916016, 55.57176971435547);
    root1_230->eulerAngles = vec3(90.00000250447816, -0.0, 45.2957108772602);
    root1_230->scale = vec3(0.9999790191650391, 0.9999923706054688, 0.9999857330322266);
    Engine::main->addNode(root1_230);
    Node* root2_231 = root2->copy();
    root2_231->position += vec3(-18.892175674438477, 100.05636596679688, 56.071746826171875);
    root2_231->eulerAngles = vec3(165.7497032303168, 28.67118411670549, -179.999991348578);
    root2_231->scale = vec3(0.6999456024169922, 0.6999674224853516, 0.6999458312988281);
    Engine::main->addNode(root2_231);
    Node* root1_232 = root1->copy();
    root1_232->position += vec3(-68.36189270019531, 99.34781646728516, 75.44401550292969);
    root1_232->eulerAngles = vec3(58.28055618761476, 60.262909311184245, 61.77813896722738);
    root1_232->scale = vec3(0.49999305725097654, 0.4999936294555664, 0.49999317169189456);
    Engine::main->addNode(root1_232);
    Node* root1_233 = root1->copy();
    root1_233->position += vec3(-68.28618621826172, 99.48162078857422, 75.42308807373047);
    root1_233->eulerAngles = vec3(20.320010856273864, 25.781530861906315, 20.212783716493835);
    root1_233->scale = vec3(0.3000008010864258, 0.2999987983703613, 0.3000002098083496);
    Engine::main->addNode(root1_233);
    Node* root2_234 = root2->copy();
    root2_234->position += vec3(-64.9647445678711, 98.8053970336914, 75.91790008544922);
    root2_234->eulerAngles = vec3(160.3051955183596, -11.803172211297225, -170.40331601752163);
    root2_234->scale = vec3(0.6999424743652344, 0.6999610900878906, 0.6999413299560547);
    Engine::main->addNode(root2_234);
    Node* root1_235 = root1->copy();
    root1_235->position += vec3(-46.344486236572266, 99.24991607666016, 76.68132781982422);
    root1_235->eulerAngles = vec3(163.841498640377, 43.0034140144393, 178.9855716530477);
    root1_235->scale = vec3(0.999951400756836, 0.9999496459960937, 0.9999655914306641);
    Engine::main->addNode(root1_235);
    Node* root1_236 = root1->copy();
    root1_236->position += vec3(-41.6873893737793, 99.39608001708984, 77.92771911621094);
    root1_236->eulerAngles = vec3(168.9128184764631, -4.010984620747206, 175.24486828992846);
    root1_236->scale = vec3(0.9999441528320312, 0.9999390411376953, 0.9999615478515625);
    Engine::main->addNode(root1_236);
    Node* crate1 = new Node();
    crate1->loadModelFile("/Resources/Game/Map/crate01lod0.dae");
    crate1->geometries[0]->setShader(plankShader);
    crate1->geometries[0]->setDoubleSided();
    crate1->position.x = MAPX;
    crate1->position.z = MAPZ;
    crate1->position.y  = MAPY;
    Node* crate2 = new Node();
    crate2->loadModelFile("/Resources/Game/Map/crateb01lod0.dae");
    crate2->geometries[0]->setShader(plankShader);
    crate2->geometries[0]->setDoubleSided();
    crate2->position.x = MAPX;
    crate2->position.z = MAPZ;
    crate2->position.y  = MAPY;
    Node* crate1_237 = crate1->copy();
    crate1_237->position += vec3(-64.72871398925781, 102.00199127197266, 55.782108306884766);
    crate1_237->eulerAngles = vec3(0.0, 23.035700900460103, 0.0);
    crate1_237->scale = vec3(1.9999932861328125, 1.9999412536621093, 1.4999998474121095);
    Engine::main->addNode(crate1_237);
    Node* crate1_238 = crate1->copy();
    crate1_238->position += vec3(-59.76287078857422, 105.13507080078125, 26.18661880493164);
    crate1_238->eulerAngles = vec3(0.0, 29.974496908465227, 0.0);
    crate1_238->scale = vec3(2.9999765014648436, 2.999975280761719, 2.9999765014648436);
    Engine::main->addNode(crate1_238);
    Node* crate2_239 = crate2->copy();
    crate2_239->position += vec3(-61.33685302734375, 100.05243682861328, 27.188745498657227);
    crate2_239->eulerAngles = vec3(-5.269714633360155, 0.0, 0.0);
    crate2_239->scale = vec3(0.9999960327148437, 0.9999954223632812, 0.9999954223632812);
    Engine::main->addNode(crate2_239);
    Node* crate2_240 = crate2->copy();
    crate2_240->position += vec3(-23.667755126953125, 100.08351135253906, 61.5477294921875);
    crate2_240->eulerAngles = vec3(0.0, -0.0, 0.0);
    crate2_240->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(crate2_240);
    Node* crate1_241 = crate1->copy();
    crate1_241->position += vec3(-65.20054626464844, 100.00308990478516, 54.68937683105469);
    crate1_241->eulerAngles = vec3(0.0, 23.03569919291281, 0.0);
    crate1_241->scale = vec3(1.999993133544922, 1.99994140625, 3.999986267089844);
    Engine::main->addNode(crate1_241);
    Node* crate1_242 = crate1->copy();
    crate1_242->position += vec3(-61.0711784362793, 99.970458984375, 25.995046615600586);
    crate1_242->eulerAngles = vec3(-1.7733529635050873, 22.13437547720688, 4.306770231622839);
    crate1_242->scale = vec3(0.9999791717529297, 0.9999751281738282, 0.9999752807617187);
    Engine::main->addNode(crate1_242);
    Node* crate1_243 = crate1->copy();
    crate1_243->position += vec3(-24.513986587524414, 100.03558349609375, 59.952640533447266);
    crate1_243->eulerAngles = vec3(0.5196003978889319, -18.290589191586534, -1.6552251619748342);
    crate1_243->scale = vec3(0.9999908447265625, 0.9999872589111328, 0.9999908447265625);
    Engine::main->addNode(crate1_243);
    Node* crate1_244 = crate1->copy();
    crate1_244->position += vec3(-23.448984146118164, 100.00550079345703, 60.12397766113281);
    crate1_244->eulerAngles = vec3(0.5196001844455203, -18.29058748403924, -1.6552243082011875);
    crate1_244->scale = vec3(0.9999907684326171, 0.9999871826171876, 0.9999908447265625);
    Engine::main->addNode(crate1_244);
    Node* crate1_245 = crate1->copy();
    crate1_245->position += vec3(-23.96421241760254, 101.0422592163086, 59.953590393066406);
    crate1_245->eulerAngles = vec3(0.5196002911672261, -18.290589191586534, -1.6552244149228934);
    crate1_245->scale = vec3(0.9999906158447266, 0.9999869537353515, 0.9999906921386719);
    Engine::main->addNode(crate1_245);
    Node* crate1_246 = crate1->copy();
    crate1_246->position += vec3(-22.329954147338867, 100.20539093017578, 60.51980972290039);
    crate1_246->eulerAngles = vec3(-1.7293412522059348, -18.218597290187308, 5.515934842089476);
    crate1_246->scale = vec3(0.9999885559082031, 0.9999848937988282, 0.9999863433837891);
    Engine::main->addNode(crate1_246);
    Node* rack1 = new Node();
    rack1->loadModelFile("/Resources/Game/Map/rack01lod0.dae");
    rack1->geometries[0]->setShader(plankShader);
    rack1->geometries[0]->setDoubleSided();
    rack1->position.x = MAPX;
    rack1->position.z = MAPZ;
    rack1->position.y  = MAPY;
    Node* rack1_247 = rack1->copy();
    rack1_247->position += vec3(-65.17606353759766, 100.00313568115234, 29.69363021850586);
    rack1_247->eulerAngles = vec3(0, 122.53, 0);
    rack1_247->scale = vec3(1.9999990844726563, 2.999999694824219, 1.9999990844726563);
    Engine::main->addNode(rack1_247);
    Node* rack1_248 = rack1->copy();
    rack1_248->position += vec3(-60.91197204589844, 100.00309753417969, 26.871240615844727);
    rack1_248->eulerAngles = vec3(0.0, 29.218934552289248, 0.0);
    rack1_248->scale = vec3(3.9997760009765626, 4.9995291137695315, 1.9998880004882813);
    Engine::main->addNode(rack1_248);
    Node* rack1_249 = rack1->copy();
    rack1_249->position += vec3(-24.43468475341797, 100.00312042236328, 38.02402877807617);
    rack1_249->eulerAngles = vec3(0, 124.621, 0);
    rack1_249->scale = vec3(1.9999917602539063, 2.999993896484375, 1.9999917602539063);
    Engine::main->addNode(rack1_249);
    Node* barrel1 = new Node();
    barrel1->loadModelFile("/Resources/Game/Map/barrel01lod0.dae");
    barrel1->geometries[0]->setShader(plankShader);
    barrel1->geometries[0]->setDoubleSided();
    barrel1->geometries[1]->setShader(wallShader8);
    barrel1->geometries[1]->setDoubleSided();
    barrel1->position.x = MAPX;
    barrel1->position.z = MAPZ;
    barrel1->position.y  = MAPY;
    Node* barrel1_252 = barrel1->copy();
    barrel1_252->position += vec3(-58.544437408447266, 100.37054443359375, 25.527950286865234);
    barrel1_252->eulerAngles = vec3(89.99998884409983, -0.0, 0.0);
    barrel1_252->scale = vec3(0.9999845886230468, 0.9999786376953125, 0.9999786376953125);
    Engine::main->addNode(barrel1_252);
    Node* barrel1_257 = barrel1->copy();
    barrel1_257->position += vec3(-26.098234176635742, 100.01934814453125, 34.28403091430664);
    barrel1_257->eulerAngles = vec3(0.0, 16.022329472002195, 0.0);
    barrel1_257->scale = vec3(0.999966812133789, 0.9999604797363282, 0.9999617767333985);
    Engine::main->addNode(barrel1_257);
    Node* barrel1_258 = barrel1->copy();
    barrel1_258->position += vec3(-26.75208854675293, 100.01934814453125, 33.21472930908203);
    barrel1_258->eulerAngles = vec3(0.0, 16.022329472002195, 0.0);
    barrel1_258->scale = vec3(0.999966812133789, 0.9999604797363282, 0.9999617767333985);
    Engine::main->addNode(barrel1_258);
    Node* barrel1_259 = barrel1->copy();
    barrel1_259->position += vec3(-27.087125778198242, 100.01934814453125, 34.34706497192383);
    barrel1_259->eulerAngles = vec3(0.0, 16.022329472002195, 0.0);
    barrel1_259->scale = vec3(0.999966812133789, 0.9999604797363282, 0.9999617767333985);
    Engine::main->addNode(barrel1_259);
    Node* barrel1_260 = barrel1->copy();
    barrel1_260->position += vec3(-26.179431915283203, 100.41751098632812, 35.09712219238281);
    barrel1_260->eulerAngles = vec3(89.99992054220813, -52.17486567343278, 5.5688127344467605e-05);
    barrel1_260->scale = vec3(0.999925765991211, 0.9998771667480468, 0.9998847961425781);
    Engine::main->addNode(barrel1_260);
    Node* barrel1_261 = barrel1->copy();
    barrel1_261->position += vec3(-25.437583923339844, 100.4175033569336, 34.7987060546875);
    barrel1_261->eulerAngles = vec3(89.99998884409983, 7.173277255985307, 1.2907631323787166e-06);
    barrel1_261->scale = vec3(0.9999437713623047, 0.9999246215820312, 0.9999456024169922);
    Engine::main->addNode(barrel1_261);
    Node* barrel1_262 = barrel1->copy();
    barrel1_262->position += vec3(-24.421594619750977, 106.07965087890625, 36.491188049316406);
    barrel1_262->eulerAngles = vec3(0.0, 16.022336302191366, 0.0);
    barrel1_262->scale = vec3(0.9999667358398437, 0.9999604034423828, 0.9999617004394531);
    Engine::main->addNode(barrel1_262);
    Node* barrel1_263 = barrel1->copy();
    barrel1_263->position += vec3(-23.967884063720703, 106.4652099609375, 37.575130462646484);
    barrel1_263->eulerAngles = vec3(89.99951073085793, -84.4773505982268, 0);
    barrel1_263->scale = vec3(0.9998902130126953, 0.9998339080810547, 0.9998487854003906);
    Engine::main->addNode(barrel1_263);
    Node* brazier1 = new Node();
    brazier1->loadModelFile("/Resources/Game/Map/brazier01lod0.dae");
    brazier1->geometries[0]->setShader(wallShader8);
    brazier1->geometries[0]->setDoubleSided();
    brazier1->geometries[1]->setShader(plankShader);
    brazier1->geometries[1]->setDoubleSided();
    brazier1->position.x = MAPX;
    brazier1->position.z = MAPZ;
    brazier1->position.y  = MAPY;
    Node* brazier1_251 = brazier1->copy();
    brazier1_251->position += vec3(-81.969, 123.8620834350586, 53.125);
    brazier1_251->eulerAngles = vec3(0.0, -0.0, 0.0);
    brazier1_251->scale = vec3(1.9999995422363281, 1.9999996948242187, 1.9999995422363281);
    Engine::main->addNode(brazier1_251);
    Node* brazier1_254 = brazier1->copy();
    brazier1_254->position += vec3(-7.997, 123.86209106445312, 53.155);
    brazier1_254->eulerAngles = vec3(0.0, -0.0, 0.0);
    brazier1_254->scale = vec3(1.9999996948242187, 1.9999998474121095, 1.9999996948242187);
    Engine::main->addNode(brazier1_254);
    Node* pike1 = new Node();
    pike1->loadModelFile("/Resources/Game/Map/pike02lod0.dae");
    pike1->geometries[0]->setShader(wallShader8);
    pike1->geometries[0]->setDoubleSided();
    pike1->position.x = MAPX;
    pike1->position.z = MAPZ;
    pike1->position.y  = MAPY;
    Node* pike1_250 = pike1->copy();
    pike1_250->position += vec3(-84.80848693847656, 123.41913604736328, 42.543792724609375);
    pike1_250->eulerAngles = vec3(0.0, 0.0, -20.93777414594484);
    pike1_250->scale = vec3(0.9999931335449219, 0.9999931335449219, 0.9999930572509765);
    Engine::main->addNode(pike1_250);
    Node* pike1_255 = pike1->copy();
    pike1_255->position += vec3(-12.7362699508667, 123.6455307006836, 42.90245056152344);
    pike1_255->eulerAngles = vec3(0.0, 0.0, -20.937779268586716);
    pike1_255->scale = vec3(0.9999932098388672, 0.9999932098388672, 0.9999931335449219);
    Engine::main->addNode(pike1_255);
    Node* chest1 = new Node();
    Node* chestBody = new Node();
    Node* chestLid = new Node();
    chest1->addChildNode(chestLid);
    chest1->addChildNode(chestBody);
    chestLid->position = vec3(0, 0.707, -0.355);
    chestLid->loadModelFile("/Resources/Game/Map/chestlid.dae");
    chestLid->geometries[0]->setShader(wallShader8);
    chestLid->geometries[0]->setDoubleSided();
    chestLid->geometries[1]->setShader(plankShader);
    chestLid->geometries[1]->setDoubleSided();
    chestBody->loadModelFile("/Resources/Game/Map/chestbody.dae");
    chestBody->geometries[0]->setShader(wallShader8);
    chestBody->geometries[0]->setDoubleSided();
    chestBody->geometries[1]->setShader(plankShader);
    chestBody->geometries[1]->setDoubleSided();
    chest1->position.x = MAPX;
    chest1->position.z = MAPZ;
    chest1->position.y  = MAPY;
    Node* chest1_253 = chest1->copy();
    chest1_253->position += vec3(-10.165, 124.01528930664062, 44.612);
    chest1_253->eulerAngles = vec3(0.0, -2.595, 0.0);
    chest1_253->scale = vec3(1.4998001098632812, 1.4998756408691407, 1.4998001098632812);
    Engine::main->addNode(chest1_253);
    Node* chest1_256 = chest1->copy();
    chest1_256->position += vec3(-62.858856201171875, 99.98562622070312, 27.078420639038086);
    chest1_256->eulerAngles = vec3(0.0, 41.29396109915768, 0.0);
    chest1_256->scale = vec3(1.4997727966308594, 1.499774169921875, 1.4997727966308594);
    Engine::main->addNode(chest1_256);
    Node* chest1_260 = chest1->copy();
    chest1_260->position += vec3(-24.3662109375, 100.00310516357422, 38.28737258911133);
    chest1_260->eulerAngles = vec3(5.5868543419460714e-12, -70.95321404157555, -3.4647084340055335e-12);
    chest1_260->scale = vec3(1.4998004150390625, 1.4998641967773438, 1.499800262451172);
    Engine::main->addNode(chest1_260);
    Node* chest1_265 = chest1->copy();
    chest1_265->position += vec3(-90.296, 124.01527404785156, 45.002);
    chest1_265->eulerAngles = vec3(0.0, 51.35024327455879, 0.0);
    chest1_265->scale = vec3(1.499794921875, 1.4998686218261719, 1.499794921875);
    Engine::main->addNode(chest1_265);
    Node* cover1 = new Node();
    cover1->loadModelFile("/Resources/Game/Map/Cover01lod0.dae");
    cover1->geometries[0]->setShader(plankShader);
    cover1->geometries[0]->setDoubleSided();
    cover1->geometries[1]->setShader(wallShader8);
    cover1->geometries[1]->setDoubleSided();
    cover1->position.x = MAPX;
    cover1->position.z = MAPZ;
    cover1->position.y  = MAPY;
    Node* cover1_266 = cover1->copy();
    cover1_266->position += vec3(-39.453678131103516, 100.00250244140625, 48.28976058959961);
    cover1_266->eulerAngles = vec3(0.0, -83.57401026916844, 0.0);
    cover1_266->scale = vec3(1.9999398803710937, 0.9999430084228516, 0.9999181365966797);
    Engine::main->addNode(cover1_266);
    Node* cover1_267 = cover1->copy();
    cover1_267->position += vec3(-35.44919967651367, 100.02408599853516, 41.40475082397461);
    cover1_267->eulerAngles = vec3(0.0, -65.95676673917114, 0.0);
    cover1_267->scale = vec3(1.0, 0.9999394989013672, 0.9999176025390625);
    Engine::main->addNode(cover1_267);
    Node* cover1_268 = cover1->copy();
    cover1_268->position += vec3(-33.6307373046875, 100.00248718261719, 57.174041748046875);
    cover1_268->eulerAngles = vec3(0, -111.1, 0);
    cover1_268->scale = vec3(0.999992446899414, 0.9999156188964844, 0.9999075317382813);
    Engine::main->addNode(cover1_268);
    Node* cover1_269 = cover1->copy();
    cover1_269->position += vec3(-56.97282409667969, 100.12015533447266, 56.37169647216797);
    cover1_269->eulerAngles = vec3(0, 109.726, 0);
    cover1_269->scale = vec3(1.9999891662597655, 0.9999658966064453, 0.9999494934082032);
    Engine::main->addNode(cover1_269);
    Node* cover1_270 = cover1->copy();
    cover1_270->position += vec3(-56.41801452636719, 100.00310516357422, 35.17462158203125);
    cover1_270->eulerAngles = vec3(0.0, 68.56699866257239, 0.0);
    cover1_270->scale = vec3(0.9999998474121093, 0.9999279022216797, 0.9998992156982421);
    Engine::main->addNode(cover1_270);
    Node* cover1_271 = cover1->copy();
    cover1_271->position += vec3(-62.63439178466797, 100.00309753417969, 41.29227066040039);
    cover1_271->eulerAngles = vec3(-0.0, 90.00000250447816, 0.0);
    cover1_271->scale = vec3(0.9999967956542969, 1.9999998474121095, 0.9998963165283203);
    Engine::main->addNode(cover1_271);
    PBRShader* ruinedShader = new PBRShader(0.3, 0.3);
    ruinedShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Ballustrade_01_Albedo.png", 2.0, true));
    ruinedShader->setNormalMap(new Texture("/Resources/Game/Map/T_Ballustrade_01_Normal.png", 2.0, true));
    Node* ruined1 = new Node();
    ruined1->loadModelFile("/Resources/Game/Map/ball01lod0.dae");
    ruined1->geometries[0]->setShader(ruinedShader);
    ruined1->geometries[0]->setDoubleSided();
    ruined1->position.x = MAPX;
    ruined1->position.z = MAPZ;
    ruined1->position.y  = MAPY;
    Node* ruined2 = new Node();
    ruined2->loadModelFile("/Resources/Game/Map/ball02lod0.dae");
    ruined2->geometries[0]->setShader(ruinedShader);
    ruined2->geometries[0]->setDoubleSided();
    ruined2->position.x = MAPX;
    ruined2->position.z = MAPZ;
    ruined2->position.y  = MAPY;
    Node* ruined5 = new Node();
    ruined5->loadModelFile("/Resources/Game/Map/ball05lod0.dae");
    ruined5->geometries[0]->setShader(ruinedShader);
    ruined5->geometries[0]->setDoubleSided();
    ruined5->position.x = MAPX;
    ruined5->position.z = MAPZ;
    ruined5->position.y  = MAPY;
    Node* ruined5_66 = ruined5->copy();
    ruined5_66->position += vec3(-62.7413444519043, 100.16389465332031, 45.17681884765625);
    ruined5_66->eulerAngles = vec3(90.00001616485652, -136.48136000018813, 0);
    ruined5_66->scale = vec3(0.9999694061279297, 0.9999420928955078, 0.9999604797363282);
    Engine::main->addNode(ruined5_66);
    Node* ruined2_271 = ruined2->copy();
    ruined2_271->position += vec3(-41.0066032409668, 100.00182342529297, 58.27544021606445);
    ruined2_271->eulerAngles = vec3(0.0, 66.96369371718193, 0.0);
    ruined2_271->scale = vec3(0.9998912811279297, 0.9999526977539063, 0.9998912811279297);
    Engine::main->addNode(ruined2_271);
    Node* ruined1_272 = ruined1->copy();
    ruined1_272->position += vec3(-29.207162857055664, 100.00310516357422, 43.177001953125);
    ruined1_272->eulerAngles = vec3(-0.0, -90.00000250447816, 0.0);
    ruined1_272->scale = vec3(0.9999993896484375, 0.9999999237060547, 0.9999993896484375);
    Engine::main->addNode(ruined1_272);
    Node* ruined5_273 = ruined5->copy();
    ruined5_273->position += vec3(-67.20616149902344, 100.00312042236328, 47.14087677001953);
    ruined5_273->eulerAngles = vec3(0.0, -0.0, 0.0);
    ruined5_273->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(ruined5_273);
    Node* ruined5_274 = ruined5->copy();
    ruined5_274->position += vec3(-28.26511573791504, 100.00310516357422, 53.004661560058594);
    ruined5_274->eulerAngles = vec3(0.0, -0.0, 0.0);
    ruined5_274->scale = vec3(0.9999999237060547, 0.9999999237060547, 0.9999999237060547);
    Engine::main->addNode(ruined5_274);
    Node* ruined5_275 = ruined5->copy();
    ruined5_275->position += vec3(-48.91549301147461, 99.95623779296875, 67.52113342285156);
    ruined5_275->eulerAngles = vec3(11.749, 109.12, 12.891);
    ruined5_275->scale = vec3(0.9999714660644531, 0.9999848937988282, 0.999972915649414);
    Engine::main->addNode(ruined5_275);
    Node* ruined5_276 = ruined5->copy();
    ruined5_276->position += vec3(-46.2738037109375, 100.04888916015625, 67.17887878417969);
    ruined5_276->eulerAngles = vec3(-80.551, 137.297, 0);
    ruined5_276->scale = vec3(0.9999746704101562, 0.9999679565429688, 0.9999694061279297);
    Engine::main->addNode(ruined5_276);
    PBRShader* barkShader = new PBRShader(0.2, 0.7);
    barkShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Ash_Tree_Bark_01_Albedo.png", 2.0, true));
    barkShader->setNormalMap(new Texture("/Resources/Game/Map/T_Ash_Tree_Bark_01_Normal.png", 2.0, true));
    PBRShader* treeShader = new PBRShader(0.2, 0.7);
    treeShader->setDiffuseMap(new Texture("/Resources/Game/Map/T_Ash_Tree_Canopy_01_Albedo.png", 2.0, true));
    treeShader->setNormalMap(new Texture("/Resources/Game/Map/T_Ash_Tree_Canopy_01_Normal.png", 2.0, true));
    Node* tree1 = new Node();
    tree1->loadModelFile("/Resources/Game/Map/tree01lod0.dae");
    tree1->geometries[0]->setShader(barkShader);
    tree1->geometries[0]->setDoubleSided();
    tree1->geometries[1]->setShader(treeShader);
    tree1->geometries[1]->setDoubleSided();
    tree1->position.x = MAPX;
    tree1->position.z = MAPZ;
    tree1->position.y  = MAPY;
    Node* tree1_277 = tree1->copy();
    tree1_277->position += vec3(-90.48456573486328, 124.47830963134766, 52.6517219543457);
    tree1_277->eulerAngles = vec3(0.0, 38.717832310282304, 0.0);
    tree1_277->scale = vec3(0.9999897003173828, 0.9999895477294922, 0.9999897003173828);
    Engine::main->addNode(tree1_277);
    Node* tree1_278 = tree1->copy();
    tree1_278->position += vec3(-24.947269439697266, 100.06257629394531, 63.21464157104492);
    tree1_278->eulerAngles = vec3(179.999991348578, -52.71037982511846, 179.999991348578);
    tree1_278->scale = vec3(0.9999507141113281, 0.9999618530273438, 0.9999507141113281);
    Engine::main->addNode(tree1_278);
    Node* tree1_279 = tree1->copy();
    tree1_279->position += vec3(-68.31903839111328, 99.77661895751953, 75.6146011352539);
    tree1_279->eulerAngles = vec3(166.8262913076726, -52.215491638616015, -172.0628744009163);
    tree1_279->scale = vec3(0.9999092102050782, 0.999945297241211, 0.9999094390869141);
    Engine::main->addNode(tree1_279);
    Node* tree1_280 = tree1->copy();
    tree1_280->position += vec3(-69.54647827148438, 99.66692352294922, 73.10148620605469);
    tree1_280->eulerAngles = vec3(-8.457288786924236, -77.35016431253439, 8.254868446908093);
    tree1_280->scale = vec3(0.4999870300292969, 0.49998779296875, 0.499987907409668);
    Engine::main->addNode(tree1_280);
    Node* tree1_281 = tree1->copy();
    tree1_281->position += vec3(-8.11652660369873, 124.47830963134766, 44.574310302734375);
    tree1_281->eulerAngles = vec3(0.0, 38.717832310282304, 0.0);
    tree1_281->scale = vec3(0.9999897766113282, 0.9999896240234375, 0.9999897766113282);
    Engine::main->addNode(tree1_281);
    Node* elevator = new Node();
    elevator->loadModelFile("/Resources/Game/Map/woodflooro1lod0.dae");
    elevator->geometries[0]->setShader(plankShader);
    elevator->geometries[0]->setDoubleSided();
    elevator->position.x = MAPX;
    elevator->position.z = MAPZ;
    elevator->position.y  = MAPY;
    Node* elevator_1 = elevator->copy();
    elevator_1->position += vec3(-86.081, 124, 49.022);
    elevator_1->scale = vec3(1.75);
    Engine::main->addNode(elevator_1);
    Node* elevator_2 = elevator->copy();
    elevator_2->position += vec3(-12.175, 124, 49.002);
    elevator_2->scale = vec3(1.75);
    Engine::main->addNode(elevator_2);
    Node* bar = new Node();
    bar->loadModelFile("/Resources/Game/Map/bars02lod0.dae");
    bar->geometries[0]->setShader(wallShader8);
    bar->geometries[0]->setDoubleSided();
    bar->position.x = MAPX;
    bar->position.z = MAPZ;
    bar->position.y  = MAPY;
    Node* bar_1 = bar->copy();
    bar_1->position += vec3(-18.305, 100.012, 48.923);
    bar_1->eulerAngles = vec3(0.0, 90, 0.0);
    Engine::main->addNode(bar_1);
    Node* bar_2 = bar->copy();
    bar_2->position += vec3(-79.952, 100.012, 49.011);
    bar_2->eulerAngles = vec3(0.0, 90, 0.0);
    Engine::main->addNode(bar_2);
}

void importTestMap() {
    unsigned int boxType;
    vec3 boxSize, boxPosition, boxEulerAngles;
    
    boxType = Map::DOOR;
    boxSize = vec3(20.0f, 20.0f, 20.0f);
    boxPosition = vec3(0.0f, 9.0f, 60.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(20.0f, 1.0f, 40.0f);
    boxPosition = vec3(0.0f, -1.5f, 30.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(100.0f, 1.0f, 20.0f);
    boxPosition = vec3(0.0f, -1.5f, 0.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(20.0f, 1.0f, 40.0f);
    boxPosition = vec3(0.0f, -1.5f, -30.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(36.339744567871094f, -1.5f, 13.65999984741211f);
    boxEulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(26.200000762939453f, -1.5f, 27.0f);
    boxEulerAngles = vec3(0.0f, 45.00000466733367f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(19.999998092651367f, 1.0f, 20.0f);
    boxPosition = vec3(13.65999984741211f, -1.5f, 36.34000015258789f);
    boxEulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(20.0f, -1.5f, 20.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(19.999998092651367f, 1.0f, 20.0f);
    boxPosition = vec3(-13.600000381469727f, -1.5f, -36.33000183105469f);
    boxEulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(-36.34000015258789f, -1.5f, -13.600000381469727f);
    boxEulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(-26.95877456665039f, -1.5f, -26.158771514892578f);
    boxEulerAngles = vec3(0.0f, 45.00000466733367f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(-20.0f, -1.5f, -20.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(20.0f, -1.5f, -20.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    
    boxType = Map::WALL;
    boxSize = vec3(20.0f, 1.0f, 20.0f);
    boxPosition = vec3(-20.0f, -1.5f, 20.0f);
    boxEulerAngles = vec3(0.0f, -0.0f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    MapSystemManager::Instance()->updateGrids();
    
    boxType = Map::WALL;
    boxSize = vec3(19.999998092651367f, 1.0f, 20.0f);
    boxPosition = vec3(-13.731363296508789f, -1.5f, 36.58491516113281f);
    boxEulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
    MapSystemManager::Instance()->addMapBox(new MapBoxObject(boxType, boxSize, boxPosition, boxEulerAngles));
    PBRShader* cubeShader = new PBRShader(0.5f, 0.5f);
//    Node* testNode1 = new Node();
//    testNode1->loadUnitCube();
//    testNode1->geometries[0]->setShader(cubeShader);
//    testNode1->scale = vec3(20.0f, 20.0f, 20.0f);
//    testNode1->position = vec3(0.0f, 9.0f, 60.0f);
//    testNode1->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode1);
//    Node* testNode2 = new Node();
//    testNode2->loadUnitCube();
//    testNode2->geometries[0]->setShader(cubeShader);
//    testNode2->scale = vec3(20.0f, 1.0f, 40.0f);
//    testNode2->position = vec3(0.0f, -1.5f, 30.0f);
//    testNode2->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode2);
//    Node* testNode3 = new Node();
//    testNode3->loadUnitCube();
//    testNode3->geometries[0]->setShader(cubeShader);
//    testNode3->scale = vec3(100.0f, 1.0f, 20.0f);
//    testNode3->position = vec3(0.0f, -1.5f, 0.0f);
//    testNode3->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode3);
//    Node* testNode4 = new Node();
//    testNode4->loadUnitCube();
//    testNode4->geometries[0]->setShader(cubeShader);
//    testNode4->scale = vec3(20.0f, 1.0f, 40.0f);
//    testNode4->position = vec3(0.0f, -1.5f, -30.0f);
//    testNode4->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode4);
//    Node* testNode5 = new Node();
//    testNode5->loadUnitCube();
//    testNode5->geometries[0]->setShader(cubeShader);
//    testNode5->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode5->position = vec3(36.339744567871094f, -1.5f, 13.65999984741211f);
//    testNode5->eulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode5);
//    Node* testNode6 = new Node();
//    testNode6->loadUnitCube();
//    testNode6->geometries[0]->setShader(cubeShader);
//    testNode6->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode6->position = vec3(26.200000762939453f, -1.5f, 27.0f);
//    testNode6->eulerAngles = vec3(0.0f, 45.00000466733367f, 0.0f);
//    Engine::main->addNode(testNode6);
//    Node* testNode7 = new Node();
//    testNode7->loadUnitCube();
//    testNode7->geometries[0]->setShader(cubeShader);
//    testNode7->scale = vec3(19.999998092651367f, 1.0f, 20.0f);
//    testNode7->position = vec3(13.65999984741211f, -1.5f, 36.34000015258789f);
//    testNode7->eulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode7);
//    Node* testNode8 = new Node();
//    testNode8->loadUnitCube();
//    testNode8->geometries[0]->setShader(cubeShader);
//    testNode8->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode8->position = vec3(20.0f, -1.5f, 20.0f);
//    testNode8->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode8);
//    Node* testNode9 = new Node();
//    testNode9->loadUnitCube();
//    testNode9->geometries[0]->setShader(cubeShader);
//    testNode9->scale = vec3(19.999998092651367f, 1.0f, 20.0f);
//    testNode9->position = vec3(-13.600000381469727f, -1.5f, -36.33000183105469f);
//    testNode9->eulerAngles = vec3(0.0f, -60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode9);
//    Node* testNode10 = new Node();
//    testNode10->loadUnitCube();
//    testNode10->geometries[0]->setShader(cubeShader);
//    testNode10->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode10->position = vec3(-36.34000015258789f, -1.5f, -13.600000381469727f);
//    testNode10->eulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode10);
//    Node* testNode11 = new Node();
//    testNode11->loadUnitCube();
//    testNode11->geometries[0]->setShader(cubeShader);
//    testNode11->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode11->position = vec3(-26.95877456665039f, -1.5f, -26.158771514892578f);
//    testNode11->eulerAngles = vec3(0.0f, 45.00000466733367f, 0.0f);
//    Engine::main->addNode(testNode11);
//    Node* testNode12 = new Node();
//    testNode12->loadUnitCube();
//    testNode12->geometries[0]->setShader(cubeShader);
//    testNode12->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode12->position = vec3(-20.0f, -1.5f, -20.0f);
//    testNode12->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode12);
//    Node* testNode13 = new Node();
//    testNode13->loadUnitCube();
//    testNode13->geometries[0]->setShader(cubeShader);
//    testNode13->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode13->position = vec3(20.0f, -1.5f, -20.0f);
//    testNode13->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode13);
//    Node* testNode14 = new Node();
//    testNode14->loadUnitCube();
//    testNode14->geometries[0]->setShader(cubeShader);
//    testNode14->scale = vec3(20.0f, 1.0f, 20.0f);
//    testNode14->position = vec3(-20.0f, -1.5f, 20.0f);
//    testNode14->eulerAngles = vec3(0.0f, -0.0f, 0.0f);
//    Engine::main->addNode(testNode14);
//    Node* testNode15 = new Node();
//    testNode15->loadUnitCube();
//    testNode15->geometries[0]->setShader(cubeShader);
//    testNode15->scale = vec3(19.999998092651367f, 1.0f, 20.0f);
//    testNode15->position = vec3(-13.731363296508789f, -1.5f, 36.58491516113281f);
//    testNode15->eulerAngles = vec3(0.0f, 60.000001669652114f, 0.0f);
//    Engine::main->addNode(testNode15);
    
}

} // namespace ImportMapHelper
